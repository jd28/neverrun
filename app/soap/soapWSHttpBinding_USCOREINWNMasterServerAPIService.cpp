/* soapWSHttpBinding_USCOREINWNMasterServerAPIService.cpp
   Generated by gSOAP 2.8.11 from NWNlist.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapWSHttpBinding_USCOREINWNMasterServerAPIService.h"

WSHttpBinding_USCOREINWNMasterServerAPIService::WSHttpBinding_USCOREINWNMasterServerAPIService()
{	WSHttpBinding_USCOREINWNMasterServerAPIService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSHttpBinding_USCOREINWNMasterServerAPIService::WSHttpBinding_USCOREINWNMasterServerAPIService(const struct soap &_soap) : soap(_soap)
{ }

WSHttpBinding_USCOREINWNMasterServerAPIService::WSHttpBinding_USCOREINWNMasterServerAPIService(soap_mode iomode)
{	WSHttpBinding_USCOREINWNMasterServerAPIService_init(iomode, iomode);
}

WSHttpBinding_USCOREINWNMasterServerAPIService::WSHttpBinding_USCOREINWNMasterServerAPIService(soap_mode imode, soap_mode omode)
{	WSHttpBinding_USCOREINWNMasterServerAPIService_init(imode, omode);
}

WSHttpBinding_USCOREINWNMasterServerAPIService::~WSHttpBinding_USCOREINWNMasterServerAPIService()
{ }

void WSHttpBinding_USCOREINWNMasterServerAPIService::WSHttpBinding_USCOREINWNMasterServerAPIService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns4", "http://schemas.datacontract.org/2004/07/NWN", NULL, NULL},
	{"ns5", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL},
	{"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
	{"ns1", "http://api.mst.valhallalegends.com/NWNMasterServerAPI", NULL, NULL},
	{"ns6", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
};

void WSHttpBinding_USCOREINWNMasterServerAPIService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void WSHttpBinding_USCOREINWNMasterServerAPIService::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	WSHttpBinding_USCOREINWNMasterServerAPIService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
WSHttpBinding_USCOREINWNMasterServerAPIService *WSHttpBinding_USCOREINWNMasterServerAPIService::copy()
{	WSHttpBinding_USCOREINWNMasterServerAPIService *dup = SOAP_NEW_COPY(WSHttpBinding_USCOREINWNMasterServerAPIService(*(struct soap*)this));
	return dup;
}
#endif

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_close_socket()
{	return soap_closesock(this);
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void WSHttpBinding_USCOREINWNMasterServerAPIService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSHttpBinding_USCOREINWNMasterServerAPIService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *WSHttpBinding_USCOREINWNMasterServerAPIService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void WSHttpBinding_USCOREINWNMasterServerAPIService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *WSHttpBinding_USCOREINWNMasterServerAPIService::soap_header()
{	return this->header;
}

int WSHttpBinding_USCOREINWNMasterServerAPIService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				return this->error;
			soap_destroy(this);
			soap_end(this);
		}
	}
	else
		return this->error;
	return SOAP_OK;
}

SOAP_SOCKET WSHttpBinding_USCOREINWNMasterServerAPIService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET WSHttpBinding_USCOREINWNMasterServerAPIService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int WSHttpBinding_USCOREINWNMasterServerAPIService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int WSHttpBinding_USCOREINWNMasterServerAPIService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns6__LookupServerByName(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByAddress(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetOnlineServerList(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetOnlineUserCount(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetSupportedProductList(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByModule(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__RegisterPendingServers(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByGameType(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetClientExtensionUpdate(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByGameTypeClientExtension(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__IncrementStatistic(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByName_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByAddress_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetOnlineServerList_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetOnlineUserCount_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetSupportedProductList_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByModule_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__RegisterPendingServers_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByGameType_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__GetClientExtensionUpdate_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__LookupServerByGameTypeClientExtension_(WSHttpBinding_USCOREINWNMasterServerAPIService*);
static int serve___ns6__IncrementStatistic_(WSHttpBinding_USCOREINWNMasterServerAPIService*);

int WSHttpBinding_USCOREINWNMasterServerAPIService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByName"))
		return serve___ns6__LookupServerByName(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByAddress"))
		return serve___ns6__LookupServerByAddress(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetOnlineServerList"))
		return serve___ns6__GetOnlineServerList(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetOnlineUserCount"))
		return serve___ns6__GetOnlineUserCount(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetSupportedProductList"))
		return serve___ns6__GetSupportedProductList(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByModule"))
		return serve___ns6__LookupServerByModule(this);
	if (!soap_match_tag(this, this->tag, "ns1:RegisterPendingServers"))
		return serve___ns6__RegisterPendingServers(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByGameType"))
		return serve___ns6__LookupServerByGameType(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetClientExtensionUpdate"))
		return serve___ns6__GetClientExtensionUpdate(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByGameTypeClientExtension"))
		return serve___ns6__LookupServerByGameTypeClientExtension(this);
	if (!soap_match_tag(this, this->tag, "ns1:IncrementStatistic"))
		return serve___ns6__IncrementStatistic(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByName"))
		return serve___ns6__LookupServerByName_(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByAddress"))
		return serve___ns6__LookupServerByAddress_(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetOnlineServerList"))
		return serve___ns6__GetOnlineServerList_(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetOnlineUserCount"))
		return serve___ns6__GetOnlineUserCount_(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetSupportedProductList"))
		return serve___ns6__GetSupportedProductList_(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByModule"))
		return serve___ns6__LookupServerByModule_(this);
	if (!soap_match_tag(this, this->tag, "ns1:RegisterPendingServers"))
		return serve___ns6__RegisterPendingServers_(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByGameType"))
		return serve___ns6__LookupServerByGameType_(this);
	if (!soap_match_tag(this, this->tag, "ns1:GetClientExtensionUpdate"))
		return serve___ns6__GetClientExtensionUpdate_(this);
	if (!soap_match_tag(this, this->tag, "ns1:LookupServerByGameTypeClientExtension"))
		return serve___ns6__LookupServerByGameTypeClientExtension_(this);
	if (!soap_match_tag(this, this->tag, "ns1:IncrementStatistic"))
		return serve___ns6__IncrementStatistic_(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns6__LookupServerByName(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByName soap_tmp___ns6__LookupServerByName;
	_ns1__LookupServerByNameResponse ns1__LookupServerByNameResponse;
	ns1__LookupServerByNameResponse.soap_default(soap);
	soap_default___ns6__LookupServerByName(soap, &soap_tmp___ns6__LookupServerByName);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByName(soap, &soap_tmp___ns6__LookupServerByName, "-ns6:LookupServerByName", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByName(soap_tmp___ns6__LookupServerByName.ns1__LookupServerByName, &ns1__LookupServerByNameResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByNameResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByNameResponse.soap_put(soap, "ns1:LookupServerByNameResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByNameResponse.soap_put(soap, "ns1:LookupServerByNameResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByAddress(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByAddress soap_tmp___ns6__LookupServerByAddress;
	_ns1__LookupServerByAddressResponse ns1__LookupServerByAddressResponse;
	ns1__LookupServerByAddressResponse.soap_default(soap);
	soap_default___ns6__LookupServerByAddress(soap, &soap_tmp___ns6__LookupServerByAddress);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByAddress(soap, &soap_tmp___ns6__LookupServerByAddress, "-ns6:LookupServerByAddress", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByAddress(soap_tmp___ns6__LookupServerByAddress.ns1__LookupServerByAddress, &ns1__LookupServerByAddressResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByAddressResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByAddressResponse.soap_put(soap, "ns1:LookupServerByAddressResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByAddressResponse.soap_put(soap, "ns1:LookupServerByAddressResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetOnlineServerList(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetOnlineServerList soap_tmp___ns6__GetOnlineServerList;
	_ns1__GetOnlineServerListResponse ns1__GetOnlineServerListResponse;
	ns1__GetOnlineServerListResponse.soap_default(soap);
	soap_default___ns6__GetOnlineServerList(soap, &soap_tmp___ns6__GetOnlineServerList);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetOnlineServerList(soap, &soap_tmp___ns6__GetOnlineServerList, "-ns6:GetOnlineServerList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOnlineServerList(soap_tmp___ns6__GetOnlineServerList.ns1__GetOnlineServerList, &ns1__GetOnlineServerListResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetOnlineServerListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOnlineServerListResponse.soap_put(soap, "ns1:GetOnlineServerListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOnlineServerListResponse.soap_put(soap, "ns1:GetOnlineServerListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetOnlineUserCount(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetOnlineUserCount soap_tmp___ns6__GetOnlineUserCount;
	_ns1__GetOnlineUserCountResponse ns1__GetOnlineUserCountResponse;
	ns1__GetOnlineUserCountResponse.soap_default(soap);
	soap_default___ns6__GetOnlineUserCount(soap, &soap_tmp___ns6__GetOnlineUserCount);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetOnlineUserCount(soap, &soap_tmp___ns6__GetOnlineUserCount, "-ns6:GetOnlineUserCount", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOnlineUserCount(soap_tmp___ns6__GetOnlineUserCount.ns1__GetOnlineUserCount, &ns1__GetOnlineUserCountResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetOnlineUserCountResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOnlineUserCountResponse.soap_put(soap, "ns1:GetOnlineUserCountResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOnlineUserCountResponse.soap_put(soap, "ns1:GetOnlineUserCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetSupportedProductList(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetSupportedProductList soap_tmp___ns6__GetSupportedProductList;
	_ns1__GetSupportedProductListResponse ns1__GetSupportedProductListResponse;
	ns1__GetSupportedProductListResponse.soap_default(soap);
	soap_default___ns6__GetSupportedProductList(soap, &soap_tmp___ns6__GetSupportedProductList);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetSupportedProductList(soap, &soap_tmp___ns6__GetSupportedProductList, "-ns6:GetSupportedProductList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetSupportedProductList(soap_tmp___ns6__GetSupportedProductList.ns1__GetSupportedProductList, &ns1__GetSupportedProductListResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetSupportedProductListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetSupportedProductListResponse.soap_put(soap, "ns1:GetSupportedProductListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetSupportedProductListResponse.soap_put(soap, "ns1:GetSupportedProductListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByModule(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByModule soap_tmp___ns6__LookupServerByModule;
	_ns1__LookupServerByModuleResponse ns1__LookupServerByModuleResponse;
	ns1__LookupServerByModuleResponse.soap_default(soap);
	soap_default___ns6__LookupServerByModule(soap, &soap_tmp___ns6__LookupServerByModule);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByModule(soap, &soap_tmp___ns6__LookupServerByModule, "-ns6:LookupServerByModule", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByModule(soap_tmp___ns6__LookupServerByModule.ns1__LookupServerByModule, &ns1__LookupServerByModuleResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByModuleResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByModuleResponse.soap_put(soap, "ns1:LookupServerByModuleResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByModuleResponse.soap_put(soap, "ns1:LookupServerByModuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__RegisterPendingServers(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__RegisterPendingServers soap_tmp___ns6__RegisterPendingServers;
	_ns1__RegisterPendingServersResponse ns1__RegisterPendingServersResponse;
	ns1__RegisterPendingServersResponse.soap_default(soap);
	soap_default___ns6__RegisterPendingServers(soap, &soap_tmp___ns6__RegisterPendingServers);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__RegisterPendingServers(soap, &soap_tmp___ns6__RegisterPendingServers, "-ns6:RegisterPendingServers", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->RegisterPendingServers(soap_tmp___ns6__RegisterPendingServers.ns1__RegisterPendingServers, &ns1__RegisterPendingServersResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__RegisterPendingServersResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RegisterPendingServersResponse.soap_put(soap, "ns1:RegisterPendingServersResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RegisterPendingServersResponse.soap_put(soap, "ns1:RegisterPendingServersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByGameType(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByGameType soap_tmp___ns6__LookupServerByGameType;
	_ns1__LookupServerByGameTypeResponse ns1__LookupServerByGameTypeResponse;
	ns1__LookupServerByGameTypeResponse.soap_default(soap);
	soap_default___ns6__LookupServerByGameType(soap, &soap_tmp___ns6__LookupServerByGameType);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByGameType(soap, &soap_tmp___ns6__LookupServerByGameType, "-ns6:LookupServerByGameType", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByGameType(soap_tmp___ns6__LookupServerByGameType.ns1__LookupServerByGameType, &ns1__LookupServerByGameTypeResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByGameTypeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByGameTypeResponse.soap_put(soap, "ns1:LookupServerByGameTypeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByGameTypeResponse.soap_put(soap, "ns1:LookupServerByGameTypeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetClientExtensionUpdate(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetClientExtensionUpdate soap_tmp___ns6__GetClientExtensionUpdate;
	_ns1__GetClientExtensionUpdateResponse ns1__GetClientExtensionUpdateResponse;
	ns1__GetClientExtensionUpdateResponse.soap_default(soap);
	soap_default___ns6__GetClientExtensionUpdate(soap, &soap_tmp___ns6__GetClientExtensionUpdate);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetClientExtensionUpdate(soap, &soap_tmp___ns6__GetClientExtensionUpdate, "-ns6:GetClientExtensionUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetClientExtensionUpdate(soap_tmp___ns6__GetClientExtensionUpdate.ns1__GetClientExtensionUpdate, &ns1__GetClientExtensionUpdateResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetClientExtensionUpdateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetClientExtensionUpdateResponse.soap_put(soap, "ns1:GetClientExtensionUpdateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetClientExtensionUpdateResponse.soap_put(soap, "ns1:GetClientExtensionUpdateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByGameTypeClientExtension(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByGameTypeClientExtension soap_tmp___ns6__LookupServerByGameTypeClientExtension;
	_ns1__LookupServerByGameTypeClientExtensionResponse ns1__LookupServerByGameTypeClientExtensionResponse;
	ns1__LookupServerByGameTypeClientExtensionResponse.soap_default(soap);
	soap_default___ns6__LookupServerByGameTypeClientExtension(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByGameTypeClientExtension(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension, "-ns6:LookupServerByGameTypeClientExtension", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByGameTypeClientExtension(soap_tmp___ns6__LookupServerByGameTypeClientExtension.ns1__LookupServerByGameTypeClientExtension, &ns1__LookupServerByGameTypeClientExtensionResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByGameTypeClientExtensionResponse.soap_put(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByGameTypeClientExtensionResponse.soap_put(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__IncrementStatistic(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__IncrementStatistic soap_tmp___ns6__IncrementStatistic;
	_ns1__IncrementStatisticResponse ns1__IncrementStatisticResponse;
	ns1__IncrementStatisticResponse.soap_default(soap);
	soap_default___ns6__IncrementStatistic(soap, &soap_tmp___ns6__IncrementStatistic);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__IncrementStatistic(soap, &soap_tmp___ns6__IncrementStatistic, "-ns6:IncrementStatistic", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->IncrementStatistic(soap_tmp___ns6__IncrementStatistic.ns1__IncrementStatistic, &ns1__IncrementStatisticResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__IncrementStatisticResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__IncrementStatisticResponse.soap_put(soap, "ns1:IncrementStatisticResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__IncrementStatisticResponse.soap_put(soap, "ns1:IncrementStatisticResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByName_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByName_ soap_tmp___ns6__LookupServerByName_;
	_ns1__LookupServerByNameResponse ns1__LookupServerByNameResponse;
	ns1__LookupServerByNameResponse.soap_default(soap);
	soap_default___ns6__LookupServerByName_(soap, &soap_tmp___ns6__LookupServerByName_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByName_(soap, &soap_tmp___ns6__LookupServerByName_, "-ns6:LookupServerByName", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByName_(soap_tmp___ns6__LookupServerByName_.ns1__LookupServerByName, &ns1__LookupServerByNameResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByNameResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByNameResponse.soap_put(soap, "ns1:LookupServerByNameResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByNameResponse.soap_put(soap, "ns1:LookupServerByNameResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByAddress_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByAddress_ soap_tmp___ns6__LookupServerByAddress_;
	_ns1__LookupServerByAddressResponse ns1__LookupServerByAddressResponse;
	ns1__LookupServerByAddressResponse.soap_default(soap);
	soap_default___ns6__LookupServerByAddress_(soap, &soap_tmp___ns6__LookupServerByAddress_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByAddress_(soap, &soap_tmp___ns6__LookupServerByAddress_, "-ns6:LookupServerByAddress", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByAddress_(soap_tmp___ns6__LookupServerByAddress_.ns1__LookupServerByAddress, &ns1__LookupServerByAddressResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByAddressResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByAddressResponse.soap_put(soap, "ns1:LookupServerByAddressResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByAddressResponse.soap_put(soap, "ns1:LookupServerByAddressResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetOnlineServerList_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetOnlineServerList_ soap_tmp___ns6__GetOnlineServerList_;
	_ns1__GetOnlineServerListResponse ns1__GetOnlineServerListResponse;
	ns1__GetOnlineServerListResponse.soap_default(soap);
	soap_default___ns6__GetOnlineServerList_(soap, &soap_tmp___ns6__GetOnlineServerList_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetOnlineServerList_(soap, &soap_tmp___ns6__GetOnlineServerList_, "-ns6:GetOnlineServerList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOnlineServerList_(soap_tmp___ns6__GetOnlineServerList_.ns1__GetOnlineServerList, &ns1__GetOnlineServerListResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetOnlineServerListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOnlineServerListResponse.soap_put(soap, "ns1:GetOnlineServerListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOnlineServerListResponse.soap_put(soap, "ns1:GetOnlineServerListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetOnlineUserCount_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetOnlineUserCount_ soap_tmp___ns6__GetOnlineUserCount_;
	_ns1__GetOnlineUserCountResponse ns1__GetOnlineUserCountResponse;
	ns1__GetOnlineUserCountResponse.soap_default(soap);
	soap_default___ns6__GetOnlineUserCount_(soap, &soap_tmp___ns6__GetOnlineUserCount_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetOnlineUserCount_(soap, &soap_tmp___ns6__GetOnlineUserCount_, "-ns6:GetOnlineUserCount", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetOnlineUserCount_(soap_tmp___ns6__GetOnlineUserCount_.ns1__GetOnlineUserCount, &ns1__GetOnlineUserCountResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetOnlineUserCountResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOnlineUserCountResponse.soap_put(soap, "ns1:GetOnlineUserCountResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOnlineUserCountResponse.soap_put(soap, "ns1:GetOnlineUserCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetSupportedProductList_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetSupportedProductList_ soap_tmp___ns6__GetSupportedProductList_;
	_ns1__GetSupportedProductListResponse ns1__GetSupportedProductListResponse;
	ns1__GetSupportedProductListResponse.soap_default(soap);
	soap_default___ns6__GetSupportedProductList_(soap, &soap_tmp___ns6__GetSupportedProductList_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetSupportedProductList_(soap, &soap_tmp___ns6__GetSupportedProductList_, "-ns6:GetSupportedProductList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetSupportedProductList_(soap_tmp___ns6__GetSupportedProductList_.ns1__GetSupportedProductList, &ns1__GetSupportedProductListResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetSupportedProductListResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetSupportedProductListResponse.soap_put(soap, "ns1:GetSupportedProductListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetSupportedProductListResponse.soap_put(soap, "ns1:GetSupportedProductListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByModule_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByModule_ soap_tmp___ns6__LookupServerByModule_;
	_ns1__LookupServerByModuleResponse ns1__LookupServerByModuleResponse;
	ns1__LookupServerByModuleResponse.soap_default(soap);
	soap_default___ns6__LookupServerByModule_(soap, &soap_tmp___ns6__LookupServerByModule_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByModule_(soap, &soap_tmp___ns6__LookupServerByModule_, "-ns6:LookupServerByModule", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByModule_(soap_tmp___ns6__LookupServerByModule_.ns1__LookupServerByModule, &ns1__LookupServerByModuleResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByModuleResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByModuleResponse.soap_put(soap, "ns1:LookupServerByModuleResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByModuleResponse.soap_put(soap, "ns1:LookupServerByModuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__RegisterPendingServers_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__RegisterPendingServers_ soap_tmp___ns6__RegisterPendingServers_;
	_ns1__RegisterPendingServersResponse ns1__RegisterPendingServersResponse;
	ns1__RegisterPendingServersResponse.soap_default(soap);
	soap_default___ns6__RegisterPendingServers_(soap, &soap_tmp___ns6__RegisterPendingServers_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__RegisterPendingServers_(soap, &soap_tmp___ns6__RegisterPendingServers_, "-ns6:RegisterPendingServers", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->RegisterPendingServers_(soap_tmp___ns6__RegisterPendingServers_.ns1__RegisterPendingServers, &ns1__RegisterPendingServersResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__RegisterPendingServersResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RegisterPendingServersResponse.soap_put(soap, "ns1:RegisterPendingServersResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RegisterPendingServersResponse.soap_put(soap, "ns1:RegisterPendingServersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByGameType_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByGameType_ soap_tmp___ns6__LookupServerByGameType_;
	_ns1__LookupServerByGameTypeResponse ns1__LookupServerByGameTypeResponse;
	ns1__LookupServerByGameTypeResponse.soap_default(soap);
	soap_default___ns6__LookupServerByGameType_(soap, &soap_tmp___ns6__LookupServerByGameType_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByGameType_(soap, &soap_tmp___ns6__LookupServerByGameType_, "-ns6:LookupServerByGameType", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByGameType_(soap_tmp___ns6__LookupServerByGameType_.ns1__LookupServerByGameType, &ns1__LookupServerByGameTypeResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByGameTypeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByGameTypeResponse.soap_put(soap, "ns1:LookupServerByGameTypeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByGameTypeResponse.soap_put(soap, "ns1:LookupServerByGameTypeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__GetClientExtensionUpdate_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__GetClientExtensionUpdate_ soap_tmp___ns6__GetClientExtensionUpdate_;
	_ns1__GetClientExtensionUpdateResponse ns1__GetClientExtensionUpdateResponse;
	ns1__GetClientExtensionUpdateResponse.soap_default(soap);
	soap_default___ns6__GetClientExtensionUpdate_(soap, &soap_tmp___ns6__GetClientExtensionUpdate_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__GetClientExtensionUpdate_(soap, &soap_tmp___ns6__GetClientExtensionUpdate_, "-ns6:GetClientExtensionUpdate", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetClientExtensionUpdate_(soap_tmp___ns6__GetClientExtensionUpdate_.ns1__GetClientExtensionUpdate, &ns1__GetClientExtensionUpdateResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__GetClientExtensionUpdateResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetClientExtensionUpdateResponse.soap_put(soap, "ns1:GetClientExtensionUpdateResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetClientExtensionUpdateResponse.soap_put(soap, "ns1:GetClientExtensionUpdateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__LookupServerByGameTypeClientExtension_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__LookupServerByGameTypeClientExtension_ soap_tmp___ns6__LookupServerByGameTypeClientExtension_;
	_ns1__LookupServerByGameTypeClientExtensionResponse ns1__LookupServerByGameTypeClientExtensionResponse;
	ns1__LookupServerByGameTypeClientExtensionResponse.soap_default(soap);
	soap_default___ns6__LookupServerByGameTypeClientExtension_(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__LookupServerByGameTypeClientExtension_(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension_, "-ns6:LookupServerByGameTypeClientExtension", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->LookupServerByGameTypeClientExtension_(soap_tmp___ns6__LookupServerByGameTypeClientExtension_.ns1__LookupServerByGameTypeClientExtension, &ns1__LookupServerByGameTypeClientExtensionResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__LookupServerByGameTypeClientExtensionResponse.soap_put(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__LookupServerByGameTypeClientExtensionResponse.soap_put(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns6__IncrementStatistic_(WSHttpBinding_USCOREINWNMasterServerAPIService *soap)
{	struct __ns6__IncrementStatistic_ soap_tmp___ns6__IncrementStatistic_;
	_ns1__IncrementStatisticResponse ns1__IncrementStatisticResponse;
	ns1__IncrementStatisticResponse.soap_default(soap);
	soap_default___ns6__IncrementStatistic_(soap, &soap_tmp___ns6__IncrementStatistic_);
	soap->encodingStyle = NULL;
	if (!soap_get___ns6__IncrementStatistic_(soap, &soap_tmp___ns6__IncrementStatistic_, "-ns6:IncrementStatistic", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->IncrementStatistic_(soap_tmp___ns6__IncrementStatistic_.ns1__IncrementStatistic, &ns1__IncrementStatisticResponse);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	ns1__IncrementStatisticResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__IncrementStatisticResponse.soap_put(soap, "ns1:IncrementStatisticResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__IncrementStatisticResponse.soap_put(soap, "ns1:IncrementStatisticResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
