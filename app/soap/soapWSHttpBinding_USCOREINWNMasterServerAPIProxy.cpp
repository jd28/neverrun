/* soapWSHttpBinding_USCOREINWNMasterServerAPIProxy.cpp
   Generated by gSOAP 2.8.11 from NWNlist.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/
#pragma once
#include "soapWSHttpBinding_USCOREINWNMasterServerAPIProxy.h"

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy()
{	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy(const struct soap &_soap) : soap(_soap)
{ }

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy(const char *url)
{	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy(soap_mode iomode)
{	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(iomode, iomode);
}

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy(const char *url, soap_mode iomode)
{	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(iomode, iomode);
	soap_endpoint = url;
}

WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy(soap_mode imode, soap_mode omode)
{	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(imode, omode);
}

WSHttpBinding_USCOREINWNMasterServerAPIProxy::~WSHttpBinding_USCOREINWNMasterServerAPIProxy()
{ }

void WSHttpBinding_USCOREINWNMasterServerAPIProxy::WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
//DSS	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
//DSS	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
//DSS	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
//DSS	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},

	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", NULL, NULL},  //DSS
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", NULL, NULL}, //DSS
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", NULL, NULL}, //DSS
	{"xsd", "http://www.w3.org/2001/XMLSchema", NULL, NULL}, //DSS


	{"ns4", "http://schemas.datacontract.org/2004/07/NWN", NULL, NULL},
	{"ns5", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL},
	{"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
	{"ns1", "http://api.mst.valhallalegends.com/NWNMasterServerAPI", NULL, NULL},
	{"ns6", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void WSHttpBinding_USCOREINWNMasterServerAPIProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void WSHttpBinding_USCOREINWNMasterServerAPIProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	WSHttpBinding_USCOREINWNMasterServerAPIProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_fault()
{	return this->fault;
}

const char *WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_close_socket()
{	return soap_closesock(this);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *WSHttpBinding_USCOREINWNMasterServerAPIProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByName(const char *endpoint, const char *soap_action, _ns1__LookupServerByName *ns1__LookupServerByName, _ns1__LookupServerByNameResponse *ns1__LookupServerByNameResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByName soap_tmp___ns6__LookupServerByName;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByName";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByName.ns1__LookupServerByName = ns1__LookupServerByName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByName(soap, &soap_tmp___ns6__LookupServerByName);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByName(soap, &soap_tmp___ns6__LookupServerByName, "-ns6:LookupServerByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByName(soap, &soap_tmp___ns6__LookupServerByName, "-ns6:LookupServerByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByNameResponse)
		return soap_closesock(soap);
	ns1__LookupServerByNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByNameResponse->soap_get(soap, "ns1:LookupServerByNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByAddress(const char *endpoint, const char *soap_action, _ns1__LookupServerByAddress *ns1__LookupServerByAddress, _ns1__LookupServerByAddressResponse *ns1__LookupServerByAddressResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByAddress soap_tmp___ns6__LookupServerByAddress;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByAddress";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByAddress.ns1__LookupServerByAddress = ns1__LookupServerByAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByAddress(soap, &soap_tmp___ns6__LookupServerByAddress);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByAddress(soap, &soap_tmp___ns6__LookupServerByAddress, "-ns6:LookupServerByAddress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByAddress(soap, &soap_tmp___ns6__LookupServerByAddress, "-ns6:LookupServerByAddress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByAddressResponse)
		return soap_closesock(soap);
	ns1__LookupServerByAddressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByAddressResponse->soap_get(soap, "ns1:LookupServerByAddressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetOnlineServerList(const char *endpoint, const char *soap_action, _ns1__GetOnlineServerList *ns1__GetOnlineServerList, _ns1__GetOnlineServerListResponse *ns1__GetOnlineServerListResponse)
{	struct soap *soap = this;
	struct __ns6__GetOnlineServerList soap_tmp___ns6__GetOnlineServerList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetOnlineServerList";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetOnlineServerList.ns1__GetOnlineServerList = ns1__GetOnlineServerList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetOnlineServerList(soap, &soap_tmp___ns6__GetOnlineServerList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetOnlineServerList(soap, &soap_tmp___ns6__GetOnlineServerList, "-ns6:GetOnlineServerList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetOnlineServerList(soap, &soap_tmp___ns6__GetOnlineServerList, "-ns6:GetOnlineServerList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetOnlineServerListResponse)
		return soap_closesock(soap);
	ns1__GetOnlineServerListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetOnlineServerListResponse->soap_get(soap, "ns1:GetOnlineServerListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetOnlineUserCount(const char *endpoint, const char *soap_action, _ns1__GetOnlineUserCount *ns1__GetOnlineUserCount, _ns1__GetOnlineUserCountResponse *ns1__GetOnlineUserCountResponse)
{	struct soap *soap = this;
	struct __ns6__GetOnlineUserCount soap_tmp___ns6__GetOnlineUserCount;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetOnlineUserCount";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetOnlineUserCount.ns1__GetOnlineUserCount = ns1__GetOnlineUserCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetOnlineUserCount(soap, &soap_tmp___ns6__GetOnlineUserCount);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetOnlineUserCount(soap, &soap_tmp___ns6__GetOnlineUserCount, "-ns6:GetOnlineUserCount", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetOnlineUserCount(soap, &soap_tmp___ns6__GetOnlineUserCount, "-ns6:GetOnlineUserCount", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetOnlineUserCountResponse)
		return soap_closesock(soap);
	ns1__GetOnlineUserCountResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetOnlineUserCountResponse->soap_get(soap, "ns1:GetOnlineUserCountResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetSupportedProductList(const char *endpoint, const char *soap_action, _ns1__GetSupportedProductList *ns1__GetSupportedProductList, _ns1__GetSupportedProductListResponse *ns1__GetSupportedProductListResponse)
{	struct soap *soap = this;
	struct __ns6__GetSupportedProductList soap_tmp___ns6__GetSupportedProductList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetSupportedProductList";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetSupportedProductList.ns1__GetSupportedProductList = ns1__GetSupportedProductList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetSupportedProductList(soap, &soap_tmp___ns6__GetSupportedProductList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetSupportedProductList(soap, &soap_tmp___ns6__GetSupportedProductList, "-ns6:GetSupportedProductList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetSupportedProductList(soap, &soap_tmp___ns6__GetSupportedProductList, "-ns6:GetSupportedProductList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSupportedProductListResponse)
		return soap_closesock(soap);
	ns1__GetSupportedProductListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSupportedProductListResponse->soap_get(soap, "ns1:GetSupportedProductListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByModule(const char *endpoint, const char *soap_action, _ns1__LookupServerByModule *ns1__LookupServerByModule, _ns1__LookupServerByModuleResponse *ns1__LookupServerByModuleResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByModule soap_tmp___ns6__LookupServerByModule;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByModule";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByModule.ns1__LookupServerByModule = ns1__LookupServerByModule;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByModule(soap, &soap_tmp___ns6__LookupServerByModule);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByModule(soap, &soap_tmp___ns6__LookupServerByModule, "-ns6:LookupServerByModule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByModule(soap, &soap_tmp___ns6__LookupServerByModule, "-ns6:LookupServerByModule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByModuleResponse)
		return soap_closesock(soap);
	ns1__LookupServerByModuleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByModuleResponse->soap_get(soap, "ns1:LookupServerByModuleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::RegisterPendingServers(const char *endpoint, const char *soap_action, _ns1__RegisterPendingServers *ns1__RegisterPendingServers, _ns1__RegisterPendingServersResponse *ns1__RegisterPendingServersResponse)
{	struct soap *soap = this;
	struct __ns6__RegisterPendingServers soap_tmp___ns6__RegisterPendingServers;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/RegisterPendingServers";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__RegisterPendingServers.ns1__RegisterPendingServers = ns1__RegisterPendingServers;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__RegisterPendingServers(soap, &soap_tmp___ns6__RegisterPendingServers);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__RegisterPendingServers(soap, &soap_tmp___ns6__RegisterPendingServers, "-ns6:RegisterPendingServers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__RegisterPendingServers(soap, &soap_tmp___ns6__RegisterPendingServers, "-ns6:RegisterPendingServers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterPendingServersResponse)
		return soap_closesock(soap);
	ns1__RegisterPendingServersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterPendingServersResponse->soap_get(soap, "ns1:RegisterPendingServersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByGameType(const char *endpoint, const char *soap_action, _ns1__LookupServerByGameType *ns1__LookupServerByGameType, _ns1__LookupServerByGameTypeResponse *ns1__LookupServerByGameTypeResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByGameType soap_tmp___ns6__LookupServerByGameType;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByGameType";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByGameType.ns1__LookupServerByGameType = ns1__LookupServerByGameType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByGameType(soap, &soap_tmp___ns6__LookupServerByGameType);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByGameType(soap, &soap_tmp___ns6__LookupServerByGameType, "-ns6:LookupServerByGameType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByGameType(soap, &soap_tmp___ns6__LookupServerByGameType, "-ns6:LookupServerByGameType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByGameTypeResponse)
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeResponse->soap_get(soap, "ns1:LookupServerByGameTypeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetClientExtensionUpdate(const char *endpoint, const char *soap_action, _ns1__GetClientExtensionUpdate *ns1__GetClientExtensionUpdate, _ns1__GetClientExtensionUpdateResponse *ns1__GetClientExtensionUpdateResponse)
{	struct soap *soap = this;
	struct __ns6__GetClientExtensionUpdate soap_tmp___ns6__GetClientExtensionUpdate;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetClientExtensionUpdate";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetClientExtensionUpdate.ns1__GetClientExtensionUpdate = ns1__GetClientExtensionUpdate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetClientExtensionUpdate(soap, &soap_tmp___ns6__GetClientExtensionUpdate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetClientExtensionUpdate(soap, &soap_tmp___ns6__GetClientExtensionUpdate, "-ns6:GetClientExtensionUpdate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetClientExtensionUpdate(soap, &soap_tmp___ns6__GetClientExtensionUpdate, "-ns6:GetClientExtensionUpdate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetClientExtensionUpdateResponse)
		return soap_closesock(soap);
	ns1__GetClientExtensionUpdateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetClientExtensionUpdateResponse->soap_get(soap, "ns1:GetClientExtensionUpdateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByGameTypeClientExtension(const char *endpoint, const char *soap_action, _ns1__LookupServerByGameTypeClientExtension *ns1__LookupServerByGameTypeClientExtension, _ns1__LookupServerByGameTypeClientExtensionResponse *ns1__LookupServerByGameTypeClientExtensionResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByGameTypeClientExtension soap_tmp___ns6__LookupServerByGameTypeClientExtension;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByGameTypeClientExtension";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByGameTypeClientExtension.ns1__LookupServerByGameTypeClientExtension = ns1__LookupServerByGameTypeClientExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByGameTypeClientExtension(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByGameTypeClientExtension(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension, "-ns6:LookupServerByGameTypeClientExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByGameTypeClientExtension(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension, "-ns6:LookupServerByGameTypeClientExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByGameTypeClientExtensionResponse)
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse->soap_get(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::IncrementStatistic(const char *endpoint, const char *soap_action, _ns1__IncrementStatistic *ns1__IncrementStatistic, _ns1__IncrementStatisticResponse *ns1__IncrementStatisticResponse)
{	struct soap *soap = this;
	struct __ns6__IncrementStatistic soap_tmp___ns6__IncrementStatistic;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/IncrementStatistic";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__IncrementStatistic.ns1__IncrementStatistic = ns1__IncrementStatistic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__IncrementStatistic(soap, &soap_tmp___ns6__IncrementStatistic);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__IncrementStatistic(soap, &soap_tmp___ns6__IncrementStatistic, "-ns6:IncrementStatistic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__IncrementStatistic(soap, &soap_tmp___ns6__IncrementStatistic, "-ns6:IncrementStatistic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__IncrementStatisticResponse)
		return soap_closesock(soap);
	ns1__IncrementStatisticResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__IncrementStatisticResponse->soap_get(soap, "ns1:IncrementStatisticResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByName_(const char *endpoint, const char *soap_action, _ns1__LookupServerByName *ns1__LookupServerByName, _ns1__LookupServerByNameResponse *ns1__LookupServerByNameResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByName_ soap_tmp___ns6__LookupServerByName_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByName";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByName_.ns1__LookupServerByName = ns1__LookupServerByName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByName_(soap, &soap_tmp___ns6__LookupServerByName_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByName_(soap, &soap_tmp___ns6__LookupServerByName_, "-ns6:LookupServerByName", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByName_(soap, &soap_tmp___ns6__LookupServerByName_, "-ns6:LookupServerByName", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByNameResponse)
		return soap_closesock(soap);
	ns1__LookupServerByNameResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByNameResponse->soap_get(soap, "ns1:LookupServerByNameResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByAddress_(const char *endpoint, const char *soap_action, _ns1__LookupServerByAddress *ns1__LookupServerByAddress, _ns1__LookupServerByAddressResponse *ns1__LookupServerByAddressResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByAddress_ soap_tmp___ns6__LookupServerByAddress_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByAddress";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByAddress_.ns1__LookupServerByAddress = ns1__LookupServerByAddress;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByAddress_(soap, &soap_tmp___ns6__LookupServerByAddress_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByAddress_(soap, &soap_tmp___ns6__LookupServerByAddress_, "-ns6:LookupServerByAddress", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByAddress_(soap, &soap_tmp___ns6__LookupServerByAddress_, "-ns6:LookupServerByAddress", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByAddressResponse)
		return soap_closesock(soap);
	ns1__LookupServerByAddressResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByAddressResponse->soap_get(soap, "ns1:LookupServerByAddressResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetOnlineServerList_(const char *endpoint, const char *soap_action, _ns1__GetOnlineServerList *ns1__GetOnlineServerList, _ns1__GetOnlineServerListResponse *ns1__GetOnlineServerListResponse)
{	struct soap *soap = this;
	struct __ns6__GetOnlineServerList_ soap_tmp___ns6__GetOnlineServerList_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetOnlineServerList";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetOnlineServerList_.ns1__GetOnlineServerList = ns1__GetOnlineServerList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetOnlineServerList_(soap, &soap_tmp___ns6__GetOnlineServerList_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetOnlineServerList_(soap, &soap_tmp___ns6__GetOnlineServerList_, "-ns6:GetOnlineServerList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetOnlineServerList_(soap, &soap_tmp___ns6__GetOnlineServerList_, "-ns6:GetOnlineServerList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetOnlineServerListResponse)
		return soap_closesock(soap);
	ns1__GetOnlineServerListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetOnlineServerListResponse->soap_get(soap, "ns1:GetOnlineServerListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetOnlineUserCount_(const char *endpoint, const char *soap_action, _ns1__GetOnlineUserCount *ns1__GetOnlineUserCount, _ns1__GetOnlineUserCountResponse *ns1__GetOnlineUserCountResponse)
{	struct soap *soap = this;
	struct __ns6__GetOnlineUserCount_ soap_tmp___ns6__GetOnlineUserCount_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetOnlineUserCount";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetOnlineUserCount_.ns1__GetOnlineUserCount = ns1__GetOnlineUserCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetOnlineUserCount_(soap, &soap_tmp___ns6__GetOnlineUserCount_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetOnlineUserCount_(soap, &soap_tmp___ns6__GetOnlineUserCount_, "-ns6:GetOnlineUserCount", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetOnlineUserCount_(soap, &soap_tmp___ns6__GetOnlineUserCount_, "-ns6:GetOnlineUserCount", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetOnlineUserCountResponse)
		return soap_closesock(soap);
	ns1__GetOnlineUserCountResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetOnlineUserCountResponse->soap_get(soap, "ns1:GetOnlineUserCountResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetSupportedProductList_(const char *endpoint, const char *soap_action, _ns1__GetSupportedProductList *ns1__GetSupportedProductList, _ns1__GetSupportedProductListResponse *ns1__GetSupportedProductListResponse)
{	struct soap *soap = this;
	struct __ns6__GetSupportedProductList_ soap_tmp___ns6__GetSupportedProductList_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetSupportedProductList";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetSupportedProductList_.ns1__GetSupportedProductList = ns1__GetSupportedProductList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetSupportedProductList_(soap, &soap_tmp___ns6__GetSupportedProductList_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetSupportedProductList_(soap, &soap_tmp___ns6__GetSupportedProductList_, "-ns6:GetSupportedProductList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetSupportedProductList_(soap, &soap_tmp___ns6__GetSupportedProductList_, "-ns6:GetSupportedProductList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetSupportedProductListResponse)
		return soap_closesock(soap);
	ns1__GetSupportedProductListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetSupportedProductListResponse->soap_get(soap, "ns1:GetSupportedProductListResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByModule_(const char *endpoint, const char *soap_action, _ns1__LookupServerByModule *ns1__LookupServerByModule, _ns1__LookupServerByModuleResponse *ns1__LookupServerByModuleResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByModule_ soap_tmp___ns6__LookupServerByModule_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByModule";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByModule_.ns1__LookupServerByModule = ns1__LookupServerByModule;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByModule_(soap, &soap_tmp___ns6__LookupServerByModule_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByModule_(soap, &soap_tmp___ns6__LookupServerByModule_, "-ns6:LookupServerByModule", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByModule_(soap, &soap_tmp___ns6__LookupServerByModule_, "-ns6:LookupServerByModule", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByModuleResponse)
		return soap_closesock(soap);
	ns1__LookupServerByModuleResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByModuleResponse->soap_get(soap, "ns1:LookupServerByModuleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::RegisterPendingServers_(const char *endpoint, const char *soap_action, _ns1__RegisterPendingServers *ns1__RegisterPendingServers, _ns1__RegisterPendingServersResponse *ns1__RegisterPendingServersResponse)
{	struct soap *soap = this;
	struct __ns6__RegisterPendingServers_ soap_tmp___ns6__RegisterPendingServers_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/RegisterPendingServers";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__RegisterPendingServers_.ns1__RegisterPendingServers = ns1__RegisterPendingServers;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__RegisterPendingServers_(soap, &soap_tmp___ns6__RegisterPendingServers_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__RegisterPendingServers_(soap, &soap_tmp___ns6__RegisterPendingServers_, "-ns6:RegisterPendingServers", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__RegisterPendingServers_(soap, &soap_tmp___ns6__RegisterPendingServers_, "-ns6:RegisterPendingServers", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__RegisterPendingServersResponse)
		return soap_closesock(soap);
	ns1__RegisterPendingServersResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__RegisterPendingServersResponse->soap_get(soap, "ns1:RegisterPendingServersResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByGameType_(const char *endpoint, const char *soap_action, _ns1__LookupServerByGameType *ns1__LookupServerByGameType, _ns1__LookupServerByGameTypeResponse *ns1__LookupServerByGameTypeResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByGameType_ soap_tmp___ns6__LookupServerByGameType_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByGameType";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByGameType_.ns1__LookupServerByGameType = ns1__LookupServerByGameType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByGameType_(soap, &soap_tmp___ns6__LookupServerByGameType_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByGameType_(soap, &soap_tmp___ns6__LookupServerByGameType_, "-ns6:LookupServerByGameType", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByGameType_(soap, &soap_tmp___ns6__LookupServerByGameType_, "-ns6:LookupServerByGameType", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByGameTypeResponse)
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeResponse->soap_get(soap, "ns1:LookupServerByGameTypeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::GetClientExtensionUpdate_(const char *endpoint, const char *soap_action, _ns1__GetClientExtensionUpdate *ns1__GetClientExtensionUpdate, _ns1__GetClientExtensionUpdateResponse *ns1__GetClientExtensionUpdateResponse)
{	struct soap *soap = this;
	struct __ns6__GetClientExtensionUpdate_ soap_tmp___ns6__GetClientExtensionUpdate_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/GetClientExtensionUpdate";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__GetClientExtensionUpdate_.ns1__GetClientExtensionUpdate = ns1__GetClientExtensionUpdate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__GetClientExtensionUpdate_(soap, &soap_tmp___ns6__GetClientExtensionUpdate_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__GetClientExtensionUpdate_(soap, &soap_tmp___ns6__GetClientExtensionUpdate_, "-ns6:GetClientExtensionUpdate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__GetClientExtensionUpdate_(soap, &soap_tmp___ns6__GetClientExtensionUpdate_, "-ns6:GetClientExtensionUpdate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetClientExtensionUpdateResponse)
		return soap_closesock(soap);
	ns1__GetClientExtensionUpdateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetClientExtensionUpdateResponse->soap_get(soap, "ns1:GetClientExtensionUpdateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::LookupServerByGameTypeClientExtension_(const char *endpoint, const char *soap_action, _ns1__LookupServerByGameTypeClientExtension *ns1__LookupServerByGameTypeClientExtension, _ns1__LookupServerByGameTypeClientExtensionResponse *ns1__LookupServerByGameTypeClientExtensionResponse)
{	struct soap *soap = this;
	struct __ns6__LookupServerByGameTypeClientExtension_ soap_tmp___ns6__LookupServerByGameTypeClientExtension_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/LookupServerByGameTypeClientExtension";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__LookupServerByGameTypeClientExtension_.ns1__LookupServerByGameTypeClientExtension = ns1__LookupServerByGameTypeClientExtension;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__LookupServerByGameTypeClientExtension_(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__LookupServerByGameTypeClientExtension_(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension_, "-ns6:LookupServerByGameTypeClientExtension", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__LookupServerByGameTypeClientExtension_(soap, &soap_tmp___ns6__LookupServerByGameTypeClientExtension_, "-ns6:LookupServerByGameTypeClientExtension", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__LookupServerByGameTypeClientExtensionResponse)
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__LookupServerByGameTypeClientExtensionResponse->soap_get(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREINWNMasterServerAPIProxy::IncrementStatistic_(const char *endpoint, const char *soap_action, _ns1__IncrementStatistic *ns1__IncrementStatistic, _ns1__IncrementStatisticResponse *ns1__IncrementStatisticResponse)
{	struct soap *soap = this;
	struct __ns6__IncrementStatistic_ soap_tmp___ns6__IncrementStatistic_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (!soap_action)
		soap_action = "http://api.mst.valhallalegends.com/NWNMasterServerAPI/INWNMasterServerAPI/IncrementStatistic";
	soap->encodingStyle = NULL;
	soap_tmp___ns6__IncrementStatistic_.ns1__IncrementStatistic = ns1__IncrementStatistic;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns6__IncrementStatistic_(soap, &soap_tmp___ns6__IncrementStatistic_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns6__IncrementStatistic_(soap, &soap_tmp___ns6__IncrementStatistic_, "-ns6:IncrementStatistic", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns6__IncrementStatistic_(soap, &soap_tmp___ns6__IncrementStatistic_, "-ns6:IncrementStatistic", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__IncrementStatisticResponse)
		return soap_closesock(soap);
	ns1__IncrementStatisticResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__IncrementStatisticResponse->soap_get(soap, "ns1:IncrementStatisticResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
