/* soapC.cpp
   Generated by gSOAP 2.8.11 from NWNlist.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/
#pragma once
#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#elif defined(_MSC_VER)
#pragma warning(disable: 4100)
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.11 2013-01-14 23:38:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Detail)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (!soap->fault->detail)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_in_ns3__char(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns3__guid__:
		return soap_in_ns3__guid__(soap, NULL, NULL, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return soap_in_ns3__duration__(soap, NULL, NULL, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return soap_in_ns3__char__(soap, NULL, NULL, "ns3:char");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns4__ClientExtensionUpdate:
		return soap_in_ns4__ClientExtensionUpdate(soap, NULL, NULL, "ns4:ClientExtensionUpdate");
	case SOAP_TYPE_ns4__NWGameServer:
		return soap_in_ns4__NWGameServer(soap, NULL, NULL, "ns4:NWGameServer");
	case SOAP_TYPE_ns4__ArrayOfNWGameServer:
		return soap_in_ns4__ArrayOfNWGameServer(soap, NULL, NULL, "ns4:ArrayOfNWGameServer");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__IncrementStatisticResponse:
		return soap_in_PointerTo_ns1__IncrementStatisticResponse(soap, NULL, NULL, "ns1:IncrementStatisticResponse");
	case SOAP_TYPE_PointerTo_ns1__IncrementStatistic:
		return soap_in_PointerTo_ns1__IncrementStatistic(soap, NULL, NULL, "ns1:IncrementStatistic");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse:
		return soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(soap, NULL, NULL, "ns1:LookupServerByGameTypeClientExtensionResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtension:
		return soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, NULL, NULL, "ns1:LookupServerByGameTypeClientExtension");
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdateResponse:
		return soap_in_PointerTo_ns1__GetClientExtensionUpdateResponse(soap, NULL, NULL, "ns1:GetClientExtensionUpdateResponse");
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdate:
		return soap_in_PointerTo_ns1__GetClientExtensionUpdate(soap, NULL, NULL, "ns1:GetClientExtensionUpdate");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeResponse:
		return soap_in_PointerTo_ns1__LookupServerByGameTypeResponse(soap, NULL, NULL, "ns1:LookupServerByGameTypeResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameType:
		return soap_in_PointerTo_ns1__LookupServerByGameType(soap, NULL, NULL, "ns1:LookupServerByGameType");
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServersResponse:
		return soap_in_PointerTo_ns1__RegisterPendingServersResponse(soap, NULL, NULL, "ns1:RegisterPendingServersResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServers:
		return soap_in_PointerTo_ns1__RegisterPendingServers(soap, NULL, NULL, "ns1:RegisterPendingServers");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModuleResponse:
		return soap_in_PointerTo_ns1__LookupServerByModuleResponse(soap, NULL, NULL, "ns1:LookupServerByModuleResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModule:
		return soap_in_PointerTo_ns1__LookupServerByModule(soap, NULL, NULL, "ns1:LookupServerByModule");
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductListResponse:
		return soap_in_PointerTo_ns1__GetSupportedProductListResponse(soap, NULL, NULL, "ns1:GetSupportedProductListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductList:
		return soap_in_PointerTo_ns1__GetSupportedProductList(soap, NULL, NULL, "ns1:GetSupportedProductList");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCountResponse:
		return soap_in_PointerTo_ns1__GetOnlineUserCountResponse(soap, NULL, NULL, "ns1:GetOnlineUserCountResponse");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCount:
		return soap_in_PointerTo_ns1__GetOnlineUserCount(soap, NULL, NULL, "ns1:GetOnlineUserCount");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerListResponse:
		return soap_in_PointerTo_ns1__GetOnlineServerListResponse(soap, NULL, NULL, "ns1:GetOnlineServerListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerList:
		return soap_in_PointerTo_ns1__GetOnlineServerList(soap, NULL, NULL, "ns1:GetOnlineServerList");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddressResponse:
		return soap_in_PointerTo_ns1__LookupServerByAddressResponse(soap, NULL, NULL, "ns1:LookupServerByAddressResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddress:
		return soap_in_PointerTo_ns1__LookupServerByAddress(soap, NULL, NULL, "ns1:LookupServerByAddress");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByNameResponse:
		return soap_in_PointerTo_ns1__LookupServerByNameResponse(soap, NULL, NULL, "ns1:LookupServerByNameResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByName:
		return soap_in_PointerTo_ns1__LookupServerByName(soap, NULL, NULL, "ns1:LookupServerByName");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTotime:
		return soap_in_PointerTotime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_PointerToPointerTons4__NWGameServer:
		return soap_in_PointerToPointerTons4__NWGameServer(soap, NULL, NULL, "ns4:NWGameServer");
	case SOAP_TYPE_PointerTons4__ClientExtensionUpdate:
		return soap_in_PointerTons4__ClientExtensionUpdate(soap, NULL, NULL, "ns4:ClientExtensionUpdate");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_in_PointerTons5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_in_PointerTounsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_PointerTons4__NWGameServer:
		return soap_in_PointerTons4__NWGameServer(soap, NULL, NULL, "ns4:NWGameServer");
	case SOAP_TYPE_PointerTons4__ArrayOfNWGameServer:
		return soap_in_PointerTons4__ArrayOfNWGameServer(soap, NULL, NULL, "ns4:ArrayOfNWGameServer");
	case SOAP_TYPE_ns3__guid:
	{	char **s;
		s = soap_in_ns3__guid(soap, NULL, NULL, "ns3:guid");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_ns3__duration:
	{	char **s;
		s = soap_in_ns3__duration(soap, NULL, NULL, "ns3:duration");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__duration:
	{	char **s;
		s = soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__decimal:
	{	char **s;
		s = soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__anyURI:
	{	char **s;
		s = soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__IDREF:
	{	char **s;
		s = soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__ID:
	{	char **s;
		s = soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	*type = SOAP_TYPE_ns3__guid__;
			return soap_in_ns3__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	*type = SOAP_TYPE_ns3__duration__;
			return soap_in_ns3__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char__;
			return soap_in_ns3__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfstring"))
		{	*type = SOAP_TYPE_ns5__ArrayOfstring;
			return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ClientExtensionUpdate"))
		{	*type = SOAP_TYPE_ns4__ClientExtensionUpdate;
			return soap_in_ns4__ClientExtensionUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:NWGameServer"))
		{	*type = SOAP_TYPE_ns4__NWGameServer;
			return soap_in_ns4__NWGameServer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:ArrayOfNWGameServer"))
		{	*type = SOAP_TYPE_ns4__ArrayOfNWGameServer;
			return soap_in_ns4__ArrayOfNWGameServer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:char"))
		{	*type = SOAP_TYPE_ns3__char;
			return soap_in_ns3__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:guid"))
		{	char **s;
			*type = SOAP_TYPE_ns3__guid;
			s = soap_in_ns3__guid(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "ns3:duration"))
		{	char **s;
			*type = SOAP_TYPE_ns3__duration;
			s = soap_in_ns3__duration(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	char **s;
			*type = SOAP_TYPE_xsd__duration;
			s = soap_in_xsd__duration(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	char **s;
			*type = SOAP_TYPE_xsd__decimal;
			s = soap_in_xsd__decimal(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	char **s;
			*type = SOAP_TYPE_xsd__anyURI;
			s = soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	char **s;
			*type = SOAP_TYPE_xsd__IDREF;
			s = soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	char **s;
			*type = SOAP_TYPE_xsd__ID;
			s = soap_in_xsd__ID(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:IncrementStatisticResponse"))
		{	*type = SOAP_TYPE__ns1__IncrementStatisticResponse;
			return soap_in__ns1__IncrementStatisticResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:IncrementStatistic"))
		{	*type = SOAP_TYPE__ns1__IncrementStatistic;
			return soap_in__ns1__IncrementStatistic(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByGameTypeClientExtensionResponse"))
		{	*type = SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse;
			return soap_in__ns1__LookupServerByGameTypeClientExtensionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByGameTypeClientExtension"))
		{	*type = SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension;
			return soap_in__ns1__LookupServerByGameTypeClientExtension(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetClientExtensionUpdateResponse"))
		{	*type = SOAP_TYPE__ns1__GetClientExtensionUpdateResponse;
			return soap_in__ns1__GetClientExtensionUpdateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetClientExtensionUpdate"))
		{	*type = SOAP_TYPE__ns1__GetClientExtensionUpdate;
			return soap_in__ns1__GetClientExtensionUpdate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByGameTypeResponse"))
		{	*type = SOAP_TYPE__ns1__LookupServerByGameTypeResponse;
			return soap_in__ns1__LookupServerByGameTypeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByGameType"))
		{	*type = SOAP_TYPE__ns1__LookupServerByGameType;
			return soap_in__ns1__LookupServerByGameType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterPendingServersResponse"))
		{	*type = SOAP_TYPE__ns1__RegisterPendingServersResponse;
			return soap_in__ns1__RegisterPendingServersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RegisterPendingServers"))
		{	*type = SOAP_TYPE__ns1__RegisterPendingServers;
			return soap_in__ns1__RegisterPendingServers(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByModuleResponse"))
		{	*type = SOAP_TYPE__ns1__LookupServerByModuleResponse;
			return soap_in__ns1__LookupServerByModuleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByModule"))
		{	*type = SOAP_TYPE__ns1__LookupServerByModule;
			return soap_in__ns1__LookupServerByModule(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSupportedProductListResponse"))
		{	*type = SOAP_TYPE__ns1__GetSupportedProductListResponse;
			return soap_in__ns1__GetSupportedProductListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetSupportedProductList"))
		{	*type = SOAP_TYPE__ns1__GetSupportedProductList;
			return soap_in__ns1__GetSupportedProductList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetOnlineUserCountResponse"))
		{	*type = SOAP_TYPE__ns1__GetOnlineUserCountResponse;
			return soap_in__ns1__GetOnlineUserCountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetOnlineUserCount"))
		{	*type = SOAP_TYPE__ns1__GetOnlineUserCount;
			return soap_in__ns1__GetOnlineUserCount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetOnlineServerListResponse"))
		{	*type = SOAP_TYPE__ns1__GetOnlineServerListResponse;
			return soap_in__ns1__GetOnlineServerListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetOnlineServerList"))
		{	*type = SOAP_TYPE__ns1__GetOnlineServerList;
			return soap_in__ns1__GetOnlineServerList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByAddressResponse"))
		{	*type = SOAP_TYPE__ns1__LookupServerByAddressResponse;
			return soap_in__ns1__LookupServerByAddressResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByAddress"))
		{	*type = SOAP_TYPE__ns1__LookupServerByAddress;
			return soap_in__ns1__LookupServerByAddress(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByNameResponse"))
		{	*type = SOAP_TYPE__ns1__LookupServerByNameResponse;
			return soap_in__ns1__LookupServerByNameResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LookupServerByName"))
		{	*type = SOAP_TYPE__ns1__LookupServerByName;
			return soap_in__ns1__LookupServerByName(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns3__char:
		return soap_out_ns3__char(soap, tag, id, (const int *)ptr, "ns3:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns3__guid__:
		return ((ns3__guid__ *)ptr)->soap_out(soap, tag, id, "ns3:guid");
	case SOAP_TYPE_ns3__duration__:
		return ((ns3__duration__ *)ptr)->soap_out(soap, tag, id, "ns3:duration");
	case SOAP_TYPE_ns3__char__:
		return ((ns3__char__ *)ptr)->soap_out(soap, tag, id, "ns3:char");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return ((ns5__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns4__ClientExtensionUpdate:
		return ((ns4__ClientExtensionUpdate *)ptr)->soap_out(soap, tag, id, "ns4:ClientExtensionUpdate");
	case SOAP_TYPE_ns4__NWGameServer:
		return ((ns4__NWGameServer *)ptr)->soap_out(soap, tag, id, "ns4:NWGameServer");
	case SOAP_TYPE_ns4__ArrayOfNWGameServer:
		return ((ns4__ArrayOfNWGameServer *)ptr)->soap_out(soap, tag, id, "ns4:ArrayOfNWGameServer");
	case SOAP_TYPE__ns1__IncrementStatisticResponse:
		return ((_ns1__IncrementStatisticResponse *)ptr)->soap_out(soap, "ns1:IncrementStatisticResponse", id, NULL);
	case SOAP_TYPE__ns1__IncrementStatistic:
		return ((_ns1__IncrementStatistic *)ptr)->soap_out(soap, "ns1:IncrementStatistic", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse:
		return ((_ns1__LookupServerByGameTypeClientExtensionResponse *)ptr)->soap_out(soap, "ns1:LookupServerByGameTypeClientExtensionResponse", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension:
		return ((_ns1__LookupServerByGameTypeClientExtension *)ptr)->soap_out(soap, "ns1:LookupServerByGameTypeClientExtension", id, NULL);
	case SOAP_TYPE__ns1__GetClientExtensionUpdateResponse:
		return ((_ns1__GetClientExtensionUpdateResponse *)ptr)->soap_out(soap, "ns1:GetClientExtensionUpdateResponse", id, NULL);
	case SOAP_TYPE__ns1__GetClientExtensionUpdate:
		return ((_ns1__GetClientExtensionUpdate *)ptr)->soap_out(soap, "ns1:GetClientExtensionUpdate", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByGameTypeResponse:
		return ((_ns1__LookupServerByGameTypeResponse *)ptr)->soap_out(soap, "ns1:LookupServerByGameTypeResponse", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByGameType:
		return ((_ns1__LookupServerByGameType *)ptr)->soap_out(soap, "ns1:LookupServerByGameType", id, NULL);
	case SOAP_TYPE__ns1__RegisterPendingServersResponse:
		return ((_ns1__RegisterPendingServersResponse *)ptr)->soap_out(soap, "ns1:RegisterPendingServersResponse", id, NULL);
	case SOAP_TYPE__ns1__RegisterPendingServers:
		return ((_ns1__RegisterPendingServers *)ptr)->soap_out(soap, "ns1:RegisterPendingServers", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByModuleResponse:
		return ((_ns1__LookupServerByModuleResponse *)ptr)->soap_out(soap, "ns1:LookupServerByModuleResponse", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByModule:
		return ((_ns1__LookupServerByModule *)ptr)->soap_out(soap, "ns1:LookupServerByModule", id, NULL);
	case SOAP_TYPE__ns1__GetSupportedProductListResponse:
		return ((_ns1__GetSupportedProductListResponse *)ptr)->soap_out(soap, "ns1:GetSupportedProductListResponse", id, NULL);
	case SOAP_TYPE__ns1__GetSupportedProductList:
		return ((_ns1__GetSupportedProductList *)ptr)->soap_out(soap, "ns1:GetSupportedProductList", id, NULL);
	case SOAP_TYPE__ns1__GetOnlineUserCountResponse:
		return ((_ns1__GetOnlineUserCountResponse *)ptr)->soap_out(soap, "ns1:GetOnlineUserCountResponse", id, NULL);
	case SOAP_TYPE__ns1__GetOnlineUserCount:
		return ((_ns1__GetOnlineUserCount *)ptr)->soap_out(soap, "ns1:GetOnlineUserCount", id, NULL);
	case SOAP_TYPE__ns1__GetOnlineServerListResponse:
		return ((_ns1__GetOnlineServerListResponse *)ptr)->soap_out(soap, "ns1:GetOnlineServerListResponse", id, NULL);
	case SOAP_TYPE__ns1__GetOnlineServerList:
		return ((_ns1__GetOnlineServerList *)ptr)->soap_out(soap, "ns1:GetOnlineServerList", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByAddressResponse:
		return ((_ns1__LookupServerByAddressResponse *)ptr)->soap_out(soap, "ns1:LookupServerByAddressResponse", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByAddress:
		return ((_ns1__LookupServerByAddress *)ptr)->soap_out(soap, "ns1:LookupServerByAddress", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByNameResponse:
		return ((_ns1__LookupServerByNameResponse *)ptr)->soap_out(soap, "ns1:LookupServerByNameResponse", id, NULL);
	case SOAP_TYPE__ns1__LookupServerByName:
		return ((_ns1__LookupServerByName *)ptr)->soap_out(soap, "ns1:LookupServerByName", id, NULL);
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return ((xsd__QName *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns1__IncrementStatisticResponse:
		return soap_out_PointerTo_ns1__IncrementStatisticResponse(soap, tag, id, (_ns1__IncrementStatisticResponse *const*)ptr, "ns1:IncrementStatisticResponse");
	case SOAP_TYPE_PointerTo_ns1__IncrementStatistic:
		return soap_out_PointerTo_ns1__IncrementStatistic(soap, tag, id, (_ns1__IncrementStatistic *const*)ptr, "ns1:IncrementStatistic");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse:
		return soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag, id, (_ns1__LookupServerByGameTypeClientExtensionResponse *const*)ptr, "ns1:LookupServerByGameTypeClientExtensionResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtension:
		return soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, tag, id, (_ns1__LookupServerByGameTypeClientExtension *const*)ptr, "ns1:LookupServerByGameTypeClientExtension");
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdateResponse:
		return soap_out_PointerTo_ns1__GetClientExtensionUpdateResponse(soap, tag, id, (_ns1__GetClientExtensionUpdateResponse *const*)ptr, "ns1:GetClientExtensionUpdateResponse");
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdate:
		return soap_out_PointerTo_ns1__GetClientExtensionUpdate(soap, tag, id, (_ns1__GetClientExtensionUpdate *const*)ptr, "ns1:GetClientExtensionUpdate");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeResponse:
		return soap_out_PointerTo_ns1__LookupServerByGameTypeResponse(soap, tag, id, (_ns1__LookupServerByGameTypeResponse *const*)ptr, "ns1:LookupServerByGameTypeResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameType:
		return soap_out_PointerTo_ns1__LookupServerByGameType(soap, tag, id, (_ns1__LookupServerByGameType *const*)ptr, "ns1:LookupServerByGameType");
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServersResponse:
		return soap_out_PointerTo_ns1__RegisterPendingServersResponse(soap, tag, id, (_ns1__RegisterPendingServersResponse *const*)ptr, "ns1:RegisterPendingServersResponse");
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServers:
		return soap_out_PointerTo_ns1__RegisterPendingServers(soap, tag, id, (_ns1__RegisterPendingServers *const*)ptr, "ns1:RegisterPendingServers");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModuleResponse:
		return soap_out_PointerTo_ns1__LookupServerByModuleResponse(soap, tag, id, (_ns1__LookupServerByModuleResponse *const*)ptr, "ns1:LookupServerByModuleResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModule:
		return soap_out_PointerTo_ns1__LookupServerByModule(soap, tag, id, (_ns1__LookupServerByModule *const*)ptr, "ns1:LookupServerByModule");
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductListResponse:
		return soap_out_PointerTo_ns1__GetSupportedProductListResponse(soap, tag, id, (_ns1__GetSupportedProductListResponse *const*)ptr, "ns1:GetSupportedProductListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductList:
		return soap_out_PointerTo_ns1__GetSupportedProductList(soap, tag, id, (_ns1__GetSupportedProductList *const*)ptr, "ns1:GetSupportedProductList");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCountResponse:
		return soap_out_PointerTo_ns1__GetOnlineUserCountResponse(soap, tag, id, (_ns1__GetOnlineUserCountResponse *const*)ptr, "ns1:GetOnlineUserCountResponse");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCount:
		return soap_out_PointerTo_ns1__GetOnlineUserCount(soap, tag, id, (_ns1__GetOnlineUserCount *const*)ptr, "ns1:GetOnlineUserCount");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerListResponse:
		return soap_out_PointerTo_ns1__GetOnlineServerListResponse(soap, tag, id, (_ns1__GetOnlineServerListResponse *const*)ptr, "ns1:GetOnlineServerListResponse");
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerList:
		return soap_out_PointerTo_ns1__GetOnlineServerList(soap, tag, id, (_ns1__GetOnlineServerList *const*)ptr, "ns1:GetOnlineServerList");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddressResponse:
		return soap_out_PointerTo_ns1__LookupServerByAddressResponse(soap, tag, id, (_ns1__LookupServerByAddressResponse *const*)ptr, "ns1:LookupServerByAddressResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddress:
		return soap_out_PointerTo_ns1__LookupServerByAddress(soap, tag, id, (_ns1__LookupServerByAddress *const*)ptr, "ns1:LookupServerByAddress");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByNameResponse:
		return soap_out_PointerTo_ns1__LookupServerByNameResponse(soap, tag, id, (_ns1__LookupServerByNameResponse *const*)ptr, "ns1:LookupServerByNameResponse");
	case SOAP_TYPE_PointerTo_ns1__LookupServerByName:
		return soap_out_PointerTo_ns1__LookupServerByName(soap, tag, id, (_ns1__LookupServerByName *const*)ptr, "ns1:LookupServerByName");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTotime:
		return soap_out_PointerTotime(soap, tag, id, (time_t *const*)ptr, "xsd:dateTime");
	case SOAP_TYPE_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_PointerToPointerTons4__NWGameServer:
		return soap_out_PointerToPointerTons4__NWGameServer(soap, tag, id, (ns4__NWGameServer **const*)ptr, "ns4:NWGameServer");
	case SOAP_TYPE_PointerTons4__ClientExtensionUpdate:
		return soap_out_PointerTons4__ClientExtensionUpdate(soap, tag, id, (ns4__ClientExtensionUpdate *const*)ptr, "ns4:ClientExtensionUpdate");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_out_PointerTons5__ArrayOfstring(soap, tag, id, (ns5__ArrayOfstring *const*)ptr, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTounsignedInt:
		return soap_out_PointerTounsignedInt(soap, tag, id, (unsigned int *const*)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_PointerTons4__NWGameServer:
		return soap_out_PointerTons4__NWGameServer(soap, tag, id, (ns4__NWGameServer *const*)ptr, "ns4:NWGameServer");
	case SOAP_TYPE_PointerTons4__ArrayOfNWGameServer:
		return soap_out_PointerTons4__ArrayOfNWGameServer(soap, tag, id, (ns4__ArrayOfNWGameServer *const*)ptr, "ns4:ArrayOfNWGameServer");
	case SOAP_TYPE_ns3__guid:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "ns3:guid");
	case SOAP_TYPE_ns3__duration:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "ns3:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:duration");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:ID");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns3__guid__:
		((ns3__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__duration__:
		((ns3__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns3__char__:
		((ns3__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		((ns5__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ClientExtensionUpdate:
		((ns4__ClientExtensionUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__NWGameServer:
		((ns4__NWGameServer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__ArrayOfNWGameServer:
		((ns4__ArrayOfNWGameServer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IncrementStatisticResponse:
		((_ns1__IncrementStatisticResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__IncrementStatistic:
		((_ns1__IncrementStatistic *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse:
		((_ns1__LookupServerByGameTypeClientExtensionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension:
		((_ns1__LookupServerByGameTypeClientExtension *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetClientExtensionUpdateResponse:
		((_ns1__GetClientExtensionUpdateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetClientExtensionUpdate:
		((_ns1__GetClientExtensionUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeResponse:
		((_ns1__LookupServerByGameTypeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameType:
		((_ns1__LookupServerByGameType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RegisterPendingServersResponse:
		((_ns1__RegisterPendingServersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RegisterPendingServers:
		((_ns1__RegisterPendingServers *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByModuleResponse:
		((_ns1__LookupServerByModuleResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByModule:
		((_ns1__LookupServerByModule *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSupportedProductListResponse:
		((_ns1__GetSupportedProductListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetSupportedProductList:
		((_ns1__GetSupportedProductList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetOnlineUserCountResponse:
		((_ns1__GetOnlineUserCountResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetOnlineUserCount:
		((_ns1__GetOnlineUserCount *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetOnlineServerListResponse:
		((_ns1__GetOnlineServerListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetOnlineServerList:
		((_ns1__GetOnlineServerList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByAddressResponse:
		((_ns1__LookupServerByAddressResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByAddress:
		((_ns1__LookupServerByAddress *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByNameResponse:
		((_ns1__LookupServerByNameResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LookupServerByName:
		((_ns1__LookupServerByName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__QName:
		((xsd__QName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns6__IncrementStatistic_:
		soap_serialize___ns6__IncrementStatistic_(soap, (const struct __ns6__IncrementStatistic_ *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension_:
		soap_serialize___ns6__LookupServerByGameTypeClientExtension_(soap, (const struct __ns6__LookupServerByGameTypeClientExtension_ *)ptr);
		break;
	case SOAP_TYPE___ns6__GetClientExtensionUpdate_:
		soap_serialize___ns6__GetClientExtensionUpdate_(soap, (const struct __ns6__GetClientExtensionUpdate_ *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameType_:
		soap_serialize___ns6__LookupServerByGameType_(soap, (const struct __ns6__LookupServerByGameType_ *)ptr);
		break;
	case SOAP_TYPE___ns6__RegisterPendingServers_:
		soap_serialize___ns6__RegisterPendingServers_(soap, (const struct __ns6__RegisterPendingServers_ *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByModule_:
		soap_serialize___ns6__LookupServerByModule_(soap, (const struct __ns6__LookupServerByModule_ *)ptr);
		break;
	case SOAP_TYPE___ns6__GetSupportedProductList_:
		soap_serialize___ns6__GetSupportedProductList_(soap, (const struct __ns6__GetSupportedProductList_ *)ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineUserCount_:
		soap_serialize___ns6__GetOnlineUserCount_(soap, (const struct __ns6__GetOnlineUserCount_ *)ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineServerList_:
		soap_serialize___ns6__GetOnlineServerList_(soap, (const struct __ns6__GetOnlineServerList_ *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByAddress_:
		soap_serialize___ns6__LookupServerByAddress_(soap, (const struct __ns6__LookupServerByAddress_ *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByName_:
		soap_serialize___ns6__LookupServerByName_(soap, (const struct __ns6__LookupServerByName_ *)ptr);
		break;
	case SOAP_TYPE___ns6__IncrementStatistic:
		soap_serialize___ns6__IncrementStatistic(soap, (const struct __ns6__IncrementStatistic *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension:
		soap_serialize___ns6__LookupServerByGameTypeClientExtension(soap, (const struct __ns6__LookupServerByGameTypeClientExtension *)ptr);
		break;
	case SOAP_TYPE___ns6__GetClientExtensionUpdate:
		soap_serialize___ns6__GetClientExtensionUpdate(soap, (const struct __ns6__GetClientExtensionUpdate *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameType:
		soap_serialize___ns6__LookupServerByGameType(soap, (const struct __ns6__LookupServerByGameType *)ptr);
		break;
	case SOAP_TYPE___ns6__RegisterPendingServers:
		soap_serialize___ns6__RegisterPendingServers(soap, (const struct __ns6__RegisterPendingServers *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByModule:
		soap_serialize___ns6__LookupServerByModule(soap, (const struct __ns6__LookupServerByModule *)ptr);
		break;
	case SOAP_TYPE___ns6__GetSupportedProductList:
		soap_serialize___ns6__GetSupportedProductList(soap, (const struct __ns6__GetSupportedProductList *)ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineUserCount:
		soap_serialize___ns6__GetOnlineUserCount(soap, (const struct __ns6__GetOnlineUserCount *)ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineServerList:
		soap_serialize___ns6__GetOnlineServerList(soap, (const struct __ns6__GetOnlineServerList *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByAddress:
		soap_serialize___ns6__LookupServerByAddress(soap, (const struct __ns6__LookupServerByAddress *)ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByName:
		soap_serialize___ns6__LookupServerByName(soap, (const struct __ns6__LookupServerByName *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__IncrementStatisticResponse:
		soap_serialize_PointerTo_ns1__IncrementStatisticResponse(soap, (_ns1__IncrementStatisticResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__IncrementStatistic:
		soap_serialize_PointerTo_ns1__IncrementStatistic(soap, (_ns1__IncrementStatistic *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse:
		soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(soap, (_ns1__LookupServerByGameTypeClientExtensionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtension:
		soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, (_ns1__LookupServerByGameTypeClientExtension *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdateResponse:
		soap_serialize_PointerTo_ns1__GetClientExtensionUpdateResponse(soap, (_ns1__GetClientExtensionUpdateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdate:
		soap_serialize_PointerTo_ns1__GetClientExtensionUpdate(soap, (_ns1__GetClientExtensionUpdate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeResponse:
		soap_serialize_PointerTo_ns1__LookupServerByGameTypeResponse(soap, (_ns1__LookupServerByGameTypeResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByGameType:
		soap_serialize_PointerTo_ns1__LookupServerByGameType(soap, (_ns1__LookupServerByGameType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServersResponse:
		soap_serialize_PointerTo_ns1__RegisterPendingServersResponse(soap, (_ns1__RegisterPendingServersResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RegisterPendingServers:
		soap_serialize_PointerTo_ns1__RegisterPendingServers(soap, (_ns1__RegisterPendingServers *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModuleResponse:
		soap_serialize_PointerTo_ns1__LookupServerByModuleResponse(soap, (_ns1__LookupServerByModuleResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByModule:
		soap_serialize_PointerTo_ns1__LookupServerByModule(soap, (_ns1__LookupServerByModule *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductListResponse:
		soap_serialize_PointerTo_ns1__GetSupportedProductListResponse(soap, (_ns1__GetSupportedProductListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetSupportedProductList:
		soap_serialize_PointerTo_ns1__GetSupportedProductList(soap, (_ns1__GetSupportedProductList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCountResponse:
		soap_serialize_PointerTo_ns1__GetOnlineUserCountResponse(soap, (_ns1__GetOnlineUserCountResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetOnlineUserCount:
		soap_serialize_PointerTo_ns1__GetOnlineUserCount(soap, (_ns1__GetOnlineUserCount *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerListResponse:
		soap_serialize_PointerTo_ns1__GetOnlineServerListResponse(soap, (_ns1__GetOnlineServerListResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetOnlineServerList:
		soap_serialize_PointerTo_ns1__GetOnlineServerList(soap, (_ns1__GetOnlineServerList *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddressResponse:
		soap_serialize_PointerTo_ns1__LookupServerByAddressResponse(soap, (_ns1__LookupServerByAddressResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByAddress:
		soap_serialize_PointerTo_ns1__LookupServerByAddress(soap, (_ns1__LookupServerByAddress *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByNameResponse:
		soap_serialize_PointerTo_ns1__LookupServerByNameResponse(soap, (_ns1__LookupServerByNameResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LookupServerByName:
		soap_serialize_PointerTo_ns1__LookupServerByName(soap, (_ns1__LookupServerByName *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerTotime:
		soap_serialize_PointerTotime(soap, (time_t *const*)ptr);
		break;
	case SOAP_TYPE_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons4__NWGameServer:
		soap_serialize_PointerToPointerTons4__NWGameServer(soap, (ns4__NWGameServer **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ClientExtensionUpdate:
		soap_serialize_PointerTons4__ClientExtensionUpdate(soap, (ns4__ClientExtensionUpdate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		soap_serialize_PointerTons5__ArrayOfstring(soap, (ns5__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedInt:
		soap_serialize_PointerTounsignedInt(soap, (unsigned int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__NWGameServer:
		soap_serialize_PointerTons4__NWGameServer(soap, (ns4__NWGameServer *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons4__ArrayOfNWGameServer:
		soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, (ns4__ArrayOfNWGameServer *const*)ptr);
		break;
	case SOAP_TYPE_ns3__guid:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_ns3__duration:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__char__:
		return (void*)soap_instantiate_ns3__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__duration__:
		return (void*)soap_instantiate_ns3__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns3__guid__:
		return (void*)soap_instantiate_ns3__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByName:
		return (void*)soap_instantiate__ns1__LookupServerByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByNameResponse:
		return (void*)soap_instantiate__ns1__LookupServerByNameResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByAddress:
		return (void*)soap_instantiate__ns1__LookupServerByAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByAddressResponse:
		return (void*)soap_instantiate__ns1__LookupServerByAddressResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetOnlineServerList:
		return (void*)soap_instantiate__ns1__GetOnlineServerList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetOnlineServerListResponse:
		return (void*)soap_instantiate__ns1__GetOnlineServerListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetOnlineUserCount:
		return (void*)soap_instantiate__ns1__GetOnlineUserCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetOnlineUserCountResponse:
		return (void*)soap_instantiate__ns1__GetOnlineUserCountResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSupportedProductList:
		return (void*)soap_instantiate__ns1__GetSupportedProductList(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetSupportedProductListResponse:
		return (void*)soap_instantiate__ns1__GetSupportedProductListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByModule:
		return (void*)soap_instantiate__ns1__LookupServerByModule(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByModuleResponse:
		return (void*)soap_instantiate__ns1__LookupServerByModuleResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RegisterPendingServers:
		return (void*)soap_instantiate__ns1__RegisterPendingServers(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RegisterPendingServersResponse:
		return (void*)soap_instantiate__ns1__RegisterPendingServersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByGameType:
		return (void*)soap_instantiate__ns1__LookupServerByGameType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByGameTypeResponse:
		return (void*)soap_instantiate__ns1__LookupServerByGameTypeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetClientExtensionUpdate:
		return (void*)soap_instantiate__ns1__GetClientExtensionUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetClientExtensionUpdateResponse:
		return (void*)soap_instantiate__ns1__GetClientExtensionUpdateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension:
		return (void*)soap_instantiate__ns1__LookupServerByGameTypeClientExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse:
		return (void*)soap_instantiate__ns1__LookupServerByGameTypeClientExtensionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IncrementStatistic:
		return (void*)soap_instantiate__ns1__IncrementStatistic(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__IncrementStatisticResponse:
		return (void*)soap_instantiate__ns1__IncrementStatisticResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ArrayOfNWGameServer:
		return (void*)soap_instantiate_ns4__ArrayOfNWGameServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__NWGameServer:
		return (void*)soap_instantiate_ns4__NWGameServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__ClientExtensionUpdate:
		return (void*)soap_instantiate_ns4__ClientExtensionUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfstring:
		return (void*)soap_instantiate_ns5__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByName:
		return (void*)soap_instantiate___ns6__LookupServerByName(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByAddress:
		return (void*)soap_instantiate___ns6__LookupServerByAddress(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetOnlineServerList:
		return (void*)soap_instantiate___ns6__GetOnlineServerList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetOnlineUserCount:
		return (void*)soap_instantiate___ns6__GetOnlineUserCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetSupportedProductList:
		return (void*)soap_instantiate___ns6__GetSupportedProductList(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByModule:
		return (void*)soap_instantiate___ns6__LookupServerByModule(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__RegisterPendingServers:
		return (void*)soap_instantiate___ns6__RegisterPendingServers(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByGameType:
		return (void*)soap_instantiate___ns6__LookupServerByGameType(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetClientExtensionUpdate:
		return (void*)soap_instantiate___ns6__GetClientExtensionUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension:
		return (void*)soap_instantiate___ns6__LookupServerByGameTypeClientExtension(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__IncrementStatistic:
		return (void*)soap_instantiate___ns6__IncrementStatistic(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByName_:
		return (void*)soap_instantiate___ns6__LookupServerByName_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByAddress_:
		return (void*)soap_instantiate___ns6__LookupServerByAddress_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetOnlineServerList_:
		return (void*)soap_instantiate___ns6__GetOnlineServerList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetOnlineUserCount_:
		return (void*)soap_instantiate___ns6__GetOnlineUserCount_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetSupportedProductList_:
		return (void*)soap_instantiate___ns6__GetSupportedProductList_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByModule_:
		return (void*)soap_instantiate___ns6__LookupServerByModule_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__RegisterPendingServers_:
		return (void*)soap_instantiate___ns6__RegisterPendingServers_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByGameType_:
		return (void*)soap_instantiate___ns6__LookupServerByGameType_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__GetClientExtensionUpdate_:
		return (void*)soap_instantiate___ns6__GetClientExtensionUpdate_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension_:
		return (void*)soap_instantiate___ns6__LookupServerByGameTypeClientExtension_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns6__IncrementStatistic_:
		return (void*)soap_instantiate___ns6__IncrementStatistic_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyType*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			SOAP_DELETE((xsd__ID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__ID_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		if (p->size < 0)
			SOAP_DELETE((xsd__IDREF_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__IDREF_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE((xsd__QName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__QName*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyURI_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyURI_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE((xsd__boolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__boolean*)p->ptr);
		break;
	case SOAP_TYPE_xsd__byte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__byte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__byte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE((xsd__dateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__dateTime*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			SOAP_DELETE((xsd__decimal_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__decimal_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__double:
		if (p->size < 0)
			SOAP_DELETE((xsd__double*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__double*)p->ptr);
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE((xsd__duration_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__duration_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__float:
		if (p->size < 0)
			SOAP_DELETE((xsd__float*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__float*)p->ptr);
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE((xsd__int*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__int*)p->ptr);
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE((xsd__long*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__long*)p->ptr);
		break;
	case SOAP_TYPE_xsd__short:
		if (p->size < 0)
			SOAP_DELETE((xsd__short*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__short*)p->ptr);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((xsd__string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedByte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedByte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedInt*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedLong*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedLong*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedShort*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedShort*)p->ptr);
		break;
	case SOAP_TYPE_ns3__char__:
		if (p->size < 0)
			SOAP_DELETE((ns3__char__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__char__*)p->ptr);
		break;
	case SOAP_TYPE_ns3__duration__:
		if (p->size < 0)
			SOAP_DELETE((ns3__duration__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__duration__*)p->ptr);
		break;
	case SOAP_TYPE_ns3__guid__:
		if (p->size < 0)
			SOAP_DELETE((ns3__guid__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns3__guid__*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByName:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByName*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByNameResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByNameResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByNameResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByAddress:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByAddress*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByAddress*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByAddressResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByAddressResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByAddressResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetOnlineServerList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetOnlineServerList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetOnlineServerList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetOnlineServerListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetOnlineServerListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetOnlineServerListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetOnlineUserCount:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetOnlineUserCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetOnlineUserCount*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetOnlineUserCountResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetOnlineUserCountResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetOnlineUserCountResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSupportedProductList:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSupportedProductList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSupportedProductList*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetSupportedProductListResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetSupportedProductListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetSupportedProductListResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByModule:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByModule*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByModule*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByModuleResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByModuleResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByModuleResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__RegisterPendingServers:
		if (p->size < 0)
			SOAP_DELETE((_ns1__RegisterPendingServers*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__RegisterPendingServers*)p->ptr);
		break;
	case SOAP_TYPE__ns1__RegisterPendingServersResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__RegisterPendingServersResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__RegisterPendingServersResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameType:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByGameType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByGameType*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByGameTypeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByGameTypeResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetClientExtensionUpdate:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetClientExtensionUpdate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetClientExtensionUpdate*)p->ptr);
		break;
	case SOAP_TYPE__ns1__GetClientExtensionUpdateResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__GetClientExtensionUpdateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__GetClientExtensionUpdateResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByGameTypeClientExtension*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByGameTypeClientExtension*)p->ptr);
		break;
	case SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__LookupServerByGameTypeClientExtensionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__LookupServerByGameTypeClientExtensionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IncrementStatistic:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IncrementStatistic*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IncrementStatistic*)p->ptr);
		break;
	case SOAP_TYPE__ns1__IncrementStatisticResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__IncrementStatisticResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__IncrementStatisticResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns4__ArrayOfNWGameServer:
		if (p->size < 0)
			SOAP_DELETE((ns4__ArrayOfNWGameServer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__ArrayOfNWGameServer*)p->ptr);
		break;
	case SOAP_TYPE_ns4__NWGameServer:
		if (p->size < 0)
			SOAP_DELETE((ns4__NWGameServer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__NWGameServer*)p->ptr);
		break;
	case SOAP_TYPE_ns4__ClientExtensionUpdate:
		if (p->size < 0)
			SOAP_DELETE((ns4__ClientExtensionUpdate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__ClientExtensionUpdate*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfstring*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByName:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByName*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByAddress:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByAddress*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByAddress*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineServerList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetOnlineServerList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetOnlineServerList*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineUserCount:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetOnlineUserCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetOnlineUserCount*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetSupportedProductList:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetSupportedProductList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetSupportedProductList*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByModule:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByModule*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByModule*)p->ptr);
		break;
	case SOAP_TYPE___ns6__RegisterPendingServers:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__RegisterPendingServers*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__RegisterPendingServers*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameType:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByGameType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByGameType*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetClientExtensionUpdate:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetClientExtensionUpdate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetClientExtensionUpdate*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByGameTypeClientExtension*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByGameTypeClientExtension*)p->ptr);
		break;
	case SOAP_TYPE___ns6__IncrementStatistic:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__IncrementStatistic*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__IncrementStatistic*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByName_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByName_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByName_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByAddress_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByAddress_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByAddress_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineServerList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetOnlineServerList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetOnlineServerList_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetOnlineUserCount_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetOnlineUserCount_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetOnlineUserCount_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetSupportedProductList_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetSupportedProductList_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetSupportedProductList_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByModule_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByModule_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByModule_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__RegisterPendingServers_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__RegisterPendingServers_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__RegisterPendingServers_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameType_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByGameType_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByGameType_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__GetClientExtensionUpdate_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__GetClientExtensionUpdate_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__GetClientExtensionUpdate_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__LookupServerByGameTypeClientExtension_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__LookupServerByGameTypeClientExtension_*)p->ptr);
		break;
	case SOAP_TYPE___ns6__IncrementStatistic_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns6__IncrementStatistic_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns6__IncrementStatistic_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns3__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ns3__char);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__char);
	if (soap_out_ns3__char(soap, tag?tag:"ns3:char", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns3__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__guid(soap, &this->ns3__guid__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns3__guid(soap, &this->ns3__guid__::__item);
	/* transient soap skipped */
}

int ns3__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap *soap, const char *tag, int id, const ns3__guid__ *a, const char *type)
{
	return soap_out_ns3__guid(soap, tag, id, &(a->ns3__guid__::__item), "ns3:guid");
}

void *ns3__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap *soap, const char *tag, ns3__guid__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__guid__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__guid__, sizeof(ns3__guid__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__guid__)
			return (ns3__guid__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__guid(soap, tag, &(a->ns3__guid__::__item), "ns3:guid"))
		return NULL;
	return a;
}

int ns3__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__guid__);
	if (this->soap_out(soap, tag?tag:"ns3:guid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap *soap, ns3__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__guid__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__guid__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__guid__);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns3__guid__);
		((ns3__guid__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__guid__, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__guid__);
		for (int i = 0; i < n; i++)
			((ns3__guid__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__guid__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__guid__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__guid__ %p -> %p\n", q, p));
	*(ns3__guid__*)p = *(ns3__guid__*)q;
}

void ns3__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__duration(soap, &this->ns3__duration__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns3__duration(soap, &this->ns3__duration__::__item);
	/* transient soap skipped */
}

int ns3__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap *soap, const char *tag, int id, const ns3__duration__ *a, const char *type)
{
	return soap_out_ns3__duration(soap, tag, id, &(a->ns3__duration__::__item), "ns3:duration");
}

void *ns3__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap *soap, const char *tag, ns3__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__duration__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__duration__, sizeof(ns3__duration__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__duration__)
			return (ns3__duration__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__duration(soap, tag, &(a->ns3__duration__::__item), "ns3:duration"))
		return NULL;
	return a;
}

int ns3__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__duration__);
	if (this->soap_out(soap, tag?tag:"ns3:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap *soap, ns3__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__duration__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__duration__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__duration__);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns3__duration__);
		((ns3__duration__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__duration__, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__duration__);
		for (int i = 0; i < n; i++)
			((ns3__duration__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__duration__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__duration__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__duration__ %p -> %p\n", q, p));
	*(ns3__duration__*)p = *(ns3__duration__*)q;
}

void ns3__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns3__char(soap, &this->ns3__char__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns3__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns3__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns3__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap *soap, const char *tag, int id, const ns3__char__ *a, const char *type)
{
	return soap_out_ns3__char(soap, tag, id, &(a->ns3__char__::__item), "ns3:char");
}

void *ns3__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns3__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap *soap, const char *tag, ns3__char__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns3__char__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns3__char__, sizeof(ns3__char__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns3__char__)
			return (ns3__char__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns3__char(soap, tag, &(a->ns3__char__::__item), "ns3:char"))
		return NULL;
	return a;
}

int ns3__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns3__char__);
	if (this->soap_out(soap, tag?tag:"ns3:char", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns3__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns3__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap *soap, ns3__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns3__char__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns3__char__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns3__char__);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns3__char__);
		((ns3__char__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__char__, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns3__char__);
		for (int i = 0; i < n; i++)
			((ns3__char__*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns3__char__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__char__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns3__char__ %p -> %p\n", q, p));
	*(ns3__char__*)p = *(ns3__char__*)q;
}

void ns5__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__ArrayOfstring::__sizestring = 0;
	this->ns5__ArrayOfstring::string = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns5__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns5__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < this->ns5__ArrayOfstring::__sizestring; i++)
		{
			soap_serialize_string(soap, this->ns5__ArrayOfstring::string + i);
		}
	}
	/* transient soap skipped */
}

int ns5__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfstring(struct soap *soap, const char *tag, int id, const ns5__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfstring), "ns5:ArrayOfstring"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns5__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < a->ns5__ArrayOfstring::__sizestring; i++)
			if (soap_out_string(soap, "ns5:string", -1, a->ns5__ArrayOfstring::string + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_in_ns5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns5:string", 1, NULL))
			{	if (a->ns5__ArrayOfstring::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->ns5__ArrayOfstring::string = (char **)soap_push_block(soap, soap_blist_string1, sizeof(char *));
					if (a->ns5__ArrayOfstring::string == NULL)
						return NULL;
					*a->ns5__ArrayOfstring::string = NULL;
				}
				soap_revert(soap);
				if (soap_in_string(soap, "ns5:string", a->ns5__ArrayOfstring::string, "xsd:string"))
				{	a->ns5__ArrayOfstring::__sizestring++;
					a->ns5__ArrayOfstring::string = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns5__ArrayOfstring::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->ns5__ArrayOfstring::__sizestring)
			a->ns5__ArrayOfstring::string = (char **)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->ns5__ArrayOfstring::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfstring, 0, sizeof(ns5__ArrayOfstring), 0, soap_copy_ns5__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_get_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns5__ArrayOfstring);
		((ns5__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfstring, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns5__ArrayOfstring);
		for (int i = 0; i < n; i++)
			((ns5__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns5__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfstring %p -> %p\n", q, p));
	*(ns5__ArrayOfstring*)p = *(ns5__ArrayOfstring*)q;
}

void ns4__ClientExtensionUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns4__ClientExtensionUpdate::InfoUrl);
	soap_default_string(soap, &this->ns4__ClientExtensionUpdate::MOTD);
	soap_default_string(soap, &this->ns4__ClientExtensionUpdate::UpdateDescription);
	soap_default_string(soap, &this->ns4__ClientExtensionUpdate::UpdateUrl);
	soap_default_string(soap, &this->ns4__ClientExtensionUpdate::UpdateVersion);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__ClientExtensionUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns4__ClientExtensionUpdate::InfoUrl);
	soap_serialize_string(soap, &this->ns4__ClientExtensionUpdate::MOTD);
	soap_serialize_string(soap, &this->ns4__ClientExtensionUpdate::UpdateDescription);
	soap_serialize_string(soap, &this->ns4__ClientExtensionUpdate::UpdateUrl);
	soap_serialize_string(soap, &this->ns4__ClientExtensionUpdate::UpdateVersion);
	/* transient soap skipped */
}

int ns4__ClientExtensionUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ClientExtensionUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ClientExtensionUpdate(struct soap *soap, const char *tag, int id, const ns4__ClientExtensionUpdate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ClientExtensionUpdate), "ns4:ClientExtensionUpdate"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_string(soap, "ns4:InfoUrl", -1, &(a->ns4__ClientExtensionUpdate::InfoUrl), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:MOTD", -1, &(a->ns4__ClientExtensionUpdate::MOTD), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:UpdateDescription", -1, &(a->ns4__ClientExtensionUpdate::UpdateDescription), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:UpdateUrl", -1, &(a->ns4__ClientExtensionUpdate::UpdateUrl), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:UpdateVersion", -1, &(a->ns4__ClientExtensionUpdate::UpdateVersion), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__ClientExtensionUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ClientExtensionUpdate(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ClientExtensionUpdate * SOAP_FMAC4 soap_in_ns4__ClientExtensionUpdate(struct soap *soap, const char *tag, ns4__ClientExtensionUpdate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ClientExtensionUpdate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ClientExtensionUpdate, sizeof(ns4__ClientExtensionUpdate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ClientExtensionUpdate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ClientExtensionUpdate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_InfoUrl1 = 1;
	size_t soap_flag_MOTD1 = 1;
	size_t soap_flag_UpdateDescription1 = 1;
	size_t soap_flag_UpdateUrl1 = 1;
	size_t soap_flag_UpdateVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_InfoUrl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:InfoUrl", &(a->ns4__ClientExtensionUpdate::InfoUrl), "xsd:string"))
				{	soap_flag_InfoUrl1--;
					continue;
				}
			if (soap_flag_MOTD1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:MOTD", &(a->ns4__ClientExtensionUpdate::MOTD), "xsd:string"))
				{	soap_flag_MOTD1--;
					continue;
				}
			if (soap_flag_UpdateDescription1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:UpdateDescription", &(a->ns4__ClientExtensionUpdate::UpdateDescription), "xsd:string"))
				{	soap_flag_UpdateDescription1--;
					continue;
				}
			if (soap_flag_UpdateUrl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:UpdateUrl", &(a->ns4__ClientExtensionUpdate::UpdateUrl), "xsd:string"))
				{	soap_flag_UpdateUrl1--;
					continue;
				}
			if (soap_flag_UpdateVersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:UpdateVersion", &(a->ns4__ClientExtensionUpdate::UpdateVersion), "xsd:string"))
				{	soap_flag_UpdateVersion1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ClientExtensionUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ClientExtensionUpdate, 0, sizeof(ns4__ClientExtensionUpdate), 0, soap_copy_ns4__ClientExtensionUpdate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ClientExtensionUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__ClientExtensionUpdate);
	if (this->soap_out(soap, tag?tag:"ns4:ClientExtensionUpdate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ClientExtensionUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ClientExtensionUpdate(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ClientExtensionUpdate * SOAP_FMAC4 soap_get_ns4__ClientExtensionUpdate(struct soap *soap, ns4__ClientExtensionUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ClientExtensionUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ClientExtensionUpdate * SOAP_FMAC2 soap_instantiate_ns4__ClientExtensionUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ClientExtensionUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ClientExtensionUpdate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__ClientExtensionUpdate);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns4__ClientExtensionUpdate);
		((ns4__ClientExtensionUpdate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__ClientExtensionUpdate, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__ClientExtensionUpdate);
		for (int i = 0; i < n; i++)
			((ns4__ClientExtensionUpdate*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__ClientExtensionUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ClientExtensionUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ClientExtensionUpdate %p -> %p\n", q, p));
	*(ns4__ClientExtensionUpdate*)p = *(ns4__ClientExtensionUpdate*)q;
}

void ns4__NWGameServer::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns4__NWGameServer::ActivePlayerCount = NULL;
	this->ns4__NWGameServer::BuildNumber = NULL;
	this->ns4__NWGameServer::ELCEnforced = NULL;
	this->ns4__NWGameServer::ExpansionsMask = NULL;
	this->ns4__NWGameServer::GameType = NULL;
	this->ns4__NWGameServer::ILREnforced = NULL;
	this->ns4__NWGameServer::LastHeartbeat = NULL;
	this->ns4__NWGameServer::LocalVault = NULL;
	this->ns4__NWGameServer::MaximumLevel = NULL;
	this->ns4__NWGameServer::MaximumPlayerCount = NULL;
	this->ns4__NWGameServer::MinimumLevel = NULL;
	soap_default_string(soap, &this->ns4__NWGameServer::ModuleDescription);
	soap_default_string(soap, &this->ns4__NWGameServer::ModuleName);
	soap_default_string(soap, &this->ns4__NWGameServer::ModuleUrl);
	this->ns4__NWGameServer::OnePartyOnly = NULL;
	this->ns4__NWGameServer::Online = NULL;
	this->ns4__NWGameServer::PVPLevel = NULL;
	soap_default_string(soap, &this->ns4__NWGameServer::PWCUrl);
	this->ns4__NWGameServer::PlayerPause = NULL;
	this->ns4__NWGameServer::PrivateServer = NULL;
	soap_default_string(soap, &this->ns4__NWGameServer::Product);
	soap_default_string(soap, &this->ns4__NWGameServer::ServerAddress);
	soap_default_string(soap, &this->ns4__NWGameServer::ServerDescription);
	soap_default_string(soap, &this->ns4__NWGameServer::ServerName);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__NWGameServer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::ActivePlayerCount);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::BuildNumber);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::ELCEnforced);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::ExpansionsMask);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::GameType);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::ILREnforced);
	soap_serialize_PointerTotime(soap, &this->ns4__NWGameServer::LastHeartbeat);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::LocalVault);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::MaximumLevel);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::MaximumPlayerCount);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::MinimumLevel);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ModuleDescription);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ModuleName);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ModuleUrl);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::OnePartyOnly);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::Online);
	soap_serialize_PointerTounsignedInt(soap, &this->ns4__NWGameServer::PVPLevel);
	soap_serialize_string(soap, &this->ns4__NWGameServer::PWCUrl);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::PlayerPause);
	soap_serialize_PointerTobool(soap, &this->ns4__NWGameServer::PrivateServer);
	soap_serialize_string(soap, &this->ns4__NWGameServer::Product);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ServerAddress);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ServerDescription);
	soap_serialize_string(soap, &this->ns4__NWGameServer::ServerName);
	/* transient soap skipped */
}

int ns4__NWGameServer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__NWGameServer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NWGameServer(struct soap *soap, const char *tag, int id, const ns4__NWGameServer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__NWGameServer), "ns4:NWGameServer"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTounsignedInt(soap, "ns4:ActivePlayerCount", -1, &(a->ns4__NWGameServer::ActivePlayerCount), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:BuildNumber", -1, &(a->ns4__NWGameServer::BuildNumber), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:ELCEnforced", -1, &(a->ns4__NWGameServer::ELCEnforced), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:ExpansionsMask", -1, &(a->ns4__NWGameServer::ExpansionsMask), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:GameType", -1, &(a->ns4__NWGameServer::GameType), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:ILREnforced", -1, &(a->ns4__NWGameServer::ILREnforced), ""))
		return soap->error;
	if (soap_out_PointerTotime(soap, "ns4:LastHeartbeat", -1, &(a->ns4__NWGameServer::LastHeartbeat), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:LocalVault", -1, &(a->ns4__NWGameServer::LocalVault), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:MaximumLevel", -1, &(a->ns4__NWGameServer::MaximumLevel), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:MaximumPlayerCount", -1, &(a->ns4__NWGameServer::MaximumPlayerCount), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:MinimumLevel", -1, &(a->ns4__NWGameServer::MinimumLevel), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ModuleDescription", -1, &(a->ns4__NWGameServer::ModuleDescription), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ModuleName", -1, &(a->ns4__NWGameServer::ModuleName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ModuleUrl", -1, &(a->ns4__NWGameServer::ModuleUrl), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:OnePartyOnly", -1, &(a->ns4__NWGameServer::OnePartyOnly), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:Online", -1, &(a->ns4__NWGameServer::Online), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns4:PVPLevel", -1, &(a->ns4__NWGameServer::PVPLevel), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:PWCUrl", -1, &(a->ns4__NWGameServer::PWCUrl), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:PlayerPause", -1, &(a->ns4__NWGameServer::PlayerPause), ""))
		return soap->error;
	if (soap_out_PointerTobool(soap, "ns4:PrivateServer", -1, &(a->ns4__NWGameServer::PrivateServer), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:Product", -1, &(a->ns4__NWGameServer::Product), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ServerAddress", -1, &(a->ns4__NWGameServer::ServerAddress), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ServerDescription", -1, &(a->ns4__NWGameServer::ServerDescription), ""))
		return soap->error;
	if (soap_out_string(soap, "ns4:ServerName", -1, &(a->ns4__NWGameServer::ServerName), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns4__NWGameServer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__NWGameServer(soap, tag, this, type);
}

SOAP_FMAC3 ns4__NWGameServer * SOAP_FMAC4 soap_in_ns4__NWGameServer(struct soap *soap, const char *tag, ns4__NWGameServer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__NWGameServer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__NWGameServer, sizeof(ns4__NWGameServer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__NWGameServer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__NWGameServer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_ActivePlayerCount1 = 1;
	size_t soap_flag_BuildNumber1 = 1;
	size_t soap_flag_ELCEnforced1 = 1;
	size_t soap_flag_ExpansionsMask1 = 1;
	size_t soap_flag_GameType1 = 1;
	size_t soap_flag_ILREnforced1 = 1;
	size_t soap_flag_LastHeartbeat1 = 1;
	size_t soap_flag_LocalVault1 = 1;
	size_t soap_flag_MaximumLevel1 = 1;
	size_t soap_flag_MaximumPlayerCount1 = 1;
	size_t soap_flag_MinimumLevel1 = 1;
	size_t soap_flag_ModuleDescription1 = 1;
	size_t soap_flag_ModuleName1 = 1;
	size_t soap_flag_ModuleUrl1 = 1;
	size_t soap_flag_OnePartyOnly1 = 1;
	size_t soap_flag_Online1 = 1;
	size_t soap_flag_PVPLevel1 = 1;
	size_t soap_flag_PWCUrl1 = 1;
	size_t soap_flag_PlayerPause1 = 1;
	size_t soap_flag_PrivateServer1 = 1;
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_ServerAddress1 = 1;
	size_t soap_flag_ServerDescription1 = 1;
	size_t soap_flag_ServerName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_ActivePlayerCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:ActivePlayerCount", &(a->ns4__NWGameServer::ActivePlayerCount), "xsd:unsignedInt"))
				{	soap_flag_ActivePlayerCount1--;
					continue;
				}
			if (soap_flag_BuildNumber1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:BuildNumber", &(a->ns4__NWGameServer::BuildNumber), "xsd:unsignedInt"))
				{	soap_flag_BuildNumber1--;
					continue;
				}
			if (soap_flag_ELCEnforced1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:ELCEnforced", &(a->ns4__NWGameServer::ELCEnforced), "xsd:boolean"))
				{	soap_flag_ELCEnforced1--;
					continue;
				}
			if (soap_flag_ExpansionsMask1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:ExpansionsMask", &(a->ns4__NWGameServer::ExpansionsMask), "xsd:unsignedInt"))
				{	soap_flag_ExpansionsMask1--;
					continue;
				}
			if (soap_flag_GameType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:GameType", &(a->ns4__NWGameServer::GameType), "xsd:unsignedInt"))
				{	soap_flag_GameType1--;
					continue;
				}
			if (soap_flag_ILREnforced1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:ILREnforced", &(a->ns4__NWGameServer::ILREnforced), "xsd:boolean"))
				{	soap_flag_ILREnforced1--;
					continue;
				}
			if (soap_flag_LastHeartbeat1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTotime(soap, "ns4:LastHeartbeat", &(a->ns4__NWGameServer::LastHeartbeat), "xsd:dateTime"))
				{	soap_flag_LastHeartbeat1--;
					continue;
				}
			if (soap_flag_LocalVault1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:LocalVault", &(a->ns4__NWGameServer::LocalVault), "xsd:boolean"))
				{	soap_flag_LocalVault1--;
					continue;
				}
			if (soap_flag_MaximumLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:MaximumLevel", &(a->ns4__NWGameServer::MaximumLevel), "xsd:unsignedInt"))
				{	soap_flag_MaximumLevel1--;
					continue;
				}
			if (soap_flag_MaximumPlayerCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:MaximumPlayerCount", &(a->ns4__NWGameServer::MaximumPlayerCount), "xsd:unsignedInt"))
				{	soap_flag_MaximumPlayerCount1--;
					continue;
				}
			if (soap_flag_MinimumLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:MinimumLevel", &(a->ns4__NWGameServer::MinimumLevel), "xsd:unsignedInt"))
				{	soap_flag_MinimumLevel1--;
					continue;
				}
			if (soap_flag_ModuleDescription1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ModuleDescription", &(a->ns4__NWGameServer::ModuleDescription), "xsd:string"))
				{	soap_flag_ModuleDescription1--;
					continue;
				}
			if (soap_flag_ModuleName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ModuleName", &(a->ns4__NWGameServer::ModuleName), "xsd:string"))
				{	soap_flag_ModuleName1--;
					continue;
				}
			if (soap_flag_ModuleUrl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ModuleUrl", &(a->ns4__NWGameServer::ModuleUrl), "xsd:string"))
				{	soap_flag_ModuleUrl1--;
					continue;
				}
			if (soap_flag_OnePartyOnly1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:OnePartyOnly", &(a->ns4__NWGameServer::OnePartyOnly), "xsd:boolean"))
				{	soap_flag_OnePartyOnly1--;
					continue;
				}
			if (soap_flag_Online1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:Online", &(a->ns4__NWGameServer::Online), "xsd:boolean"))
				{	soap_flag_Online1--;
					continue;
				}
			if (soap_flag_PVPLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns4:PVPLevel", &(a->ns4__NWGameServer::PVPLevel), "xsd:unsignedInt"))
				{	soap_flag_PVPLevel1--;
					continue;
				}
			if (soap_flag_PWCUrl1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:PWCUrl", &(a->ns4__NWGameServer::PWCUrl), "xsd:string"))
				{	soap_flag_PWCUrl1--;
					continue;
				}
			if (soap_flag_PlayerPause1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:PlayerPause", &(a->ns4__NWGameServer::PlayerPause), "xsd:boolean"))
				{	soap_flag_PlayerPause1--;
					continue;
				}
			if (soap_flag_PrivateServer1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTobool(soap, "ns4:PrivateServer", &(a->ns4__NWGameServer::PrivateServer), "xsd:boolean"))
				{	soap_flag_PrivateServer1--;
					continue;
				}
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:Product", &(a->ns4__NWGameServer::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_ServerAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ServerAddress", &(a->ns4__NWGameServer::ServerAddress), "xsd:string"))
				{	soap_flag_ServerAddress1--;
					continue;
				}
			if (soap_flag_ServerDescription1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ServerDescription", &(a->ns4__NWGameServer::ServerDescription), "xsd:string"))
				{	soap_flag_ServerDescription1--;
					continue;
				}
			if (soap_flag_ServerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns4:ServerName", &(a->ns4__NWGameServer::ServerName), "xsd:string"))
				{	soap_flag_ServerName1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__NWGameServer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__NWGameServer, 0, sizeof(ns4__NWGameServer), 0, soap_copy_ns4__NWGameServer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__NWGameServer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__NWGameServer);
	if (this->soap_out(soap, tag?tag:"ns4:NWGameServer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__NWGameServer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__NWGameServer(soap, this, tag, type);
}

SOAP_FMAC3 ns4__NWGameServer * SOAP_FMAC4 soap_get_ns4__NWGameServer(struct soap *soap, ns4__NWGameServer *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__NWGameServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__NWGameServer * SOAP_FMAC2 soap_instantiate_ns4__NWGameServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__NWGameServer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__NWGameServer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__NWGameServer);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns4__NWGameServer);
		((ns4__NWGameServer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__NWGameServer, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__NWGameServer);
		for (int i = 0; i < n; i++)
			((ns4__NWGameServer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__NWGameServer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__NWGameServer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__NWGameServer %p -> %p\n", q, p));
	*(ns4__NWGameServer*)p = *(ns4__NWGameServer*)q;
}

void ns4__ArrayOfNWGameServer::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns4__ArrayOfNWGameServer::__sizeNWGameServer = 0;
	this->ns4__ArrayOfNWGameServer::NWGameServer = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__ArrayOfNWGameServer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns4__ArrayOfNWGameServer::NWGameServer)
	{	int i;
		for (i = 0; i < this->ns4__ArrayOfNWGameServer::__sizeNWGameServer; i++)
		{
			soap_serialize_PointerTons4__NWGameServer(soap, this->ns4__ArrayOfNWGameServer::NWGameServer + i);
		}
	}
	/* transient soap skipped */
}

int ns4__ArrayOfNWGameServer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__ArrayOfNWGameServer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfNWGameServer(struct soap *soap, const char *tag, int id, const ns4__ArrayOfNWGameServer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns4__ArrayOfNWGameServer), "ns4:ArrayOfNWGameServer"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns4__ArrayOfNWGameServer::NWGameServer)
	{	int i;
		for (i = 0; i < a->ns4__ArrayOfNWGameServer::__sizeNWGameServer; i++)
			if (soap_out_PointerTons4__NWGameServer(soap, "ns4:NWGameServer", -1, a->ns4__ArrayOfNWGameServer::NWGameServer + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns4__ArrayOfNWGameServer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__ArrayOfNWGameServer(soap, tag, this, type);
}

SOAP_FMAC3 ns4__ArrayOfNWGameServer * SOAP_FMAC4 soap_in_ns4__ArrayOfNWGameServer(struct soap *soap, const char *tag, ns4__ArrayOfNWGameServer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns4__ArrayOfNWGameServer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__ArrayOfNWGameServer, sizeof(ns4__ArrayOfNWGameServer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__ArrayOfNWGameServer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns4__ArrayOfNWGameServer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_NWGameServer1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns4:NWGameServer", 1, NULL))
			{	if (a->ns4__ArrayOfNWGameServer::NWGameServer == NULL)
				{	if (soap_blist_NWGameServer1 == NULL)
						soap_blist_NWGameServer1 = soap_new_block(soap);
					a->ns4__ArrayOfNWGameServer::NWGameServer = (ns4__NWGameServer **)soap_push_block(soap, soap_blist_NWGameServer1, sizeof(ns4__NWGameServer *));
					if (a->ns4__ArrayOfNWGameServer::NWGameServer == NULL)
						return NULL;
					*a->ns4__ArrayOfNWGameServer::NWGameServer = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons4__NWGameServer(soap, "ns4:NWGameServer", a->ns4__ArrayOfNWGameServer::NWGameServer, "ns4:NWGameServer"))
				{	a->ns4__ArrayOfNWGameServer::__sizeNWGameServer++;
					a->ns4__ArrayOfNWGameServer::NWGameServer = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns4__ArrayOfNWGameServer::NWGameServer)
			soap_pop_block(soap, soap_blist_NWGameServer1);
		if (a->ns4__ArrayOfNWGameServer::__sizeNWGameServer)
			a->ns4__ArrayOfNWGameServer::NWGameServer = (ns4__NWGameServer **)soap_save_block(soap, soap_blist_NWGameServer1, NULL, 1);
		else
		{	a->ns4__ArrayOfNWGameServer::NWGameServer = NULL;
			if (soap_blist_NWGameServer1)
				soap_end_block(soap, soap_blist_NWGameServer1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns4__ArrayOfNWGameServer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns4__ArrayOfNWGameServer, 0, sizeof(ns4__ArrayOfNWGameServer), 0, soap_copy_ns4__ArrayOfNWGameServer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns4__ArrayOfNWGameServer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__ArrayOfNWGameServer);
	if (this->soap_out(soap, tag?tag:"ns4:ArrayOfNWGameServer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__ArrayOfNWGameServer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__ArrayOfNWGameServer(soap, this, tag, type);
}

SOAP_FMAC3 ns4__ArrayOfNWGameServer * SOAP_FMAC4 soap_get_ns4__ArrayOfNWGameServer(struct soap *soap, ns4__ArrayOfNWGameServer *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__ArrayOfNWGameServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__ArrayOfNWGameServer * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfNWGameServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__ArrayOfNWGameServer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__ArrayOfNWGameServer, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__ArrayOfNWGameServer);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(ns4__ArrayOfNWGameServer);
		((ns4__ArrayOfNWGameServer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__ArrayOfNWGameServer, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__ArrayOfNWGameServer);
		for (int i = 0; i < n; i++)
			((ns4__ArrayOfNWGameServer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__ArrayOfNWGameServer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfNWGameServer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__ArrayOfNWGameServer %p -> %p\n", q, p));
	*(ns4__ArrayOfNWGameServer*)p = *(ns4__ArrayOfNWGameServer*)q;
}

void _ns1__IncrementStatisticResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__IncrementStatisticResponse::IncrementStatisticResult = NULL;
	/* transient soap skipped */
}

void _ns1__IncrementStatisticResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__IncrementStatisticResponse::IncrementStatisticResult);
	/* transient soap skipped */
}

int _ns1__IncrementStatisticResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IncrementStatisticResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IncrementStatisticResponse(struct soap *soap, const char *tag, int id, const _ns1__IncrementStatisticResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IncrementStatisticResponse), type))
		return soap->error;
	if (a->IncrementStatisticResult)
		soap_element_result(soap, "ns1:IncrementStatisticResult");
	if (soap_out_PointerTounsignedInt(soap, "ns1:IncrementStatisticResult", -1, &(a->_ns1__IncrementStatisticResponse::IncrementStatisticResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IncrementStatisticResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IncrementStatisticResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IncrementStatisticResponse * SOAP_FMAC4 soap_in__ns1__IncrementStatisticResponse(struct soap *soap, const char *tag, _ns1__IncrementStatisticResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IncrementStatisticResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IncrementStatisticResponse, sizeof(_ns1__IncrementStatisticResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IncrementStatisticResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IncrementStatisticResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_IncrementStatisticResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IncrementStatisticResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:IncrementStatisticResult", &(a->_ns1__IncrementStatisticResponse::IncrementStatisticResult), "xsd:unsignedInt"))
				{	soap_flag_IncrementStatisticResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:IncrementStatisticResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IncrementStatisticResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IncrementStatisticResponse, 0, sizeof(_ns1__IncrementStatisticResponse), 0, soap_copy__ns1__IncrementStatisticResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__IncrementStatisticResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__IncrementStatisticResponse);
	if (this->soap_out(soap, tag?tag:"ns1:IncrementStatisticResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IncrementStatisticResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IncrementStatisticResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IncrementStatisticResponse * SOAP_FMAC4 soap_get__ns1__IncrementStatisticResponse(struct soap *soap, _ns1__IncrementStatisticResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IncrementStatisticResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IncrementStatisticResponse * SOAP_FMAC2 soap_instantiate__ns1__IncrementStatisticResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IncrementStatisticResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IncrementStatisticResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IncrementStatisticResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__IncrementStatisticResponse);
		((_ns1__IncrementStatisticResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IncrementStatisticResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__IncrementStatisticResponse);
		for (int i = 0; i < n; i++)
			((_ns1__IncrementStatisticResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__IncrementStatisticResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IncrementStatisticResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IncrementStatisticResponse %p -> %p\n", q, p));
	*(_ns1__IncrementStatisticResponse*)p = *(_ns1__IncrementStatisticResponse*)q;
}

void _ns1__IncrementStatistic::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__IncrementStatistic::Product);
	soap_default_string(soap, &this->_ns1__IncrementStatistic::Statistic);
	/* transient soap skipped */
}

void _ns1__IncrementStatistic::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__IncrementStatistic::Product);
	soap_serialize_string(soap, &this->_ns1__IncrementStatistic::Statistic);
	/* transient soap skipped */
}

int _ns1__IncrementStatistic::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__IncrementStatistic(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IncrementStatistic(struct soap *soap, const char *tag, int id, const _ns1__IncrementStatistic *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__IncrementStatistic), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__IncrementStatistic::Product), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Statistic", -1, &(a->_ns1__IncrementStatistic::Statistic), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__IncrementStatistic::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__IncrementStatistic(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__IncrementStatistic * SOAP_FMAC4 soap_in__ns1__IncrementStatistic(struct soap *soap, const char *tag, _ns1__IncrementStatistic *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__IncrementStatistic *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__IncrementStatistic, sizeof(_ns1__IncrementStatistic), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__IncrementStatistic)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__IncrementStatistic *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_Statistic1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__IncrementStatistic::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_Statistic1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Statistic", &(a->_ns1__IncrementStatistic::Statistic), "xsd:string"))
				{	soap_flag_Statistic1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__IncrementStatistic *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__IncrementStatistic, 0, sizeof(_ns1__IncrementStatistic), 0, soap_copy__ns1__IncrementStatistic);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__IncrementStatistic::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__IncrementStatistic);
	if (this->soap_out(soap, tag?tag:"ns1:IncrementStatistic", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__IncrementStatistic::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__IncrementStatistic(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__IncrementStatistic * SOAP_FMAC4 soap_get__ns1__IncrementStatistic(struct soap *soap, _ns1__IncrementStatistic *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__IncrementStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__IncrementStatistic * SOAP_FMAC2 soap_instantiate__ns1__IncrementStatistic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__IncrementStatistic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__IncrementStatistic, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__IncrementStatistic);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__IncrementStatistic);
		((_ns1__IncrementStatistic*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__IncrementStatistic, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__IncrementStatistic);
		for (int i = 0; i < n; i++)
			((_ns1__IncrementStatistic*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__IncrementStatistic*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__IncrementStatistic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__IncrementStatistic %p -> %p\n", q, p));
	*(_ns1__IncrementStatistic*)p = *(_ns1__IncrementStatistic*)q;
}

void _ns1__LookupServerByGameTypeClientExtensionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LookupServerByGameTypeClientExtensionResponse::LookupServerByGameTypeClientExtensionResult = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByGameTypeClientExtensionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, &this->_ns1__LookupServerByGameTypeClientExtensionResponse::LookupServerByGameTypeClientExtensionResult);
	/* transient soap skipped */
}

int _ns1__LookupServerByGameTypeClientExtensionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByGameTypeClientExtensionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse), type))
		return soap->error;
	if (a->LookupServerByGameTypeClientExtensionResult)
		soap_element_result(soap, "ns1:LookupServerByGameTypeClientExtensionResult");
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByGameTypeClientExtensionResult", -1, &(a->_ns1__LookupServerByGameTypeClientExtensionResponse::LookupServerByGameTypeClientExtensionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByGameTypeClientExtensionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtensionResponse * SOAP_FMAC4 soap_in__ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeClientExtensionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByGameTypeClientExtensionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse, sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByGameTypeClientExtensionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LookupServerByGameTypeClientExtensionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LookupServerByGameTypeClientExtensionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByGameTypeClientExtensionResult", &(a->_ns1__LookupServerByGameTypeClientExtensionResponse::LookupServerByGameTypeClientExtensionResult), "ns4:ArrayOfNWGameServer"))
				{	soap_flag_LookupServerByGameTypeClientExtensionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LookupServerByGameTypeClientExtensionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByGameTypeClientExtensionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse, 0, sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse), 0, soap_copy__ns1__LookupServerByGameTypeClientExtensionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByGameTypeClientExtensionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByGameTypeClientExtensionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByGameTypeClientExtensionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByGameTypeClientExtensionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtensionResponse * SOAP_FMAC4 soap_get__ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, _ns1__LookupServerByGameTypeClientExtensionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByGameTypeClientExtensionResponse * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByGameTypeClientExtensionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByGameTypeClientExtensionResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse);
		((_ns1__LookupServerByGameTypeClientExtensionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByGameTypeClientExtensionResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByGameTypeClientExtensionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByGameTypeClientExtensionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByGameTypeClientExtensionResponse %p -> %p\n", q, p));
	*(_ns1__LookupServerByGameTypeClientExtensionResponse*)p = *(_ns1__LookupServerByGameTypeClientExtensionResponse*)q;
}

void _ns1__LookupServerByGameTypeClientExtension::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LookupServerByGameTypeClientExtension::Product);
	this->_ns1__LookupServerByGameTypeClientExtension::GameType = NULL;
	this->_ns1__LookupServerByGameTypeClientExtension::ClientExtensionVersion = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByGameTypeClientExtension::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LookupServerByGameTypeClientExtension::Product);
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__LookupServerByGameTypeClientExtension::GameType);
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__LookupServerByGameTypeClientExtension::ClientExtensionVersion);
	/* transient soap skipped */
}

int _ns1__LookupServerByGameTypeClientExtension::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByGameTypeClientExtension(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByGameTypeClientExtension *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__LookupServerByGameTypeClientExtension::Product), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:GameType", -1, &(a->_ns1__LookupServerByGameTypeClientExtension::GameType), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:ClientExtensionVersion", -1, &(a->_ns1__LookupServerByGameTypeClientExtension::ClientExtensionVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByGameTypeClientExtension::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByGameTypeClientExtension(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtension * SOAP_FMAC4 soap_in__ns1__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeClientExtension *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByGameTypeClientExtension *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension, sizeof(_ns1__LookupServerByGameTypeClientExtension), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByGameTypeClientExtension *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_GameType1 = 1;
	size_t soap_flag_ClientExtensionVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__LookupServerByGameTypeClientExtension::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_GameType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:GameType", &(a->_ns1__LookupServerByGameTypeClientExtension::GameType), "xsd:unsignedInt"))
				{	soap_flag_GameType1--;
					continue;
				}
			if (soap_flag_ClientExtensionVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:ClientExtensionVersion", &(a->_ns1__LookupServerByGameTypeClientExtension::ClientExtensionVersion), "xsd:unsignedInt"))
				{	soap_flag_ClientExtensionVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByGameTypeClientExtension *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension, 0, sizeof(_ns1__LookupServerByGameTypeClientExtension), 0, soap_copy__ns1__LookupServerByGameTypeClientExtension);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByGameTypeClientExtension::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByGameTypeClientExtension", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByGameTypeClientExtension::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByGameTypeClientExtension(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtension * SOAP_FMAC4 soap_get__ns1__LookupServerByGameTypeClientExtension(struct soap *soap, _ns1__LookupServerByGameTypeClientExtension *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByGameTypeClientExtension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByGameTypeClientExtension * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByGameTypeClientExtension(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByGameTypeClientExtension(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByGameTypeClientExtension);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByGameTypeClientExtension);
		((_ns1__LookupServerByGameTypeClientExtension*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByGameTypeClientExtension, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByGameTypeClientExtension);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByGameTypeClientExtension*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByGameTypeClientExtension*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByGameTypeClientExtension(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByGameTypeClientExtension %p -> %p\n", q, p));
	*(_ns1__LookupServerByGameTypeClientExtension*)p = *(_ns1__LookupServerByGameTypeClientExtension*)q;
}

void _ns1__GetClientExtensionUpdateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetClientExtensionUpdateResponse::GetClientExtensionUpdateResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetClientExtensionUpdateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ClientExtensionUpdate(soap, &this->_ns1__GetClientExtensionUpdateResponse::GetClientExtensionUpdateResult);
	/* transient soap skipped */
}

int _ns1__GetClientExtensionUpdateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetClientExtensionUpdateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetClientExtensionUpdateResponse(struct soap *soap, const char *tag, int id, const _ns1__GetClientExtensionUpdateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse), type))
		return soap->error;
	if (a->GetClientExtensionUpdateResult)
		soap_element_result(soap, "ns1:GetClientExtensionUpdateResult");
	if (soap_out_PointerTons4__ClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdateResult", -1, &(a->_ns1__GetClientExtensionUpdateResponse::GetClientExtensionUpdateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetClientExtensionUpdateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetClientExtensionUpdateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdateResponse * SOAP_FMAC4 soap_in__ns1__GetClientExtensionUpdateResponse(struct soap *soap, const char *tag, _ns1__GetClientExtensionUpdateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetClientExtensionUpdateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse, sizeof(_ns1__GetClientExtensionUpdateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetClientExtensionUpdateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetClientExtensionUpdateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetClientExtensionUpdateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetClientExtensionUpdateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdateResult", &(a->_ns1__GetClientExtensionUpdateResponse::GetClientExtensionUpdateResult), "ns4:ClientExtensionUpdate"))
				{	soap_flag_GetClientExtensionUpdateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetClientExtensionUpdateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetClientExtensionUpdateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse, 0, sizeof(_ns1__GetClientExtensionUpdateResponse), 0, soap_copy__ns1__GetClientExtensionUpdateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetClientExtensionUpdateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetClientExtensionUpdateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetClientExtensionUpdateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetClientExtensionUpdateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdateResponse * SOAP_FMAC4 soap_get__ns1__GetClientExtensionUpdateResponse(struct soap *soap, _ns1__GetClientExtensionUpdateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetClientExtensionUpdateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetClientExtensionUpdateResponse * SOAP_FMAC2 soap_instantiate__ns1__GetClientExtensionUpdateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetClientExtensionUpdateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetClientExtensionUpdateResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetClientExtensionUpdateResponse);
		((_ns1__GetClientExtensionUpdateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetClientExtensionUpdateResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetClientExtensionUpdateResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetClientExtensionUpdateResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetClientExtensionUpdateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetClientExtensionUpdateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetClientExtensionUpdateResponse %p -> %p\n", q, p));
	*(_ns1__GetClientExtensionUpdateResponse*)p = *(_ns1__GetClientExtensionUpdateResponse*)q;
}

void _ns1__GetClientExtensionUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetClientExtensionUpdate::Product);
	this->_ns1__GetClientExtensionUpdate::ClientExtensionVersion = NULL;
	/* transient soap skipped */
}

void _ns1__GetClientExtensionUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetClientExtensionUpdate::Product);
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__GetClientExtensionUpdate::ClientExtensionVersion);
	/* transient soap skipped */
}

int _ns1__GetClientExtensionUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetClientExtensionUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetClientExtensionUpdate(struct soap *soap, const char *tag, int id, const _ns1__GetClientExtensionUpdate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetClientExtensionUpdate), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__GetClientExtensionUpdate::Product), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:ClientExtensionVersion", -1, &(a->_ns1__GetClientExtensionUpdate::ClientExtensionVersion), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetClientExtensionUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetClientExtensionUpdate(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdate * SOAP_FMAC4 soap_in__ns1__GetClientExtensionUpdate(struct soap *soap, const char *tag, _ns1__GetClientExtensionUpdate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetClientExtensionUpdate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetClientExtensionUpdate, sizeof(_ns1__GetClientExtensionUpdate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetClientExtensionUpdate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetClientExtensionUpdate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_ClientExtensionVersion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__GetClientExtensionUpdate::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_ClientExtensionVersion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:ClientExtensionVersion", &(a->_ns1__GetClientExtensionUpdate::ClientExtensionVersion), "xsd:unsignedInt"))
				{	soap_flag_ClientExtensionVersion1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetClientExtensionUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetClientExtensionUpdate, 0, sizeof(_ns1__GetClientExtensionUpdate), 0, soap_copy__ns1__GetClientExtensionUpdate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetClientExtensionUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetClientExtensionUpdate);
	if (this->soap_out(soap, tag?tag:"ns1:GetClientExtensionUpdate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetClientExtensionUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetClientExtensionUpdate(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdate * SOAP_FMAC4 soap_get__ns1__GetClientExtensionUpdate(struct soap *soap, _ns1__GetClientExtensionUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetClientExtensionUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetClientExtensionUpdate * SOAP_FMAC2 soap_instantiate__ns1__GetClientExtensionUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetClientExtensionUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetClientExtensionUpdate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetClientExtensionUpdate);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetClientExtensionUpdate);
		((_ns1__GetClientExtensionUpdate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetClientExtensionUpdate, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetClientExtensionUpdate);
		for (int i = 0; i < n; i++)
			((_ns1__GetClientExtensionUpdate*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetClientExtensionUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetClientExtensionUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetClientExtensionUpdate %p -> %p\n", q, p));
	*(_ns1__GetClientExtensionUpdate*)p = *(_ns1__GetClientExtensionUpdate*)q;
}

void _ns1__LookupServerByGameTypeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LookupServerByGameTypeResponse::LookupServerByGameTypeResult = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByGameTypeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, &this->_ns1__LookupServerByGameTypeResponse::LookupServerByGameTypeResult);
	/* transient soap skipped */
}

int _ns1__LookupServerByGameTypeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByGameTypeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByGameTypeResponse(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByGameTypeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByGameTypeResponse), type))
		return soap->error;
	if (a->LookupServerByGameTypeResult)
		soap_element_result(soap, "ns1:LookupServerByGameTypeResult");
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByGameTypeResult", -1, &(a->_ns1__LookupServerByGameTypeResponse::LookupServerByGameTypeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByGameTypeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByGameTypeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeResponse * SOAP_FMAC4 soap_in__ns1__LookupServerByGameTypeResponse(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByGameTypeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByGameTypeResponse, sizeof(_ns1__LookupServerByGameTypeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByGameTypeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByGameTypeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LookupServerByGameTypeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LookupServerByGameTypeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByGameTypeResult", &(a->_ns1__LookupServerByGameTypeResponse::LookupServerByGameTypeResult), "ns4:ArrayOfNWGameServer"))
				{	soap_flag_LookupServerByGameTypeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LookupServerByGameTypeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByGameTypeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByGameTypeResponse, 0, sizeof(_ns1__LookupServerByGameTypeResponse), 0, soap_copy__ns1__LookupServerByGameTypeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByGameTypeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByGameTypeResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByGameTypeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByGameTypeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByGameTypeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeResponse * SOAP_FMAC4 soap_get__ns1__LookupServerByGameTypeResponse(struct soap *soap, _ns1__LookupServerByGameTypeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByGameTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByGameTypeResponse * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByGameTypeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByGameTypeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByGameTypeResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByGameTypeResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByGameTypeResponse);
		((_ns1__LookupServerByGameTypeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByGameTypeResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByGameTypeResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByGameTypeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByGameTypeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByGameTypeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByGameTypeResponse %p -> %p\n", q, p));
	*(_ns1__LookupServerByGameTypeResponse*)p = *(_ns1__LookupServerByGameTypeResponse*)q;
}

void _ns1__LookupServerByGameType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LookupServerByGameType::Product);
	this->_ns1__LookupServerByGameType::GameType = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByGameType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LookupServerByGameType::Product);
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__LookupServerByGameType::GameType);
	/* transient soap skipped */
}

int _ns1__LookupServerByGameType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByGameType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByGameType(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByGameType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByGameType), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__LookupServerByGameType::Product), ""))
		return soap->error;
	if (soap_out_PointerTounsignedInt(soap, "ns1:GameType", -1, &(a->_ns1__LookupServerByGameType::GameType), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByGameType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByGameType(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameType * SOAP_FMAC4 soap_in__ns1__LookupServerByGameType(struct soap *soap, const char *tag, _ns1__LookupServerByGameType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByGameType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByGameType, sizeof(_ns1__LookupServerByGameType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByGameType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByGameType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_GameType1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__LookupServerByGameType::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_GameType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:GameType", &(a->_ns1__LookupServerByGameType::GameType), "xsd:unsignedInt"))
				{	soap_flag_GameType1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByGameType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByGameType, 0, sizeof(_ns1__LookupServerByGameType), 0, soap_copy__ns1__LookupServerByGameType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByGameType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByGameType);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByGameType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByGameType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByGameType(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameType * SOAP_FMAC4 soap_get__ns1__LookupServerByGameType(struct soap *soap, _ns1__LookupServerByGameType *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByGameType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByGameType * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByGameType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByGameType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByGameType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByGameType);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByGameType);
		((_ns1__LookupServerByGameType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByGameType, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByGameType);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByGameType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByGameType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByGameType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByGameType %p -> %p\n", q, p));
	*(_ns1__LookupServerByGameType*)p = *(_ns1__LookupServerByGameType*)q;
}

void _ns1__RegisterPendingServersResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__RegisterPendingServersResponse::RegisterPendingServersResult = NULL;
	/* transient soap skipped */
}

void _ns1__RegisterPendingServersResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__RegisterPendingServersResponse::RegisterPendingServersResult);
	/* transient soap skipped */
}

int _ns1__RegisterPendingServersResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RegisterPendingServersResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterPendingServersResponse(struct soap *soap, const char *tag, int id, const _ns1__RegisterPendingServersResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RegisterPendingServersResponse), type))
		return soap->error;
	if (a->RegisterPendingServersResult)
		soap_element_result(soap, "ns1:RegisterPendingServersResult");
	if (soap_out_PointerTounsignedInt(soap, "ns1:RegisterPendingServersResult", -1, &(a->_ns1__RegisterPendingServersResponse::RegisterPendingServersResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RegisterPendingServersResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RegisterPendingServersResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServersResponse * SOAP_FMAC4 soap_in__ns1__RegisterPendingServersResponse(struct soap *soap, const char *tag, _ns1__RegisterPendingServersResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RegisterPendingServersResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RegisterPendingServersResponse, sizeof(_ns1__RegisterPendingServersResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RegisterPendingServersResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RegisterPendingServersResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RegisterPendingServersResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RegisterPendingServersResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:RegisterPendingServersResult", &(a->_ns1__RegisterPendingServersResponse::RegisterPendingServersResult), "xsd:unsignedInt"))
				{	soap_flag_RegisterPendingServersResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:RegisterPendingServersResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RegisterPendingServersResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RegisterPendingServersResponse, 0, sizeof(_ns1__RegisterPendingServersResponse), 0, soap_copy__ns1__RegisterPendingServersResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__RegisterPendingServersResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RegisterPendingServersResponse);
	if (this->soap_out(soap, tag?tag:"ns1:RegisterPendingServersResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RegisterPendingServersResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RegisterPendingServersResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServersResponse * SOAP_FMAC4 soap_get__ns1__RegisterPendingServersResponse(struct soap *soap, _ns1__RegisterPendingServersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RegisterPendingServersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__RegisterPendingServersResponse * SOAP_FMAC2 soap_instantiate__ns1__RegisterPendingServersResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RegisterPendingServersResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RegisterPendingServersResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__RegisterPendingServersResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__RegisterPendingServersResponse);
		((_ns1__RegisterPendingServersResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__RegisterPendingServersResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RegisterPendingServersResponse);
		for (int i = 0; i < n; i++)
			((_ns1__RegisterPendingServersResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RegisterPendingServersResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RegisterPendingServersResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RegisterPendingServersResponse %p -> %p\n", q, p));
	*(_ns1__RegisterPendingServersResponse*)p = *(_ns1__RegisterPendingServersResponse*)q;
}

void _ns1__RegisterPendingServers::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__RegisterPendingServers::Product);
	this->_ns1__RegisterPendingServers::ServerAddresses = NULL;
	/* transient soap skipped */
}

void _ns1__RegisterPendingServers::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__RegisterPendingServers::Product);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns1__RegisterPendingServers::ServerAddresses);
	/* transient soap skipped */
}

int _ns1__RegisterPendingServers::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RegisterPendingServers(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RegisterPendingServers(struct soap *soap, const char *tag, int id, const _ns1__RegisterPendingServers *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RegisterPendingServers), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__RegisterPendingServers::Product), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns1:ServerAddresses", -1, &(a->_ns1__RegisterPendingServers::ServerAddresses), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RegisterPendingServers::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RegisterPendingServers(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServers * SOAP_FMAC4 soap_in__ns1__RegisterPendingServers(struct soap *soap, const char *tag, _ns1__RegisterPendingServers *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RegisterPendingServers *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RegisterPendingServers, sizeof(_ns1__RegisterPendingServers), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RegisterPendingServers)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RegisterPendingServers *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_ServerAddresses1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__RegisterPendingServers::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_ServerAddresses1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns1:ServerAddresses", &(a->_ns1__RegisterPendingServers::ServerAddresses), "ns5:ArrayOfstring"))
				{	soap_flag_ServerAddresses1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RegisterPendingServers *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RegisterPendingServers, 0, sizeof(_ns1__RegisterPendingServers), 0, soap_copy__ns1__RegisterPendingServers);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__RegisterPendingServers::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RegisterPendingServers);
	if (this->soap_out(soap, tag?tag:"ns1:RegisterPendingServers", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__RegisterPendingServers::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RegisterPendingServers(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServers * SOAP_FMAC4 soap_get__ns1__RegisterPendingServers(struct soap *soap, _ns1__RegisterPendingServers *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RegisterPendingServers(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__RegisterPendingServers * SOAP_FMAC2 soap_instantiate__ns1__RegisterPendingServers(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RegisterPendingServers(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RegisterPendingServers, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__RegisterPendingServers);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__RegisterPendingServers);
		((_ns1__RegisterPendingServers*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__RegisterPendingServers, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RegisterPendingServers);
		for (int i = 0; i < n; i++)
			((_ns1__RegisterPendingServers*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RegisterPendingServers*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RegisterPendingServers(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RegisterPendingServers %p -> %p\n", q, p));
	*(_ns1__RegisterPendingServers*)p = *(_ns1__RegisterPendingServers*)q;
}

void _ns1__LookupServerByModuleResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LookupServerByModuleResponse::LookupServerByModuleResult = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByModuleResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, &this->_ns1__LookupServerByModuleResponse::LookupServerByModuleResult);
	/* transient soap skipped */
}

int _ns1__LookupServerByModuleResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByModuleResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByModuleResponse(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByModuleResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByModuleResponse), type))
		return soap->error;
	if (a->LookupServerByModuleResult)
		soap_element_result(soap, "ns1:LookupServerByModuleResult");
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByModuleResult", -1, &(a->_ns1__LookupServerByModuleResponse::LookupServerByModuleResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByModuleResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByModuleResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByModuleResponse * SOAP_FMAC4 soap_in__ns1__LookupServerByModuleResponse(struct soap *soap, const char *tag, _ns1__LookupServerByModuleResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByModuleResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByModuleResponse, sizeof(_ns1__LookupServerByModuleResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByModuleResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByModuleResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LookupServerByModuleResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LookupServerByModuleResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByModuleResult", &(a->_ns1__LookupServerByModuleResponse::LookupServerByModuleResult), "ns4:ArrayOfNWGameServer"))
				{	soap_flag_LookupServerByModuleResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LookupServerByModuleResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByModuleResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByModuleResponse, 0, sizeof(_ns1__LookupServerByModuleResponse), 0, soap_copy__ns1__LookupServerByModuleResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByModuleResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByModuleResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByModuleResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByModuleResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByModuleResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByModuleResponse * SOAP_FMAC4 soap_get__ns1__LookupServerByModuleResponse(struct soap *soap, _ns1__LookupServerByModuleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByModuleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByModuleResponse * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByModuleResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByModuleResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByModuleResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByModuleResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByModuleResponse);
		((_ns1__LookupServerByModuleResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByModuleResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByModuleResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByModuleResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByModuleResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByModuleResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByModuleResponse %p -> %p\n", q, p));
	*(_ns1__LookupServerByModuleResponse*)p = *(_ns1__LookupServerByModuleResponse*)q;
}

void _ns1__LookupServerByModule::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LookupServerByModule::Product);
	soap_default_string(soap, &this->_ns1__LookupServerByModule::Module);
	/* transient soap skipped */
}

void _ns1__LookupServerByModule::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LookupServerByModule::Product);
	soap_serialize_string(soap, &this->_ns1__LookupServerByModule::Module);
	/* transient soap skipped */
}

int _ns1__LookupServerByModule::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByModule(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByModule(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByModule *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByModule), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__LookupServerByModule::Product), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Module", -1, &(a->_ns1__LookupServerByModule::Module), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByModule::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByModule(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByModule * SOAP_FMAC4 soap_in__ns1__LookupServerByModule(struct soap *soap, const char *tag, _ns1__LookupServerByModule *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByModule *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByModule, sizeof(_ns1__LookupServerByModule), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByModule)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByModule *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_Module1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__LookupServerByModule::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_Module1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Module", &(a->_ns1__LookupServerByModule::Module), "xsd:string"))
				{	soap_flag_Module1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByModule *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByModule, 0, sizeof(_ns1__LookupServerByModule), 0, soap_copy__ns1__LookupServerByModule);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByModule::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByModule);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByModule", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByModule::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByModule(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByModule * SOAP_FMAC4 soap_get__ns1__LookupServerByModule(struct soap *soap, _ns1__LookupServerByModule *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByModule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByModule * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByModule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByModule(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByModule, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByModule);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByModule);
		((_ns1__LookupServerByModule*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByModule, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByModule);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByModule*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByModule*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByModule(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByModule %p -> %p\n", q, p));
	*(_ns1__LookupServerByModule*)p = *(_ns1__LookupServerByModule*)q;
}

void _ns1__GetSupportedProductListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetSupportedProductListResponse::GetSupportedProductListResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetSupportedProductListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns1__GetSupportedProductListResponse::GetSupportedProductListResult);
	/* transient soap skipped */
}

int _ns1__GetSupportedProductListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSupportedProductListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSupportedProductListResponse(struct soap *soap, const char *tag, int id, const _ns1__GetSupportedProductListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSupportedProductListResponse), type))
		return soap->error;
	if (a->GetSupportedProductListResult)
		soap_element_result(soap, "ns1:GetSupportedProductListResult");
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns1:GetSupportedProductListResult", -1, &(a->_ns1__GetSupportedProductListResponse::GetSupportedProductListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSupportedProductListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSupportedProductListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductListResponse * SOAP_FMAC4 soap_in__ns1__GetSupportedProductListResponse(struct soap *soap, const char *tag, _ns1__GetSupportedProductListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSupportedProductListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSupportedProductListResponse, sizeof(_ns1__GetSupportedProductListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSupportedProductListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSupportedProductListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetSupportedProductListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSupportedProductListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns1:GetSupportedProductListResult", &(a->_ns1__GetSupportedProductListResponse::GetSupportedProductListResult), "ns5:ArrayOfstring"))
				{	soap_flag_GetSupportedProductListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetSupportedProductListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSupportedProductListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSupportedProductListResponse, 0, sizeof(_ns1__GetSupportedProductListResponse), 0, soap_copy__ns1__GetSupportedProductListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSupportedProductListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetSupportedProductListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetSupportedProductListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSupportedProductListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSupportedProductListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductListResponse * SOAP_FMAC4 soap_get__ns1__GetSupportedProductListResponse(struct soap *soap, _ns1__GetSupportedProductListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSupportedProductListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSupportedProductListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetSupportedProductListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSupportedProductListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSupportedProductListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSupportedProductListResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetSupportedProductListResponse);
		((_ns1__GetSupportedProductListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSupportedProductListResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetSupportedProductListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetSupportedProductListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetSupportedProductListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSupportedProductListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSupportedProductListResponse %p -> %p\n", q, p));
	*(_ns1__GetSupportedProductListResponse*)p = *(_ns1__GetSupportedProductListResponse*)q;
}

void _ns1__GetSupportedProductList::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetSupportedProductList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetSupportedProductList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetSupportedProductList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetSupportedProductList(struct soap *soap, const char *tag, int id, const _ns1__GetSupportedProductList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetSupportedProductList), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetSupportedProductList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetSupportedProductList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductList * SOAP_FMAC4 soap_in__ns1__GetSupportedProductList(struct soap *soap, const char *tag, _ns1__GetSupportedProductList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetSupportedProductList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetSupportedProductList, sizeof(_ns1__GetSupportedProductList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetSupportedProductList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetSupportedProductList *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetSupportedProductList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetSupportedProductList, 0, sizeof(_ns1__GetSupportedProductList), 0, soap_copy__ns1__GetSupportedProductList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetSupportedProductList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetSupportedProductList);
	if (this->soap_out(soap, tag?tag:"ns1:GetSupportedProductList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetSupportedProductList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetSupportedProductList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductList * SOAP_FMAC4 soap_get__ns1__GetSupportedProductList(struct soap *soap, _ns1__GetSupportedProductList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetSupportedProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetSupportedProductList * SOAP_FMAC2 soap_instantiate__ns1__GetSupportedProductList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetSupportedProductList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetSupportedProductList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetSupportedProductList);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetSupportedProductList);
		((_ns1__GetSupportedProductList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetSupportedProductList, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetSupportedProductList);
		for (int i = 0; i < n; i++)
			((_ns1__GetSupportedProductList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetSupportedProductList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetSupportedProductList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetSupportedProductList %p -> %p\n", q, p));
	*(_ns1__GetSupportedProductList*)p = *(_ns1__GetSupportedProductList*)q;
}

void _ns1__GetOnlineUserCountResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetOnlineUserCountResponse::GetOnlineUserCountResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetOnlineUserCountResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTounsignedInt(soap, &this->_ns1__GetOnlineUserCountResponse::GetOnlineUserCountResult);
	/* transient soap skipped */
}

int _ns1__GetOnlineUserCountResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetOnlineUserCountResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOnlineUserCountResponse(struct soap *soap, const char *tag, int id, const _ns1__GetOnlineUserCountResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetOnlineUserCountResponse), type))
		return soap->error;
	if (a->GetOnlineUserCountResult)
		soap_element_result(soap, "ns1:GetOnlineUserCountResult");
	if (soap_out_PointerTounsignedInt(soap, "ns1:GetOnlineUserCountResult", -1, &(a->_ns1__GetOnlineUserCountResponse::GetOnlineUserCountResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetOnlineUserCountResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetOnlineUserCountResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCountResponse * SOAP_FMAC4 soap_in__ns1__GetOnlineUserCountResponse(struct soap *soap, const char *tag, _ns1__GetOnlineUserCountResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetOnlineUserCountResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetOnlineUserCountResponse, sizeof(_ns1__GetOnlineUserCountResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetOnlineUserCountResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetOnlineUserCountResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetOnlineUserCountResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetOnlineUserCountResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTounsignedInt(soap, "ns1:GetOnlineUserCountResult", &(a->_ns1__GetOnlineUserCountResponse::GetOnlineUserCountResult), "xsd:unsignedInt"))
				{	soap_flag_GetOnlineUserCountResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetOnlineUserCountResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetOnlineUserCountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetOnlineUserCountResponse, 0, sizeof(_ns1__GetOnlineUserCountResponse), 0, soap_copy__ns1__GetOnlineUserCountResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetOnlineUserCountResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetOnlineUserCountResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetOnlineUserCountResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetOnlineUserCountResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetOnlineUserCountResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCountResponse * SOAP_FMAC4 soap_get__ns1__GetOnlineUserCountResponse(struct soap *soap, _ns1__GetOnlineUserCountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetOnlineUserCountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetOnlineUserCountResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOnlineUserCountResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetOnlineUserCountResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetOnlineUserCountResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetOnlineUserCountResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetOnlineUserCountResponse);
		((_ns1__GetOnlineUserCountResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetOnlineUserCountResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetOnlineUserCountResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetOnlineUserCountResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetOnlineUserCountResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOnlineUserCountResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetOnlineUserCountResponse %p -> %p\n", q, p));
	*(_ns1__GetOnlineUserCountResponse*)p = *(_ns1__GetOnlineUserCountResponse*)q;
}

void _ns1__GetOnlineUserCount::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetOnlineUserCount::Product);
	/* transient soap skipped */
}

void _ns1__GetOnlineUserCount::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetOnlineUserCount::Product);
	/* transient soap skipped */
}

int _ns1__GetOnlineUserCount::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetOnlineUserCount(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOnlineUserCount(struct soap *soap, const char *tag, int id, const _ns1__GetOnlineUserCount *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetOnlineUserCount), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__GetOnlineUserCount::Product), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetOnlineUserCount::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetOnlineUserCount(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCount * SOAP_FMAC4 soap_in__ns1__GetOnlineUserCount(struct soap *soap, const char *tag, _ns1__GetOnlineUserCount *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetOnlineUserCount *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetOnlineUserCount, sizeof(_ns1__GetOnlineUserCount), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetOnlineUserCount)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetOnlineUserCount *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__GetOnlineUserCount::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetOnlineUserCount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetOnlineUserCount, 0, sizeof(_ns1__GetOnlineUserCount), 0, soap_copy__ns1__GetOnlineUserCount);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetOnlineUserCount::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetOnlineUserCount);
	if (this->soap_out(soap, tag?tag:"ns1:GetOnlineUserCount", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetOnlineUserCount::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetOnlineUserCount(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCount * SOAP_FMAC4 soap_get__ns1__GetOnlineUserCount(struct soap *soap, _ns1__GetOnlineUserCount *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetOnlineUserCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetOnlineUserCount * SOAP_FMAC2 soap_instantiate__ns1__GetOnlineUserCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetOnlineUserCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetOnlineUserCount, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetOnlineUserCount);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetOnlineUserCount);
		((_ns1__GetOnlineUserCount*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetOnlineUserCount, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetOnlineUserCount);
		for (int i = 0; i < n; i++)
			((_ns1__GetOnlineUserCount*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetOnlineUserCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOnlineUserCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetOnlineUserCount %p -> %p\n", q, p));
	*(_ns1__GetOnlineUserCount*)p = *(_ns1__GetOnlineUserCount*)q;
}

void _ns1__GetOnlineServerListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetOnlineServerListResponse::GetOnlineServerListResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetOnlineServerListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, &this->_ns1__GetOnlineServerListResponse::GetOnlineServerListResult);
	/* transient soap skipped */
}

int _ns1__GetOnlineServerListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetOnlineServerListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOnlineServerListResponse(struct soap *soap, const char *tag, int id, const _ns1__GetOnlineServerListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetOnlineServerListResponse), type))
		return soap->error;
	if (a->GetOnlineServerListResult)
		soap_element_result(soap, "ns1:GetOnlineServerListResult");
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, "ns1:GetOnlineServerListResult", -1, &(a->_ns1__GetOnlineServerListResponse::GetOnlineServerListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetOnlineServerListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetOnlineServerListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerListResponse * SOAP_FMAC4 soap_in__ns1__GetOnlineServerListResponse(struct soap *soap, const char *tag, _ns1__GetOnlineServerListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetOnlineServerListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetOnlineServerListResponse, sizeof(_ns1__GetOnlineServerListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetOnlineServerListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetOnlineServerListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetOnlineServerListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetOnlineServerListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfNWGameServer(soap, "ns1:GetOnlineServerListResult", &(a->_ns1__GetOnlineServerListResponse::GetOnlineServerListResult), "ns4:ArrayOfNWGameServer"))
				{	soap_flag_GetOnlineServerListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetOnlineServerListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetOnlineServerListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetOnlineServerListResponse, 0, sizeof(_ns1__GetOnlineServerListResponse), 0, soap_copy__ns1__GetOnlineServerListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetOnlineServerListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetOnlineServerListResponse);
	if (this->soap_out(soap, tag?tag:"ns1:GetOnlineServerListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetOnlineServerListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetOnlineServerListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerListResponse * SOAP_FMAC4 soap_get__ns1__GetOnlineServerListResponse(struct soap *soap, _ns1__GetOnlineServerListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetOnlineServerListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetOnlineServerListResponse * SOAP_FMAC2 soap_instantiate__ns1__GetOnlineServerListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetOnlineServerListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetOnlineServerListResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetOnlineServerListResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetOnlineServerListResponse);
		((_ns1__GetOnlineServerListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetOnlineServerListResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetOnlineServerListResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetOnlineServerListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetOnlineServerListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOnlineServerListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetOnlineServerListResponse %p -> %p\n", q, p));
	*(_ns1__GetOnlineServerListResponse*)p = *(_ns1__GetOnlineServerListResponse*)q;
}

void _ns1__GetOnlineServerList::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetOnlineServerList::Product);
	/* transient soap skipped */
}

void _ns1__GetOnlineServerList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetOnlineServerList::Product);
	/* transient soap skipped */
}

int _ns1__GetOnlineServerList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetOnlineServerList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetOnlineServerList(struct soap *soap, const char *tag, int id, const _ns1__GetOnlineServerList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetOnlineServerList), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__GetOnlineServerList::Product), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetOnlineServerList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetOnlineServerList(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerList * SOAP_FMAC4 soap_in__ns1__GetOnlineServerList(struct soap *soap, const char *tag, _ns1__GetOnlineServerList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetOnlineServerList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetOnlineServerList, sizeof(_ns1__GetOnlineServerList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetOnlineServerList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetOnlineServerList *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__GetOnlineServerList::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetOnlineServerList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetOnlineServerList, 0, sizeof(_ns1__GetOnlineServerList), 0, soap_copy__ns1__GetOnlineServerList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__GetOnlineServerList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetOnlineServerList);
	if (this->soap_out(soap, tag?tag:"ns1:GetOnlineServerList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetOnlineServerList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetOnlineServerList(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerList * SOAP_FMAC4 soap_get__ns1__GetOnlineServerList(struct soap *soap, _ns1__GetOnlineServerList *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetOnlineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__GetOnlineServerList * SOAP_FMAC2 soap_instantiate__ns1__GetOnlineServerList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetOnlineServerList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetOnlineServerList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__GetOnlineServerList);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__GetOnlineServerList);
		((_ns1__GetOnlineServerList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__GetOnlineServerList, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetOnlineServerList);
		for (int i = 0; i < n; i++)
			((_ns1__GetOnlineServerList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetOnlineServerList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetOnlineServerList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetOnlineServerList %p -> %p\n", q, p));
	*(_ns1__GetOnlineServerList*)p = *(_ns1__GetOnlineServerList*)q;
}

void _ns1__LookupServerByAddressResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LookupServerByAddressResponse::LookupServerByAddressResult = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByAddressResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__NWGameServer(soap, &this->_ns1__LookupServerByAddressResponse::LookupServerByAddressResult);
	/* transient soap skipped */
}

int _ns1__LookupServerByAddressResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByAddressResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByAddressResponse(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByAddressResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByAddressResponse), type))
		return soap->error;
	if (a->LookupServerByAddressResult)
		soap_element_result(soap, "ns1:LookupServerByAddressResult");
	if (soap_out_PointerTons4__NWGameServer(soap, "ns1:LookupServerByAddressResult", -1, &(a->_ns1__LookupServerByAddressResponse::LookupServerByAddressResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByAddressResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByAddressResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddressResponse * SOAP_FMAC4 soap_in__ns1__LookupServerByAddressResponse(struct soap *soap, const char *tag, _ns1__LookupServerByAddressResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByAddressResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByAddressResponse, sizeof(_ns1__LookupServerByAddressResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByAddressResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByAddressResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LookupServerByAddressResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LookupServerByAddressResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__NWGameServer(soap, "ns1:LookupServerByAddressResult", &(a->_ns1__LookupServerByAddressResponse::LookupServerByAddressResult), "ns4:NWGameServer"))
				{	soap_flag_LookupServerByAddressResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LookupServerByAddressResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByAddressResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByAddressResponse, 0, sizeof(_ns1__LookupServerByAddressResponse), 0, soap_copy__ns1__LookupServerByAddressResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByAddressResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByAddressResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByAddressResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByAddressResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByAddressResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddressResponse * SOAP_FMAC4 soap_get__ns1__LookupServerByAddressResponse(struct soap *soap, _ns1__LookupServerByAddressResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByAddressResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByAddressResponse * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByAddressResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByAddressResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByAddressResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByAddressResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByAddressResponse);
		((_ns1__LookupServerByAddressResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByAddressResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByAddressResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByAddressResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByAddressResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByAddressResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByAddressResponse %p -> %p\n", q, p));
	*(_ns1__LookupServerByAddressResponse*)p = *(_ns1__LookupServerByAddressResponse*)q;
}

void _ns1__LookupServerByAddress::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LookupServerByAddress::Product);
	soap_default_string(soap, &this->_ns1__LookupServerByAddress::ServerAddress);
	/* transient soap skipped */
}

void _ns1__LookupServerByAddress::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LookupServerByAddress::Product);
	soap_serialize_string(soap, &this->_ns1__LookupServerByAddress::ServerAddress);
	/* transient soap skipped */
}

int _ns1__LookupServerByAddress::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByAddress(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByAddress(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByAddress *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByAddress), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__LookupServerByAddress::Product), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:ServerAddress", -1, &(a->_ns1__LookupServerByAddress::ServerAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByAddress::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByAddress(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddress * SOAP_FMAC4 soap_in__ns1__LookupServerByAddress(struct soap *soap, const char *tag, _ns1__LookupServerByAddress *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByAddress *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByAddress, sizeof(_ns1__LookupServerByAddress), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByAddress)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByAddress *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_ServerAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__LookupServerByAddress::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_ServerAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:ServerAddress", &(a->_ns1__LookupServerByAddress::ServerAddress), "xsd:string"))
				{	soap_flag_ServerAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByAddress *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByAddress, 0, sizeof(_ns1__LookupServerByAddress), 0, soap_copy__ns1__LookupServerByAddress);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByAddress::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByAddress);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByAddress", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByAddress::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByAddress(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddress * SOAP_FMAC4 soap_get__ns1__LookupServerByAddress(struct soap *soap, _ns1__LookupServerByAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByAddress * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByAddress);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByAddress);
		((_ns1__LookupServerByAddress*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByAddress, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByAddress);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByAddress*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByAddress*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByAddress %p -> %p\n", q, p));
	*(_ns1__LookupServerByAddress*)p = *(_ns1__LookupServerByAddress*)q;
}

void _ns1__LookupServerByNameResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__LookupServerByNameResponse::LookupServerByNameResult = NULL;
	/* transient soap skipped */
}

void _ns1__LookupServerByNameResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons4__ArrayOfNWGameServer(soap, &this->_ns1__LookupServerByNameResponse::LookupServerByNameResult);
	/* transient soap skipped */
}

int _ns1__LookupServerByNameResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByNameResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByNameResponse(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByNameResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByNameResponse), type))
		return soap->error;
	if (a->LookupServerByNameResult)
		soap_element_result(soap, "ns1:LookupServerByNameResult");
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByNameResult", -1, &(a->_ns1__LookupServerByNameResponse::LookupServerByNameResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByNameResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByNameResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByNameResponse * SOAP_FMAC4 soap_in__ns1__LookupServerByNameResponse(struct soap *soap, const char *tag, _ns1__LookupServerByNameResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByNameResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByNameResponse, sizeof(_ns1__LookupServerByNameResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByNameResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByNameResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_LookupServerByNameResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LookupServerByNameResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons4__ArrayOfNWGameServer(soap, "ns1:LookupServerByNameResult", &(a->_ns1__LookupServerByNameResponse::LookupServerByNameResult), "ns4:ArrayOfNWGameServer"))
				{	soap_flag_LookupServerByNameResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LookupServerByNameResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByNameResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByNameResponse, 0, sizeof(_ns1__LookupServerByNameResponse), 0, soap_copy__ns1__LookupServerByNameResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByNameResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByNameResponse);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByNameResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByNameResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByNameResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByNameResponse * SOAP_FMAC4 soap_get__ns1__LookupServerByNameResponse(struct soap *soap, _ns1__LookupServerByNameResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByNameResponse * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByNameResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByNameResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByNameResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByNameResponse);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByNameResponse);
		((_ns1__LookupServerByNameResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByNameResponse, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByNameResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByNameResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByNameResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByNameResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByNameResponse %p -> %p\n", q, p));
	*(_ns1__LookupServerByNameResponse*)p = *(_ns1__LookupServerByNameResponse*)q;
}

void _ns1__LookupServerByName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LookupServerByName::Product);
	soap_default_string(soap, &this->_ns1__LookupServerByName::ServerName);
	/* transient soap skipped */
}

void _ns1__LookupServerByName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LookupServerByName::Product);
	soap_serialize_string(soap, &this->_ns1__LookupServerByName::ServerName);
	/* transient soap skipped */
}

int _ns1__LookupServerByName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LookupServerByName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LookupServerByName(struct soap *soap, const char *tag, int id, const _ns1__LookupServerByName *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LookupServerByName), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Product", -1, &(a->_ns1__LookupServerByName::Product), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:ServerName", -1, &(a->_ns1__LookupServerByName::ServerName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LookupServerByName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LookupServerByName(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LookupServerByName * SOAP_FMAC4 soap_in__ns1__LookupServerByName(struct soap *soap, const char *tag, _ns1__LookupServerByName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LookupServerByName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LookupServerByName, sizeof(_ns1__LookupServerByName), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LookupServerByName)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LookupServerByName *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Product1 = 1;
	size_t soap_flag_ServerName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Product1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Product", &(a->_ns1__LookupServerByName::Product), "xsd:string"))
				{	soap_flag_Product1--;
					continue;
				}
			if (soap_flag_ServerName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:ServerName", &(a->_ns1__LookupServerByName::ServerName), "xsd:string"))
				{	soap_flag_ServerName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LookupServerByName *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LookupServerByName, 0, sizeof(_ns1__LookupServerByName), 0, soap_copy__ns1__LookupServerByName);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__LookupServerByName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LookupServerByName);
	if (this->soap_out(soap, tag?tag:"ns1:LookupServerByName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__LookupServerByName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LookupServerByName(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LookupServerByName * SOAP_FMAC4 soap_get__ns1__LookupServerByName(struct soap *soap, _ns1__LookupServerByName *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LookupServerByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__LookupServerByName * SOAP_FMAC2 soap_instantiate__ns1__LookupServerByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LookupServerByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LookupServerByName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__LookupServerByName);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(_ns1__LookupServerByName);
		((_ns1__LookupServerByName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__LookupServerByName, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LookupServerByName);
		for (int i = 0; i < n; i++)
			((_ns1__LookupServerByName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LookupServerByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LookupServerByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LookupServerByName %p -> %p\n", q, p));
	*(_ns1__LookupServerByName*)p = *(_ns1__LookupServerByName*)q;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	return soap_out_unsignedShort(soap, tag, id, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedShort);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedShort", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedShort, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		for (int i = 0; i < n; i++)
			((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedLONG64(soap, &this->xsd__unsignedLong::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	return soap_out_unsignedLONG64(soap, tag, id, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedLong)
			return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedLONG64(soap, tag, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong"))
		return NULL;
	return a;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedLong);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedLong, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__unsignedLong);
		((xsd__unsignedLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedLong, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedLong);
		for (int i = 0; i < n; i++)
			((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedLong %p -> %p\n", q, p));
	*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__unsignedInt::__item, SOAP_TYPE_unsignedInt);
	/* transient soap skipped */
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedInt);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedInt, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		for (int i = 0; i < n; i++)
			((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	return soap_out_xsd__unsignedByte(soap, tag, id, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedByte_)
			return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__unsignedByte(soap, tag, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte"))
		return NULL;
	return a;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte_);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedByte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__unsignedByte_);
		((xsd__unsignedByte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedByte_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedByte_);
		for (int i = 0; i < n; i++)
			((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedByte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedByte_ %p -> %p\n", q, p));
	*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_string(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_string(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__string);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__string, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_short(soap, &this->xsd__short::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	return soap_out_short(soap, tag, id, &(a->xsd__short::__item), "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__short)
			return (xsd__short *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_short(soap, tag, &(a->xsd__short::__item), "xsd:short"))
		return NULL;
	return a;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__short);
	if (this->soap_out(soap, tag?tag:"xsd:short", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__short, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__short);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__short);
		((xsd__short*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__short, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__short);
		for (int i = 0; i < n; i++)
			((xsd__short*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__short*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__short %p -> %p\n", q, p));
	*(xsd__short*)p = *(xsd__short*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->xsd__long::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (this->soap_out(soap, tag?tag:"xsd:long", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__long);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__long, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__long);
		for (int i = 0; i < n; i++)
			((xsd__long*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->xsd__int::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__int);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__int, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__int);
		for (int i = 0; i < n; i++)
			((xsd__int*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_float(soap, &this->xsd__float::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__float)
			return (xsd__float *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))
		return NULL;
	return a;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (this->soap_out(soap, tag?tag:"xsd:float", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__float, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__float);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__float);
		((xsd__float*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__float, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__float);
		for (int i = 0; i < n; i++)
			((xsd__float*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__float*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));
	*(xsd__float*)p = *(xsd__float*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	/* transient soap skipped */
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__duration_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__duration_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__duration_);
		for (int i = 0; i < n; i++)
			((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->xsd__double::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	return soap_out_double(soap, tag, id, &(a->xsd__double::__item), "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__double)
			return (xsd__double *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_double(soap, tag, &(a->xsd__double::__item), "xsd:double"))
		return NULL;
	return a;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (this->soap_out(soap, tag?tag:"xsd:double", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__double, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__double);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__double);
		((xsd__double*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__double, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__double);
		for (int i = 0; i < n; i++)
			((xsd__double*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__double*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__double %p -> %p\n", q, p));
	*(xsd__double*)p = *(xsd__double*)q;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	/* transient soap skipped */
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	return soap_out_xsd__decimal(soap, tag, id, &(a->xsd__decimal_::__item), "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(a->xsd__decimal_::__item), "xsd:decimal"))
		return NULL;
	return a;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__decimal_);
	if (this->soap_out(soap, tag?tag:"xsd:decimal", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__decimal_);
		((xsd__decimal_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__decimal_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__decimal_);
		for (int i = 0; i < n; i++)
			((xsd__decimal_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->xsd__dateTime::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__dateTime::__item, SOAP_TYPE_time);
	/* transient soap skipped */
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__dateTime, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__dateTime);
		for (int i = 0; i < n; i++)
			((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	return soap_out_xsd__byte(soap, tag, id, &(a->xsd__byte_::__item), "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__byte_)
			return (xsd__byte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__byte(soap, tag, &(a->xsd__byte_::__item), "xsd:byte"))
		return NULL;
	return a;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__byte_);
	if (this->soap_out(soap, tag?tag:"xsd:byte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__byte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__byte_);
		((xsd__byte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__byte_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__byte_);
		for (int i = 0; i < n; i++)
			((xsd__byte_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__byte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__byte_ %p -> %p\n", q, p));
	*(xsd__byte_*)p = *(xsd__byte_*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->xsd__boolean::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__boolean::__item, SOAP_TYPE_bool);
	/* transient soap skipped */
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__boolean, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__boolean);
		for (int i = 0; i < n; i++)
			((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	/* transient soap skipped */
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__base64Binary_)
			return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	}
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__base64Binary_);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__base64Binary_);
		((xsd__base64Binary_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary_);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary_ %p -> %p\n", q, p));
	*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	/* transient soap skipped */
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__anyURI_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		for (int i = 0; i < n; i++)
			((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}

void xsd__QName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__QName(soap, &this->xsd__QName::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__QName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &this->xsd__QName::__item);
	/* transient soap skipped */
}

int xsd__QName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const xsd__QName *a, const char *type)
{
	const char *soap_tmp___item = soap_QName2s(soap, a->__item);
	return soap_out__QName(soap, tag, id, (char*const*)&soap_tmp___item, "xsd:QName");
}

void *xsd__QName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap *soap, const char *tag, xsd__QName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName, sizeof(xsd__QName), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName)
			return (xsd__QName *)a->soap_in(soap, tag, type);
	}
	if (!soap_in__QName(soap, tag, &(a->xsd__QName::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__QName);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, xsd__QName *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__QName);
		((xsd__QName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__QName, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName);
		for (int i = 0; i < n; i++)
			((xsd__QName*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName %p -> %p\n", q, p));
	*(xsd__QName*)p = *(xsd__QName*)q;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	/* transient soap skipped */
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	return soap_out_xsd__IDREF(soap, tag, id, &(a->xsd__IDREF_::__item), "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__IDREF_)
			return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__IDREF(soap, tag, &(a->xsd__IDREF_::__item), "xsd:IDREF"))
		return NULL;
	return a;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__IDREF_);
	if (this->soap_out(soap, tag?tag:"xsd:IDREF", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__IDREF_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__IDREF_);
		((xsd__IDREF_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__IDREF_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__IDREF_);
		for (int i = 0; i < n; i++)
			((xsd__IDREF_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__IDREF_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__IDREF_ %p -> %p\n", q, p));
	*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	/* transient soap skipped */
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	return soap_out_xsd__ID(soap, tag, id, &(a->xsd__ID_::__item), "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(a->xsd__ID_::__item), "xsd:ID"))
		return NULL;
	return a;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__ID_);
	if (this->soap_out(soap, tag?tag:"xsd:ID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__ID_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__ID_);
		for (int i = 0; i < n; i++)
			((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_xsd__ID_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__ID_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__ID_);
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:IDREF"))
	{	cp->type = SOAP_TYPE_xsd__IDREF_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__IDREF_);
			((xsd__IDREF_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__IDREF_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__IDREF_);
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__IDREF_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__QName);
			((xsd__QName*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__QName, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__QName);
			for (int i = 0; i < n; i++)
				((xsd__QName*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__QName*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__anyURI_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:base64Binary"))
	{	cp->type = SOAP_TYPE_xsd__base64Binary_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__base64Binary_);
			((xsd__base64Binary_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__base64Binary_);
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__base64Binary_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__boolean, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__boolean);
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:byte"))
	{	cp->type = SOAP_TYPE_xsd__byte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__byte_);
			((xsd__byte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__byte_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__byte_);
			for (int i = 0; i < n; i++)
				((xsd__byte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__byte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__dateTime, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__dateTime);
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__decimal_);
			((xsd__decimal_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__decimal_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__decimal_);
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:double"))
	{	cp->type = SOAP_TYPE_xsd__double;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__double);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__double);
			((xsd__double*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__double, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__double);
			for (int i = 0; i < n; i++)
				((xsd__double*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__double*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_xsd__duration_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__duration_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__duration_);
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:float"))
	{	cp->type = SOAP_TYPE_xsd__float;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__float);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__float);
			((xsd__float*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__float, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__float);
			for (int i = 0; i < n; i++)
				((xsd__float*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__float*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__int);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__int, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__int);
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__long);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__long, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__long);
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:short"))
	{	cp->type = SOAP_TYPE_xsd__short;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__short);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__short);
			((xsd__short*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__short, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__short);
			for (int i = 0; i < n; i++)
				((xsd__short*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__short*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__string);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__string, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
	{	cp->type = SOAP_TYPE_xsd__unsignedByte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedByte_);
			((xsd__unsignedByte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedByte_, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__unsignedByte_);
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedByte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedInt, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
	{	cp->type = SOAP_TYPE_xsd__unsignedLong;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedLong);
			((xsd__unsignedLong*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedLong, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__unsignedLong);
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedLong*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__unsignedShort, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:char"))
	{	cp->type = SOAP_TYPE_ns3__char__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__char__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__char__);
			((ns3__char__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__char__, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns3__char__);
			for (int i = 0; i < n; i++)
				((ns3__char__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__char__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:duration"))
	{	cp->type = SOAP_TYPE_ns3__duration__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__duration__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__duration__);
			((ns3__duration__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__duration__, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns3__duration__);
			for (int i = 0; i < n; i++)
				((ns3__duration__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__duration__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns3:guid"))
	{	cp->type = SOAP_TYPE_ns3__guid__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns3__guid__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns3__guid__);
			((ns3__guid__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns3__guid__, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns3__guid__);
			for (int i = 0; i < n; i++)
				((ns3__guid__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns3__guid__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ArrayOfNWGameServer"))
	{	cp->type = SOAP_TYPE_ns4__ArrayOfNWGameServer;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__ArrayOfNWGameServer);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__ArrayOfNWGameServer);
			((ns4__ArrayOfNWGameServer*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__ArrayOfNWGameServer, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns4__ArrayOfNWGameServer);
			for (int i = 0; i < n; i++)
				((ns4__ArrayOfNWGameServer*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__ArrayOfNWGameServer*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:NWGameServer"))
	{	cp->type = SOAP_TYPE_ns4__NWGameServer;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__NWGameServer);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__NWGameServer);
			((ns4__NWGameServer*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__NWGameServer, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns4__NWGameServer);
			for (int i = 0; i < n; i++)
				((ns4__NWGameServer*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__NWGameServer*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:ClientExtensionUpdate"))
	{	cp->type = SOAP_TYPE_ns4__ClientExtensionUpdate;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__ClientExtensionUpdate);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__ClientExtensionUpdate);
			((ns4__ClientExtensionUpdate*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns4__ClientExtensionUpdate, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns4__ClientExtensionUpdate);
			for (int i = 0; i < n; i++)
				((ns4__ClientExtensionUpdate*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__ClientExtensionUpdate*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns5:ArrayOfstring"))
	{	cp->type = SOAP_TYPE_ns5__ArrayOfstring;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns5__ArrayOfstring);
			((ns5__ArrayOfstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns5__ArrayOfstring, n);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = n * sizeof(ns5__ArrayOfstring);
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfstring*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns5__ArrayOfstring*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__anyType, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__IncrementStatistic_(struct soap *soap, struct __ns6__IncrementStatistic_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IncrementStatistic = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__IncrementStatistic_(struct soap *soap, const struct __ns6__IncrementStatistic_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__IncrementStatistic(soap, &a->ns1__IncrementStatistic);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__IncrementStatistic_(struct soap *soap, const char *tag, int id, const struct __ns6__IncrementStatistic_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__IncrementStatistic(soap, "ns1:IncrementStatistic", -1, &a->ns1__IncrementStatistic, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__IncrementStatistic_ * SOAP_FMAC4 soap_in___ns6__IncrementStatistic_(struct soap *soap, const char *tag, struct __ns6__IncrementStatistic_ *a, const char *type)
{
	size_t soap_flag_ns1__IncrementStatistic = 1;
	short soap_flag;
	a = (struct __ns6__IncrementStatistic_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__IncrementStatistic_, sizeof(struct __ns6__IncrementStatistic_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__IncrementStatistic_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IncrementStatistic && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IncrementStatistic(soap, "ns1:IncrementStatistic", &a->ns1__IncrementStatistic, ""))
				{	soap_flag_ns1__IncrementStatistic--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__IncrementStatistic_(struct soap *soap, const struct __ns6__IncrementStatistic_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__IncrementStatistic_(soap, tag?tag:"-ns6:IncrementStatistic", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__IncrementStatistic_ * SOAP_FMAC4 soap_get___ns6__IncrementStatistic_(struct soap *soap, struct __ns6__IncrementStatistic_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__IncrementStatistic_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__IncrementStatistic_ * SOAP_FMAC2 soap_instantiate___ns6__IncrementStatistic_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__IncrementStatistic_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__IncrementStatistic_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__IncrementStatistic_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__IncrementStatistic_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__IncrementStatistic_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__IncrementStatistic_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__IncrementStatistic_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__IncrementStatistic_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__IncrementStatistic_ %p -> %p\n", q, p));
	*(struct __ns6__IncrementStatistic_*)p = *(struct __ns6__IncrementStatistic_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, struct __ns6__LookupServerByGameTypeClientExtension_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByGameTypeClientExtension = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, const struct __ns6__LookupServerByGameTypeClientExtension_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, &a->ns1__LookupServerByGameTypeClientExtension);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByGameTypeClientExtension_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, "ns1:LookupServerByGameTypeClientExtension", -1, &a->ns1__LookupServerByGameTypeClientExtension, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameTypeClientExtension_ * SOAP_FMAC4 soap_in___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, const char *tag, struct __ns6__LookupServerByGameTypeClientExtension_ *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByGameTypeClientExtension = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByGameTypeClientExtension_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension_, sizeof(struct __ns6__LookupServerByGameTypeClientExtension_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByGameTypeClientExtension_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByGameTypeClientExtension && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, "ns1:LookupServerByGameTypeClientExtension", &a->ns1__LookupServerByGameTypeClientExtension, ""))
				{	soap_flag_ns1__LookupServerByGameTypeClientExtension--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, const struct __ns6__LookupServerByGameTypeClientExtension_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByGameTypeClientExtension_(soap, tag?tag:"-ns6:LookupServerByGameTypeClientExtension", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameTypeClientExtension_ * SOAP_FMAC4 soap_get___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, struct __ns6__LookupServerByGameTypeClientExtension_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByGameTypeClientExtension_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByGameTypeClientExtension_ * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByGameTypeClientExtension_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByGameTypeClientExtension_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByGameTypeClientExtension_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByGameTypeClientExtension_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByGameTypeClientExtension_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByGameTypeClientExtension_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByGameTypeClientExtension_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByGameTypeClientExtension_ %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByGameTypeClientExtension_*)p = *(struct __ns6__LookupServerByGameTypeClientExtension_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetClientExtensionUpdate_(struct soap *soap, struct __ns6__GetClientExtensionUpdate_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetClientExtensionUpdate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetClientExtensionUpdate_(struct soap *soap, const struct __ns6__GetClientExtensionUpdate_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetClientExtensionUpdate(soap, &a->ns1__GetClientExtensionUpdate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetClientExtensionUpdate_(struct soap *soap, const char *tag, int id, const struct __ns6__GetClientExtensionUpdate_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdate", -1, &a->ns1__GetClientExtensionUpdate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetClientExtensionUpdate_ * SOAP_FMAC4 soap_in___ns6__GetClientExtensionUpdate_(struct soap *soap, const char *tag, struct __ns6__GetClientExtensionUpdate_ *a, const char *type)
{
	size_t soap_flag_ns1__GetClientExtensionUpdate = 1;
	short soap_flag;
	a = (struct __ns6__GetClientExtensionUpdate_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetClientExtensionUpdate_, sizeof(struct __ns6__GetClientExtensionUpdate_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetClientExtensionUpdate_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetClientExtensionUpdate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdate", &a->ns1__GetClientExtensionUpdate, ""))
				{	soap_flag_ns1__GetClientExtensionUpdate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetClientExtensionUpdate_(struct soap *soap, const struct __ns6__GetClientExtensionUpdate_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetClientExtensionUpdate_(soap, tag?tag:"-ns6:GetClientExtensionUpdate", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetClientExtensionUpdate_ * SOAP_FMAC4 soap_get___ns6__GetClientExtensionUpdate_(struct soap *soap, struct __ns6__GetClientExtensionUpdate_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetClientExtensionUpdate_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetClientExtensionUpdate_ * SOAP_FMAC2 soap_instantiate___ns6__GetClientExtensionUpdate_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetClientExtensionUpdate_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetClientExtensionUpdate_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetClientExtensionUpdate_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetClientExtensionUpdate_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetClientExtensionUpdate_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetClientExtensionUpdate_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetClientExtensionUpdate_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetClientExtensionUpdate_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetClientExtensionUpdate_ %p -> %p\n", q, p));
	*(struct __ns6__GetClientExtensionUpdate_*)p = *(struct __ns6__GetClientExtensionUpdate_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByGameType_(struct soap *soap, struct __ns6__LookupServerByGameType_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByGameType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByGameType_(struct soap *soap, const struct __ns6__LookupServerByGameType_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByGameType(soap, &a->ns1__LookupServerByGameType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByGameType_(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByGameType_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByGameType(soap, "ns1:LookupServerByGameType", -1, &a->ns1__LookupServerByGameType, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameType_ * SOAP_FMAC4 soap_in___ns6__LookupServerByGameType_(struct soap *soap, const char *tag, struct __ns6__LookupServerByGameType_ *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByGameType = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByGameType_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByGameType_, sizeof(struct __ns6__LookupServerByGameType_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByGameType_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByGameType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByGameType(soap, "ns1:LookupServerByGameType", &a->ns1__LookupServerByGameType, ""))
				{	soap_flag_ns1__LookupServerByGameType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByGameType_(struct soap *soap, const struct __ns6__LookupServerByGameType_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByGameType_(soap, tag?tag:"-ns6:LookupServerByGameType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameType_ * SOAP_FMAC4 soap_get___ns6__LookupServerByGameType_(struct soap *soap, struct __ns6__LookupServerByGameType_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByGameType_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByGameType_ * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByGameType_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByGameType_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByGameType_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByGameType_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByGameType_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByGameType_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByGameType_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByGameType_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByGameType_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByGameType_ %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByGameType_*)p = *(struct __ns6__LookupServerByGameType_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__RegisterPendingServers_(struct soap *soap, struct __ns6__RegisterPendingServers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RegisterPendingServers = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__RegisterPendingServers_(struct soap *soap, const struct __ns6__RegisterPendingServers_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RegisterPendingServers(soap, &a->ns1__RegisterPendingServers);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__RegisterPendingServers_(struct soap *soap, const char *tag, int id, const struct __ns6__RegisterPendingServers_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__RegisterPendingServers(soap, "ns1:RegisterPendingServers", -1, &a->ns1__RegisterPendingServers, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__RegisterPendingServers_ * SOAP_FMAC4 soap_in___ns6__RegisterPendingServers_(struct soap *soap, const char *tag, struct __ns6__RegisterPendingServers_ *a, const char *type)
{
	size_t soap_flag_ns1__RegisterPendingServers = 1;
	short soap_flag;
	a = (struct __ns6__RegisterPendingServers_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__RegisterPendingServers_, sizeof(struct __ns6__RegisterPendingServers_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__RegisterPendingServers_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RegisterPendingServers && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RegisterPendingServers(soap, "ns1:RegisterPendingServers", &a->ns1__RegisterPendingServers, ""))
				{	soap_flag_ns1__RegisterPendingServers--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__RegisterPendingServers_(struct soap *soap, const struct __ns6__RegisterPendingServers_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__RegisterPendingServers_(soap, tag?tag:"-ns6:RegisterPendingServers", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__RegisterPendingServers_ * SOAP_FMAC4 soap_get___ns6__RegisterPendingServers_(struct soap *soap, struct __ns6__RegisterPendingServers_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__RegisterPendingServers_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__RegisterPendingServers_ * SOAP_FMAC2 soap_instantiate___ns6__RegisterPendingServers_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__RegisterPendingServers_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__RegisterPendingServers_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__RegisterPendingServers_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__RegisterPendingServers_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__RegisterPendingServers_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__RegisterPendingServers_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__RegisterPendingServers_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__RegisterPendingServers_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__RegisterPendingServers_ %p -> %p\n", q, p));
	*(struct __ns6__RegisterPendingServers_*)p = *(struct __ns6__RegisterPendingServers_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByModule_(struct soap *soap, struct __ns6__LookupServerByModule_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByModule = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByModule_(struct soap *soap, const struct __ns6__LookupServerByModule_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByModule(soap, &a->ns1__LookupServerByModule);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByModule_(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByModule_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByModule(soap, "ns1:LookupServerByModule", -1, &a->ns1__LookupServerByModule, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByModule_ * SOAP_FMAC4 soap_in___ns6__LookupServerByModule_(struct soap *soap, const char *tag, struct __ns6__LookupServerByModule_ *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByModule = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByModule_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByModule_, sizeof(struct __ns6__LookupServerByModule_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByModule_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByModule && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByModule(soap, "ns1:LookupServerByModule", &a->ns1__LookupServerByModule, ""))
				{	soap_flag_ns1__LookupServerByModule--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByModule_(struct soap *soap, const struct __ns6__LookupServerByModule_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByModule_(soap, tag?tag:"-ns6:LookupServerByModule", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByModule_ * SOAP_FMAC4 soap_get___ns6__LookupServerByModule_(struct soap *soap, struct __ns6__LookupServerByModule_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByModule_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByModule_ * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByModule_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByModule_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByModule_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByModule_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByModule_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByModule_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByModule_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByModule_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByModule_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByModule_ %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByModule_*)p = *(struct __ns6__LookupServerByModule_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetSupportedProductList_(struct soap *soap, struct __ns6__GetSupportedProductList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSupportedProductList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetSupportedProductList_(struct soap *soap, const struct __ns6__GetSupportedProductList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetSupportedProductList(soap, &a->ns1__GetSupportedProductList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetSupportedProductList_(struct soap *soap, const char *tag, int id, const struct __ns6__GetSupportedProductList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetSupportedProductList(soap, "ns1:GetSupportedProductList", -1, &a->ns1__GetSupportedProductList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetSupportedProductList_ * SOAP_FMAC4 soap_in___ns6__GetSupportedProductList_(struct soap *soap, const char *tag, struct __ns6__GetSupportedProductList_ *a, const char *type)
{
	size_t soap_flag_ns1__GetSupportedProductList = 1;
	short soap_flag;
	a = (struct __ns6__GetSupportedProductList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetSupportedProductList_, sizeof(struct __ns6__GetSupportedProductList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetSupportedProductList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSupportedProductList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSupportedProductList(soap, "ns1:GetSupportedProductList", &a->ns1__GetSupportedProductList, ""))
				{	soap_flag_ns1__GetSupportedProductList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetSupportedProductList_(struct soap *soap, const struct __ns6__GetSupportedProductList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetSupportedProductList_(soap, tag?tag:"-ns6:GetSupportedProductList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetSupportedProductList_ * SOAP_FMAC4 soap_get___ns6__GetSupportedProductList_(struct soap *soap, struct __ns6__GetSupportedProductList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetSupportedProductList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetSupportedProductList_ * SOAP_FMAC2 soap_instantiate___ns6__GetSupportedProductList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetSupportedProductList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetSupportedProductList_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetSupportedProductList_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetSupportedProductList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetSupportedProductList_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetSupportedProductList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetSupportedProductList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetSupportedProductList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetSupportedProductList_ %p -> %p\n", q, p));
	*(struct __ns6__GetSupportedProductList_*)p = *(struct __ns6__GetSupportedProductList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetOnlineUserCount_(struct soap *soap, struct __ns6__GetOnlineUserCount_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetOnlineUserCount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetOnlineUserCount_(struct soap *soap, const struct __ns6__GetOnlineUserCount_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetOnlineUserCount(soap, &a->ns1__GetOnlineUserCount);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetOnlineUserCount_(struct soap *soap, const char *tag, int id, const struct __ns6__GetOnlineUserCount_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetOnlineUserCount(soap, "ns1:GetOnlineUserCount", -1, &a->ns1__GetOnlineUserCount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineUserCount_ * SOAP_FMAC4 soap_in___ns6__GetOnlineUserCount_(struct soap *soap, const char *tag, struct __ns6__GetOnlineUserCount_ *a, const char *type)
{
	size_t soap_flag_ns1__GetOnlineUserCount = 1;
	short soap_flag;
	a = (struct __ns6__GetOnlineUserCount_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetOnlineUserCount_, sizeof(struct __ns6__GetOnlineUserCount_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetOnlineUserCount_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetOnlineUserCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetOnlineUserCount(soap, "ns1:GetOnlineUserCount", &a->ns1__GetOnlineUserCount, ""))
				{	soap_flag_ns1__GetOnlineUserCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetOnlineUserCount_(struct soap *soap, const struct __ns6__GetOnlineUserCount_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetOnlineUserCount_(soap, tag?tag:"-ns6:GetOnlineUserCount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineUserCount_ * SOAP_FMAC4 soap_get___ns6__GetOnlineUserCount_(struct soap *soap, struct __ns6__GetOnlineUserCount_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetOnlineUserCount_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetOnlineUserCount_ * SOAP_FMAC2 soap_instantiate___ns6__GetOnlineUserCount_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetOnlineUserCount_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetOnlineUserCount_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetOnlineUserCount_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetOnlineUserCount_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetOnlineUserCount_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetOnlineUserCount_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetOnlineUserCount_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetOnlineUserCount_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetOnlineUserCount_ %p -> %p\n", q, p));
	*(struct __ns6__GetOnlineUserCount_*)p = *(struct __ns6__GetOnlineUserCount_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetOnlineServerList_(struct soap *soap, struct __ns6__GetOnlineServerList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetOnlineServerList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetOnlineServerList_(struct soap *soap, const struct __ns6__GetOnlineServerList_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetOnlineServerList(soap, &a->ns1__GetOnlineServerList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetOnlineServerList_(struct soap *soap, const char *tag, int id, const struct __ns6__GetOnlineServerList_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetOnlineServerList(soap, "ns1:GetOnlineServerList", -1, &a->ns1__GetOnlineServerList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineServerList_ * SOAP_FMAC4 soap_in___ns6__GetOnlineServerList_(struct soap *soap, const char *tag, struct __ns6__GetOnlineServerList_ *a, const char *type)
{
	size_t soap_flag_ns1__GetOnlineServerList = 1;
	short soap_flag;
	a = (struct __ns6__GetOnlineServerList_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetOnlineServerList_, sizeof(struct __ns6__GetOnlineServerList_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetOnlineServerList_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetOnlineServerList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetOnlineServerList(soap, "ns1:GetOnlineServerList", &a->ns1__GetOnlineServerList, ""))
				{	soap_flag_ns1__GetOnlineServerList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetOnlineServerList_(struct soap *soap, const struct __ns6__GetOnlineServerList_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetOnlineServerList_(soap, tag?tag:"-ns6:GetOnlineServerList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineServerList_ * SOAP_FMAC4 soap_get___ns6__GetOnlineServerList_(struct soap *soap, struct __ns6__GetOnlineServerList_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetOnlineServerList_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetOnlineServerList_ * SOAP_FMAC2 soap_instantiate___ns6__GetOnlineServerList_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetOnlineServerList_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetOnlineServerList_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetOnlineServerList_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetOnlineServerList_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetOnlineServerList_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetOnlineServerList_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetOnlineServerList_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetOnlineServerList_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetOnlineServerList_ %p -> %p\n", q, p));
	*(struct __ns6__GetOnlineServerList_*)p = *(struct __ns6__GetOnlineServerList_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByAddress_(struct soap *soap, struct __ns6__LookupServerByAddress_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByAddress = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByAddress_(struct soap *soap, const struct __ns6__LookupServerByAddress_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByAddress(soap, &a->ns1__LookupServerByAddress);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByAddress_(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByAddress_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByAddress(soap, "ns1:LookupServerByAddress", -1, &a->ns1__LookupServerByAddress, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByAddress_ * SOAP_FMAC4 soap_in___ns6__LookupServerByAddress_(struct soap *soap, const char *tag, struct __ns6__LookupServerByAddress_ *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByAddress = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByAddress_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByAddress_, sizeof(struct __ns6__LookupServerByAddress_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByAddress_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByAddress && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByAddress(soap, "ns1:LookupServerByAddress", &a->ns1__LookupServerByAddress, ""))
				{	soap_flag_ns1__LookupServerByAddress--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByAddress_(struct soap *soap, const struct __ns6__LookupServerByAddress_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByAddress_(soap, tag?tag:"-ns6:LookupServerByAddress", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByAddress_ * SOAP_FMAC4 soap_get___ns6__LookupServerByAddress_(struct soap *soap, struct __ns6__LookupServerByAddress_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByAddress_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByAddress_ * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByAddress_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByAddress_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByAddress_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByAddress_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByAddress_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByAddress_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByAddress_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByAddress_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByAddress_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByAddress_ %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByAddress_*)p = *(struct __ns6__LookupServerByAddress_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByName_(struct soap *soap, struct __ns6__LookupServerByName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByName_(struct soap *soap, const struct __ns6__LookupServerByName_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByName(soap, &a->ns1__LookupServerByName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByName_(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByName_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByName(soap, "ns1:LookupServerByName", -1, &a->ns1__LookupServerByName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByName_ * SOAP_FMAC4 soap_in___ns6__LookupServerByName_(struct soap *soap, const char *tag, struct __ns6__LookupServerByName_ *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByName = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByName_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByName_, sizeof(struct __ns6__LookupServerByName_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByName_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByName(soap, "ns1:LookupServerByName", &a->ns1__LookupServerByName, ""))
				{	soap_flag_ns1__LookupServerByName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByName_(struct soap *soap, const struct __ns6__LookupServerByName_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByName_(soap, tag?tag:"-ns6:LookupServerByName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByName_ * SOAP_FMAC4 soap_get___ns6__LookupServerByName_(struct soap *soap, struct __ns6__LookupServerByName_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByName_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByName_ * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByName_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByName_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByName_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByName_);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByName_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByName_, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByName_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByName_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByName_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByName_ %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByName_*)p = *(struct __ns6__LookupServerByName_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__IncrementStatistic(struct soap *soap, struct __ns6__IncrementStatistic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__IncrementStatistic = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__IncrementStatistic(struct soap *soap, const struct __ns6__IncrementStatistic *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__IncrementStatistic(soap, &a->ns1__IncrementStatistic);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__IncrementStatistic(struct soap *soap, const char *tag, int id, const struct __ns6__IncrementStatistic *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__IncrementStatistic(soap, "ns1:IncrementStatistic", -1, &a->ns1__IncrementStatistic, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__IncrementStatistic * SOAP_FMAC4 soap_in___ns6__IncrementStatistic(struct soap *soap, const char *tag, struct __ns6__IncrementStatistic *a, const char *type)
{
	size_t soap_flag_ns1__IncrementStatistic = 1;
	short soap_flag;
	a = (struct __ns6__IncrementStatistic *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__IncrementStatistic, sizeof(struct __ns6__IncrementStatistic), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__IncrementStatistic(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__IncrementStatistic && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__IncrementStatistic(soap, "ns1:IncrementStatistic", &a->ns1__IncrementStatistic, ""))
				{	soap_flag_ns1__IncrementStatistic--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__IncrementStatistic(struct soap *soap, const struct __ns6__IncrementStatistic *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__IncrementStatistic(soap, tag?tag:"-ns6:IncrementStatistic", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__IncrementStatistic * SOAP_FMAC4 soap_get___ns6__IncrementStatistic(struct soap *soap, struct __ns6__IncrementStatistic *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__IncrementStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__IncrementStatistic * SOAP_FMAC2 soap_instantiate___ns6__IncrementStatistic(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__IncrementStatistic(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__IncrementStatistic, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__IncrementStatistic);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__IncrementStatistic);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__IncrementStatistic, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__IncrementStatistic);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__IncrementStatistic*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__IncrementStatistic(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__IncrementStatistic %p -> %p\n", q, p));
	*(struct __ns6__IncrementStatistic*)p = *(struct __ns6__IncrementStatistic*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, struct __ns6__LookupServerByGameTypeClientExtension *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByGameTypeClientExtension = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, const struct __ns6__LookupServerByGameTypeClientExtension *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, &a->ns1__LookupServerByGameTypeClientExtension);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByGameTypeClientExtension *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, "ns1:LookupServerByGameTypeClientExtension", -1, &a->ns1__LookupServerByGameTypeClientExtension, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameTypeClientExtension * SOAP_FMAC4 soap_in___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, struct __ns6__LookupServerByGameTypeClientExtension *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByGameTypeClientExtension = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByGameTypeClientExtension *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension, sizeof(struct __ns6__LookupServerByGameTypeClientExtension), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByGameTypeClientExtension(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByGameTypeClientExtension && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, "ns1:LookupServerByGameTypeClientExtension", &a->ns1__LookupServerByGameTypeClientExtension, ""))
				{	soap_flag_ns1__LookupServerByGameTypeClientExtension--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, const struct __ns6__LookupServerByGameTypeClientExtension *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByGameTypeClientExtension(soap, tag?tag:"-ns6:LookupServerByGameTypeClientExtension", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameTypeClientExtension * SOAP_FMAC4 soap_get___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, struct __ns6__LookupServerByGameTypeClientExtension *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByGameTypeClientExtension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByGameTypeClientExtension * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByGameTypeClientExtension(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByGameTypeClientExtension, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByGameTypeClientExtension);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByGameTypeClientExtension);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByGameTypeClientExtension, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByGameTypeClientExtension);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByGameTypeClientExtension*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByGameTypeClientExtension(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByGameTypeClientExtension %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByGameTypeClientExtension*)p = *(struct __ns6__LookupServerByGameTypeClientExtension*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetClientExtensionUpdate(struct soap *soap, struct __ns6__GetClientExtensionUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetClientExtensionUpdate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetClientExtensionUpdate(struct soap *soap, const struct __ns6__GetClientExtensionUpdate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetClientExtensionUpdate(soap, &a->ns1__GetClientExtensionUpdate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetClientExtensionUpdate(struct soap *soap, const char *tag, int id, const struct __ns6__GetClientExtensionUpdate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdate", -1, &a->ns1__GetClientExtensionUpdate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetClientExtensionUpdate * SOAP_FMAC4 soap_in___ns6__GetClientExtensionUpdate(struct soap *soap, const char *tag, struct __ns6__GetClientExtensionUpdate *a, const char *type)
{
	size_t soap_flag_ns1__GetClientExtensionUpdate = 1;
	short soap_flag;
	a = (struct __ns6__GetClientExtensionUpdate *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetClientExtensionUpdate, sizeof(struct __ns6__GetClientExtensionUpdate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetClientExtensionUpdate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetClientExtensionUpdate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetClientExtensionUpdate(soap, "ns1:GetClientExtensionUpdate", &a->ns1__GetClientExtensionUpdate, ""))
				{	soap_flag_ns1__GetClientExtensionUpdate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetClientExtensionUpdate(struct soap *soap, const struct __ns6__GetClientExtensionUpdate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetClientExtensionUpdate(soap, tag?tag:"-ns6:GetClientExtensionUpdate", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetClientExtensionUpdate * SOAP_FMAC4 soap_get___ns6__GetClientExtensionUpdate(struct soap *soap, struct __ns6__GetClientExtensionUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetClientExtensionUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetClientExtensionUpdate * SOAP_FMAC2 soap_instantiate___ns6__GetClientExtensionUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetClientExtensionUpdate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetClientExtensionUpdate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetClientExtensionUpdate);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetClientExtensionUpdate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetClientExtensionUpdate, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetClientExtensionUpdate);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetClientExtensionUpdate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetClientExtensionUpdate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetClientExtensionUpdate %p -> %p\n", q, p));
	*(struct __ns6__GetClientExtensionUpdate*)p = *(struct __ns6__GetClientExtensionUpdate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByGameType(struct soap *soap, struct __ns6__LookupServerByGameType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByGameType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByGameType(struct soap *soap, const struct __ns6__LookupServerByGameType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByGameType(soap, &a->ns1__LookupServerByGameType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByGameType(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByGameType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByGameType(soap, "ns1:LookupServerByGameType", -1, &a->ns1__LookupServerByGameType, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameType * SOAP_FMAC4 soap_in___ns6__LookupServerByGameType(struct soap *soap, const char *tag, struct __ns6__LookupServerByGameType *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByGameType = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByGameType *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByGameType, sizeof(struct __ns6__LookupServerByGameType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByGameType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByGameType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByGameType(soap, "ns1:LookupServerByGameType", &a->ns1__LookupServerByGameType, ""))
				{	soap_flag_ns1__LookupServerByGameType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByGameType(struct soap *soap, const struct __ns6__LookupServerByGameType *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByGameType(soap, tag?tag:"-ns6:LookupServerByGameType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByGameType * SOAP_FMAC4 soap_get___ns6__LookupServerByGameType(struct soap *soap, struct __ns6__LookupServerByGameType *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByGameType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByGameType * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByGameType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByGameType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByGameType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByGameType);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByGameType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByGameType, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByGameType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByGameType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByGameType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByGameType %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByGameType*)p = *(struct __ns6__LookupServerByGameType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__RegisterPendingServers(struct soap *soap, struct __ns6__RegisterPendingServers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RegisterPendingServers = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__RegisterPendingServers(struct soap *soap, const struct __ns6__RegisterPendingServers *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RegisterPendingServers(soap, &a->ns1__RegisterPendingServers);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__RegisterPendingServers(struct soap *soap, const char *tag, int id, const struct __ns6__RegisterPendingServers *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__RegisterPendingServers(soap, "ns1:RegisterPendingServers", -1, &a->ns1__RegisterPendingServers, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__RegisterPendingServers * SOAP_FMAC4 soap_in___ns6__RegisterPendingServers(struct soap *soap, const char *tag, struct __ns6__RegisterPendingServers *a, const char *type)
{
	size_t soap_flag_ns1__RegisterPendingServers = 1;
	short soap_flag;
	a = (struct __ns6__RegisterPendingServers *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__RegisterPendingServers, sizeof(struct __ns6__RegisterPendingServers), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__RegisterPendingServers(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RegisterPendingServers && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RegisterPendingServers(soap, "ns1:RegisterPendingServers", &a->ns1__RegisterPendingServers, ""))
				{	soap_flag_ns1__RegisterPendingServers--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__RegisterPendingServers(struct soap *soap, const struct __ns6__RegisterPendingServers *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__RegisterPendingServers(soap, tag?tag:"-ns6:RegisterPendingServers", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__RegisterPendingServers * SOAP_FMAC4 soap_get___ns6__RegisterPendingServers(struct soap *soap, struct __ns6__RegisterPendingServers *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__RegisterPendingServers(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__RegisterPendingServers * SOAP_FMAC2 soap_instantiate___ns6__RegisterPendingServers(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__RegisterPendingServers(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__RegisterPendingServers, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__RegisterPendingServers);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__RegisterPendingServers);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__RegisterPendingServers, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__RegisterPendingServers);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__RegisterPendingServers*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__RegisterPendingServers(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__RegisterPendingServers %p -> %p\n", q, p));
	*(struct __ns6__RegisterPendingServers*)p = *(struct __ns6__RegisterPendingServers*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByModule(struct soap *soap, struct __ns6__LookupServerByModule *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByModule = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByModule(struct soap *soap, const struct __ns6__LookupServerByModule *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByModule(soap, &a->ns1__LookupServerByModule);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByModule(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByModule *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByModule(soap, "ns1:LookupServerByModule", -1, &a->ns1__LookupServerByModule, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByModule * SOAP_FMAC4 soap_in___ns6__LookupServerByModule(struct soap *soap, const char *tag, struct __ns6__LookupServerByModule *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByModule = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByModule *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByModule, sizeof(struct __ns6__LookupServerByModule), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByModule(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByModule && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByModule(soap, "ns1:LookupServerByModule", &a->ns1__LookupServerByModule, ""))
				{	soap_flag_ns1__LookupServerByModule--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByModule(struct soap *soap, const struct __ns6__LookupServerByModule *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByModule(soap, tag?tag:"-ns6:LookupServerByModule", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByModule * SOAP_FMAC4 soap_get___ns6__LookupServerByModule(struct soap *soap, struct __ns6__LookupServerByModule *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByModule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByModule * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByModule(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByModule(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByModule, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByModule);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByModule);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByModule, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByModule);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByModule*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByModule(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByModule %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByModule*)p = *(struct __ns6__LookupServerByModule*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetSupportedProductList(struct soap *soap, struct __ns6__GetSupportedProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetSupportedProductList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetSupportedProductList(struct soap *soap, const struct __ns6__GetSupportedProductList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetSupportedProductList(soap, &a->ns1__GetSupportedProductList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetSupportedProductList(struct soap *soap, const char *tag, int id, const struct __ns6__GetSupportedProductList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetSupportedProductList(soap, "ns1:GetSupportedProductList", -1, &a->ns1__GetSupportedProductList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetSupportedProductList * SOAP_FMAC4 soap_in___ns6__GetSupportedProductList(struct soap *soap, const char *tag, struct __ns6__GetSupportedProductList *a, const char *type)
{
	size_t soap_flag_ns1__GetSupportedProductList = 1;
	short soap_flag;
	a = (struct __ns6__GetSupportedProductList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetSupportedProductList, sizeof(struct __ns6__GetSupportedProductList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetSupportedProductList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetSupportedProductList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetSupportedProductList(soap, "ns1:GetSupportedProductList", &a->ns1__GetSupportedProductList, ""))
				{	soap_flag_ns1__GetSupportedProductList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetSupportedProductList(struct soap *soap, const struct __ns6__GetSupportedProductList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetSupportedProductList(soap, tag?tag:"-ns6:GetSupportedProductList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetSupportedProductList * SOAP_FMAC4 soap_get___ns6__GetSupportedProductList(struct soap *soap, struct __ns6__GetSupportedProductList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetSupportedProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetSupportedProductList * SOAP_FMAC2 soap_instantiate___ns6__GetSupportedProductList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetSupportedProductList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetSupportedProductList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetSupportedProductList);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetSupportedProductList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetSupportedProductList, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetSupportedProductList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetSupportedProductList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetSupportedProductList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetSupportedProductList %p -> %p\n", q, p));
	*(struct __ns6__GetSupportedProductList*)p = *(struct __ns6__GetSupportedProductList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetOnlineUserCount(struct soap *soap, struct __ns6__GetOnlineUserCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetOnlineUserCount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetOnlineUserCount(struct soap *soap, const struct __ns6__GetOnlineUserCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetOnlineUserCount(soap, &a->ns1__GetOnlineUserCount);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetOnlineUserCount(struct soap *soap, const char *tag, int id, const struct __ns6__GetOnlineUserCount *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetOnlineUserCount(soap, "ns1:GetOnlineUserCount", -1, &a->ns1__GetOnlineUserCount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineUserCount * SOAP_FMAC4 soap_in___ns6__GetOnlineUserCount(struct soap *soap, const char *tag, struct __ns6__GetOnlineUserCount *a, const char *type)
{
	size_t soap_flag_ns1__GetOnlineUserCount = 1;
	short soap_flag;
	a = (struct __ns6__GetOnlineUserCount *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetOnlineUserCount, sizeof(struct __ns6__GetOnlineUserCount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetOnlineUserCount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetOnlineUserCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetOnlineUserCount(soap, "ns1:GetOnlineUserCount", &a->ns1__GetOnlineUserCount, ""))
				{	soap_flag_ns1__GetOnlineUserCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetOnlineUserCount(struct soap *soap, const struct __ns6__GetOnlineUserCount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetOnlineUserCount(soap, tag?tag:"-ns6:GetOnlineUserCount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineUserCount * SOAP_FMAC4 soap_get___ns6__GetOnlineUserCount(struct soap *soap, struct __ns6__GetOnlineUserCount *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetOnlineUserCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetOnlineUserCount * SOAP_FMAC2 soap_instantiate___ns6__GetOnlineUserCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetOnlineUserCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetOnlineUserCount, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetOnlineUserCount);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetOnlineUserCount);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetOnlineUserCount, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetOnlineUserCount);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetOnlineUserCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetOnlineUserCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetOnlineUserCount %p -> %p\n", q, p));
	*(struct __ns6__GetOnlineUserCount*)p = *(struct __ns6__GetOnlineUserCount*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__GetOnlineServerList(struct soap *soap, struct __ns6__GetOnlineServerList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetOnlineServerList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__GetOnlineServerList(struct soap *soap, const struct __ns6__GetOnlineServerList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetOnlineServerList(soap, &a->ns1__GetOnlineServerList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__GetOnlineServerList(struct soap *soap, const char *tag, int id, const struct __ns6__GetOnlineServerList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__GetOnlineServerList(soap, "ns1:GetOnlineServerList", -1, &a->ns1__GetOnlineServerList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineServerList * SOAP_FMAC4 soap_in___ns6__GetOnlineServerList(struct soap *soap, const char *tag, struct __ns6__GetOnlineServerList *a, const char *type)
{
	size_t soap_flag_ns1__GetOnlineServerList = 1;
	short soap_flag;
	a = (struct __ns6__GetOnlineServerList *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__GetOnlineServerList, sizeof(struct __ns6__GetOnlineServerList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__GetOnlineServerList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetOnlineServerList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetOnlineServerList(soap, "ns1:GetOnlineServerList", &a->ns1__GetOnlineServerList, ""))
				{	soap_flag_ns1__GetOnlineServerList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__GetOnlineServerList(struct soap *soap, const struct __ns6__GetOnlineServerList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__GetOnlineServerList(soap, tag?tag:"-ns6:GetOnlineServerList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__GetOnlineServerList * SOAP_FMAC4 soap_get___ns6__GetOnlineServerList(struct soap *soap, struct __ns6__GetOnlineServerList *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__GetOnlineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__GetOnlineServerList * SOAP_FMAC2 soap_instantiate___ns6__GetOnlineServerList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__GetOnlineServerList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__GetOnlineServerList, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__GetOnlineServerList);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__GetOnlineServerList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__GetOnlineServerList, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__GetOnlineServerList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__GetOnlineServerList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__GetOnlineServerList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__GetOnlineServerList %p -> %p\n", q, p));
	*(struct __ns6__GetOnlineServerList*)p = *(struct __ns6__GetOnlineServerList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByAddress(struct soap *soap, struct __ns6__LookupServerByAddress *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByAddress = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByAddress(struct soap *soap, const struct __ns6__LookupServerByAddress *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByAddress(soap, &a->ns1__LookupServerByAddress);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByAddress(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByAddress *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByAddress(soap, "ns1:LookupServerByAddress", -1, &a->ns1__LookupServerByAddress, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByAddress * SOAP_FMAC4 soap_in___ns6__LookupServerByAddress(struct soap *soap, const char *tag, struct __ns6__LookupServerByAddress *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByAddress = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByAddress *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByAddress, sizeof(struct __ns6__LookupServerByAddress), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByAddress(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByAddress && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByAddress(soap, "ns1:LookupServerByAddress", &a->ns1__LookupServerByAddress, ""))
				{	soap_flag_ns1__LookupServerByAddress--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByAddress(struct soap *soap, const struct __ns6__LookupServerByAddress *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByAddress(soap, tag?tag:"-ns6:LookupServerByAddress", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByAddress * SOAP_FMAC4 soap_get___ns6__LookupServerByAddress(struct soap *soap, struct __ns6__LookupServerByAddress *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByAddress * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByAddress(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByAddress(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByAddress, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByAddress);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByAddress);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByAddress, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByAddress);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByAddress*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByAddress(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByAddress %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByAddress*)p = *(struct __ns6__LookupServerByAddress*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns6__LookupServerByName(struct soap *soap, struct __ns6__LookupServerByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__LookupServerByName = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns6__LookupServerByName(struct soap *soap, const struct __ns6__LookupServerByName *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__LookupServerByName(soap, &a->ns1__LookupServerByName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns6__LookupServerByName(struct soap *soap, const char *tag, int id, const struct __ns6__LookupServerByName *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__LookupServerByName(soap, "ns1:LookupServerByName", -1, &a->ns1__LookupServerByName, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByName * SOAP_FMAC4 soap_in___ns6__LookupServerByName(struct soap *soap, const char *tag, struct __ns6__LookupServerByName *a, const char *type)
{
	size_t soap_flag_ns1__LookupServerByName = 1;
	short soap_flag;
	a = (struct __ns6__LookupServerByName *)soap_id_enter(soap, "", a, SOAP_TYPE___ns6__LookupServerByName, sizeof(struct __ns6__LookupServerByName), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns6__LookupServerByName(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__LookupServerByName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__LookupServerByName(soap, "ns1:LookupServerByName", &a->ns1__LookupServerByName, ""))
				{	soap_flag_ns1__LookupServerByName--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns6__LookupServerByName(struct soap *soap, const struct __ns6__LookupServerByName *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns6__LookupServerByName(soap, tag?tag:"-ns6:LookupServerByName", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns6__LookupServerByName * SOAP_FMAC4 soap_get___ns6__LookupServerByName(struct soap *soap, struct __ns6__LookupServerByName *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns6__LookupServerByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns6__LookupServerByName * SOAP_FMAC2 soap_instantiate___ns6__LookupServerByName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns6__LookupServerByName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns6__LookupServerByName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns6__LookupServerByName);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = sizeof(struct __ns6__LookupServerByName);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns6__LookupServerByName, n);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns6__LookupServerByName);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns6__LookupServerByName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns6__LookupServerByName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns6__LookupServerByName %p -> %p\n", q, p));
	*(struct __ns6__LookupServerByName*)p = *(struct __ns6__LookupServerByName*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IncrementStatisticResponse(struct soap *soap, _ns1__IncrementStatisticResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__IncrementStatisticResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IncrementStatisticResponse(struct soap *soap, const char *tag, int id, _ns1__IncrementStatisticResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__IncrementStatisticResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__IncrementStatisticResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__IncrementStatisticResponse(struct soap *soap, const char *tag, _ns1__IncrementStatisticResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__IncrementStatisticResponse **)soap_malloc(soap, sizeof(_ns1__IncrementStatisticResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__IncrementStatisticResponse *)soap_instantiate__ns1__IncrementStatisticResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__IncrementStatisticResponse ** p = (_ns1__IncrementStatisticResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__IncrementStatisticResponse, sizeof(_ns1__IncrementStatisticResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IncrementStatisticResponse(struct soap *soap, _ns1__IncrementStatisticResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__IncrementStatisticResponse);
	if (soap_out_PointerTo_ns1__IncrementStatisticResponse(soap, tag?tag:"ns1:IncrementStatisticResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__IncrementStatisticResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__IncrementStatisticResponse(struct soap *soap, _ns1__IncrementStatisticResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__IncrementStatisticResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IncrementStatistic(struct soap *soap, _ns1__IncrementStatistic *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__IncrementStatistic))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IncrementStatistic(struct soap *soap, const char *tag, int id, _ns1__IncrementStatistic *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__IncrementStatistic);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__IncrementStatistic ** SOAP_FMAC4 soap_in_PointerTo_ns1__IncrementStatistic(struct soap *soap, const char *tag, _ns1__IncrementStatistic **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__IncrementStatistic **)soap_malloc(soap, sizeof(_ns1__IncrementStatistic *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__IncrementStatistic *)soap_instantiate__ns1__IncrementStatistic(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__IncrementStatistic ** p = (_ns1__IncrementStatistic **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__IncrementStatistic, sizeof(_ns1__IncrementStatistic), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IncrementStatistic(struct soap *soap, _ns1__IncrementStatistic *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__IncrementStatistic);
	if (soap_out_PointerTo_ns1__IncrementStatistic(soap, tag?tag:"ns1:IncrementStatistic", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__IncrementStatistic ** SOAP_FMAC4 soap_get_PointerTo_ns1__IncrementStatistic(struct soap *soap, _ns1__IncrementStatistic **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__IncrementStatistic(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, _ns1__LookupServerByGameTypeClientExtensionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, const char *tag, int id, _ns1__LookupServerByGameTypeClientExtensionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtensionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeClientExtensionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByGameTypeClientExtensionResponse **)soap_malloc(soap, sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByGameTypeClientExtensionResponse *)soap_instantiate__ns1__LookupServerByGameTypeClientExtensionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByGameTypeClientExtensionResponse ** p = (_ns1__LookupServerByGameTypeClientExtensionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtensionResponse, sizeof(_ns1__LookupServerByGameTypeClientExtensionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, _ns1__LookupServerByGameTypeClientExtensionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse);
	if (soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag?tag:"ns1:LookupServerByGameTypeClientExtensionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtensionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(struct soap *soap, _ns1__LookupServerByGameTypeClientExtensionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtensionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByGameTypeClientExtension(struct soap *soap, _ns1__LookupServerByGameTypeClientExtension *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, int id, _ns1__LookupServerByGameTypeClientExtension *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtension ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtension(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeClientExtension **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByGameTypeClientExtension **)soap_malloc(soap, sizeof(_ns1__LookupServerByGameTypeClientExtension *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByGameTypeClientExtension *)soap_instantiate__ns1__LookupServerByGameTypeClientExtension(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByGameTypeClientExtension ** p = (_ns1__LookupServerByGameTypeClientExtension **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByGameTypeClientExtension, sizeof(_ns1__LookupServerByGameTypeClientExtension), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByGameTypeClientExtension(struct soap *soap, _ns1__LookupServerByGameTypeClientExtension *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeClientExtension);
	if (soap_out_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, tag?tag:"ns1:LookupServerByGameTypeClientExtension", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeClientExtension ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByGameTypeClientExtension(struct soap *soap, _ns1__LookupServerByGameTypeClientExtension **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByGameTypeClientExtension(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetClientExtensionUpdateResponse(struct soap *soap, _ns1__GetClientExtensionUpdateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetClientExtensionUpdateResponse(struct soap *soap, const char *tag, int id, _ns1__GetClientExtensionUpdateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdateResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetClientExtensionUpdateResponse(struct soap *soap, const char *tag, _ns1__GetClientExtensionUpdateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetClientExtensionUpdateResponse **)soap_malloc(soap, sizeof(_ns1__GetClientExtensionUpdateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetClientExtensionUpdateResponse *)soap_instantiate__ns1__GetClientExtensionUpdateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetClientExtensionUpdateResponse ** p = (_ns1__GetClientExtensionUpdateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetClientExtensionUpdateResponse, sizeof(_ns1__GetClientExtensionUpdateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetClientExtensionUpdateResponse(struct soap *soap, _ns1__GetClientExtensionUpdateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdateResponse);
	if (soap_out_PointerTo_ns1__GetClientExtensionUpdateResponse(soap, tag?tag:"ns1:GetClientExtensionUpdateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdateResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetClientExtensionUpdateResponse(struct soap *soap, _ns1__GetClientExtensionUpdateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetClientExtensionUpdateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetClientExtensionUpdate(struct soap *soap, _ns1__GetClientExtensionUpdate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetClientExtensionUpdate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetClientExtensionUpdate(struct soap *soap, const char *tag, int id, _ns1__GetClientExtensionUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetClientExtensionUpdate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdate ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetClientExtensionUpdate(struct soap *soap, const char *tag, _ns1__GetClientExtensionUpdate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetClientExtensionUpdate **)soap_malloc(soap, sizeof(_ns1__GetClientExtensionUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetClientExtensionUpdate *)soap_instantiate__ns1__GetClientExtensionUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetClientExtensionUpdate ** p = (_ns1__GetClientExtensionUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetClientExtensionUpdate, sizeof(_ns1__GetClientExtensionUpdate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetClientExtensionUpdate(struct soap *soap, _ns1__GetClientExtensionUpdate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetClientExtensionUpdate);
	if (soap_out_PointerTo_ns1__GetClientExtensionUpdate(soap, tag?tag:"ns1:GetClientExtensionUpdate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetClientExtensionUpdate ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetClientExtensionUpdate(struct soap *soap, _ns1__GetClientExtensionUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetClientExtensionUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByGameTypeResponse(struct soap *soap, _ns1__LookupServerByGameTypeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByGameTypeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByGameTypeResponse(struct soap *soap, const char *tag, int id, _ns1__LookupServerByGameTypeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByGameTypeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByGameTypeResponse(struct soap *soap, const char *tag, _ns1__LookupServerByGameTypeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByGameTypeResponse **)soap_malloc(soap, sizeof(_ns1__LookupServerByGameTypeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByGameTypeResponse *)soap_instantiate__ns1__LookupServerByGameTypeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByGameTypeResponse ** p = (_ns1__LookupServerByGameTypeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByGameTypeResponse, sizeof(_ns1__LookupServerByGameTypeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByGameTypeResponse(struct soap *soap, _ns1__LookupServerByGameTypeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByGameTypeResponse);
	if (soap_out_PointerTo_ns1__LookupServerByGameTypeResponse(soap, tag?tag:"ns1:LookupServerByGameTypeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByGameTypeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByGameTypeResponse(struct soap *soap, _ns1__LookupServerByGameTypeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByGameTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByGameType(struct soap *soap, _ns1__LookupServerByGameType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByGameType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByGameType(struct soap *soap, const char *tag, int id, _ns1__LookupServerByGameType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByGameType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByGameType ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByGameType(struct soap *soap, const char *tag, _ns1__LookupServerByGameType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByGameType **)soap_malloc(soap, sizeof(_ns1__LookupServerByGameType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByGameType *)soap_instantiate__ns1__LookupServerByGameType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByGameType ** p = (_ns1__LookupServerByGameType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByGameType, sizeof(_ns1__LookupServerByGameType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByGameType(struct soap *soap, _ns1__LookupServerByGameType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByGameType);
	if (soap_out_PointerTo_ns1__LookupServerByGameType(soap, tag?tag:"ns1:LookupServerByGameType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByGameType ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByGameType(struct soap *soap, _ns1__LookupServerByGameType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByGameType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterPendingServersResponse(struct soap *soap, _ns1__RegisterPendingServersResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RegisterPendingServersResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterPendingServersResponse(struct soap *soap, const char *tag, int id, _ns1__RegisterPendingServersResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RegisterPendingServersResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServersResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterPendingServersResponse(struct soap *soap, const char *tag, _ns1__RegisterPendingServersResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RegisterPendingServersResponse **)soap_malloc(soap, sizeof(_ns1__RegisterPendingServersResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RegisterPendingServersResponse *)soap_instantiate__ns1__RegisterPendingServersResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RegisterPendingServersResponse ** p = (_ns1__RegisterPendingServersResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RegisterPendingServersResponse, sizeof(_ns1__RegisterPendingServersResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterPendingServersResponse(struct soap *soap, _ns1__RegisterPendingServersResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RegisterPendingServersResponse);
	if (soap_out_PointerTo_ns1__RegisterPendingServersResponse(soap, tag?tag:"ns1:RegisterPendingServersResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__RegisterPendingServersResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterPendingServersResponse(struct soap *soap, _ns1__RegisterPendingServersResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RegisterPendingServersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RegisterPendingServers(struct soap *soap, _ns1__RegisterPendingServers *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RegisterPendingServers))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RegisterPendingServers(struct soap *soap, const char *tag, int id, _ns1__RegisterPendingServers *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RegisterPendingServers);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RegisterPendingServers ** SOAP_FMAC4 soap_in_PointerTo_ns1__RegisterPendingServers(struct soap *soap, const char *tag, _ns1__RegisterPendingServers **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RegisterPendingServers **)soap_malloc(soap, sizeof(_ns1__RegisterPendingServers *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RegisterPendingServers *)soap_instantiate__ns1__RegisterPendingServers(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RegisterPendingServers ** p = (_ns1__RegisterPendingServers **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RegisterPendingServers, sizeof(_ns1__RegisterPendingServers), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RegisterPendingServers(struct soap *soap, _ns1__RegisterPendingServers *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RegisterPendingServers);
	if (soap_out_PointerTo_ns1__RegisterPendingServers(soap, tag?tag:"ns1:RegisterPendingServers", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__RegisterPendingServers ** SOAP_FMAC4 soap_get_PointerTo_ns1__RegisterPendingServers(struct soap *soap, _ns1__RegisterPendingServers **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RegisterPendingServers(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByModuleResponse(struct soap *soap, _ns1__LookupServerByModuleResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByModuleResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByModuleResponse(struct soap *soap, const char *tag, int id, _ns1__LookupServerByModuleResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByModuleResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByModuleResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByModuleResponse(struct soap *soap, const char *tag, _ns1__LookupServerByModuleResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByModuleResponse **)soap_malloc(soap, sizeof(_ns1__LookupServerByModuleResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByModuleResponse *)soap_instantiate__ns1__LookupServerByModuleResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByModuleResponse ** p = (_ns1__LookupServerByModuleResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByModuleResponse, sizeof(_ns1__LookupServerByModuleResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByModuleResponse(struct soap *soap, _ns1__LookupServerByModuleResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByModuleResponse);
	if (soap_out_PointerTo_ns1__LookupServerByModuleResponse(soap, tag?tag:"ns1:LookupServerByModuleResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByModuleResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByModuleResponse(struct soap *soap, _ns1__LookupServerByModuleResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByModuleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByModule(struct soap *soap, _ns1__LookupServerByModule *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByModule))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByModule(struct soap *soap, const char *tag, int id, _ns1__LookupServerByModule *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByModule);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByModule ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByModule(struct soap *soap, const char *tag, _ns1__LookupServerByModule **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByModule **)soap_malloc(soap, sizeof(_ns1__LookupServerByModule *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByModule *)soap_instantiate__ns1__LookupServerByModule(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByModule ** p = (_ns1__LookupServerByModule **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByModule, sizeof(_ns1__LookupServerByModule), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByModule(struct soap *soap, _ns1__LookupServerByModule *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByModule);
	if (soap_out_PointerTo_ns1__LookupServerByModule(soap, tag?tag:"ns1:LookupServerByModule", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByModule ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByModule(struct soap *soap, _ns1__LookupServerByModule **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByModule(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSupportedProductListResponse(struct soap *soap, _ns1__GetSupportedProductListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSupportedProductListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSupportedProductListResponse(struct soap *soap, const char *tag, int id, _ns1__GetSupportedProductListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSupportedProductListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSupportedProductListResponse(struct soap *soap, const char *tag, _ns1__GetSupportedProductListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSupportedProductListResponse **)soap_malloc(soap, sizeof(_ns1__GetSupportedProductListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSupportedProductListResponse *)soap_instantiate__ns1__GetSupportedProductListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSupportedProductListResponse ** p = (_ns1__GetSupportedProductListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSupportedProductListResponse, sizeof(_ns1__GetSupportedProductListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSupportedProductListResponse(struct soap *soap, _ns1__GetSupportedProductListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetSupportedProductListResponse);
	if (soap_out_PointerTo_ns1__GetSupportedProductListResponse(soap, tag?tag:"ns1:GetSupportedProductListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSupportedProductListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSupportedProductListResponse(struct soap *soap, _ns1__GetSupportedProductListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSupportedProductListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetSupportedProductList(struct soap *soap, _ns1__GetSupportedProductList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetSupportedProductList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetSupportedProductList(struct soap *soap, const char *tag, int id, _ns1__GetSupportedProductList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetSupportedProductList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetSupportedProductList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetSupportedProductList(struct soap *soap, const char *tag, _ns1__GetSupportedProductList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetSupportedProductList **)soap_malloc(soap, sizeof(_ns1__GetSupportedProductList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetSupportedProductList *)soap_instantiate__ns1__GetSupportedProductList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetSupportedProductList ** p = (_ns1__GetSupportedProductList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetSupportedProductList, sizeof(_ns1__GetSupportedProductList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetSupportedProductList(struct soap *soap, _ns1__GetSupportedProductList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetSupportedProductList);
	if (soap_out_PointerTo_ns1__GetSupportedProductList(soap, tag?tag:"ns1:GetSupportedProductList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetSupportedProductList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetSupportedProductList(struct soap *soap, _ns1__GetSupportedProductList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetSupportedProductList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOnlineUserCountResponse(struct soap *soap, _ns1__GetOnlineUserCountResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetOnlineUserCountResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOnlineUserCountResponse(struct soap *soap, const char *tag, int id, _ns1__GetOnlineUserCountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetOnlineUserCountResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCountResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOnlineUserCountResponse(struct soap *soap, const char *tag, _ns1__GetOnlineUserCountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetOnlineUserCountResponse **)soap_malloc(soap, sizeof(_ns1__GetOnlineUserCountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetOnlineUserCountResponse *)soap_instantiate__ns1__GetOnlineUserCountResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetOnlineUserCountResponse ** p = (_ns1__GetOnlineUserCountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetOnlineUserCountResponse, sizeof(_ns1__GetOnlineUserCountResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOnlineUserCountResponse(struct soap *soap, _ns1__GetOnlineUserCountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetOnlineUserCountResponse);
	if (soap_out_PointerTo_ns1__GetOnlineUserCountResponse(soap, tag?tag:"ns1:GetOnlineUserCountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetOnlineUserCountResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOnlineUserCountResponse(struct soap *soap, _ns1__GetOnlineUserCountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetOnlineUserCountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOnlineUserCount(struct soap *soap, _ns1__GetOnlineUserCount *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetOnlineUserCount))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOnlineUserCount(struct soap *soap, const char *tag, int id, _ns1__GetOnlineUserCount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetOnlineUserCount);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetOnlineUserCount ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOnlineUserCount(struct soap *soap, const char *tag, _ns1__GetOnlineUserCount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetOnlineUserCount **)soap_malloc(soap, sizeof(_ns1__GetOnlineUserCount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetOnlineUserCount *)soap_instantiate__ns1__GetOnlineUserCount(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetOnlineUserCount ** p = (_ns1__GetOnlineUserCount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetOnlineUserCount, sizeof(_ns1__GetOnlineUserCount), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOnlineUserCount(struct soap *soap, _ns1__GetOnlineUserCount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetOnlineUserCount);
	if (soap_out_PointerTo_ns1__GetOnlineUserCount(soap, tag?tag:"ns1:GetOnlineUserCount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetOnlineUserCount ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOnlineUserCount(struct soap *soap, _ns1__GetOnlineUserCount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetOnlineUserCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOnlineServerListResponse(struct soap *soap, _ns1__GetOnlineServerListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetOnlineServerListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOnlineServerListResponse(struct soap *soap, const char *tag, int id, _ns1__GetOnlineServerListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetOnlineServerListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOnlineServerListResponse(struct soap *soap, const char *tag, _ns1__GetOnlineServerListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetOnlineServerListResponse **)soap_malloc(soap, sizeof(_ns1__GetOnlineServerListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetOnlineServerListResponse *)soap_instantiate__ns1__GetOnlineServerListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetOnlineServerListResponse ** p = (_ns1__GetOnlineServerListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetOnlineServerListResponse, sizeof(_ns1__GetOnlineServerListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOnlineServerListResponse(struct soap *soap, _ns1__GetOnlineServerListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetOnlineServerListResponse);
	if (soap_out_PointerTo_ns1__GetOnlineServerListResponse(soap, tag?tag:"ns1:GetOnlineServerListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetOnlineServerListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOnlineServerListResponse(struct soap *soap, _ns1__GetOnlineServerListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetOnlineServerListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetOnlineServerList(struct soap *soap, _ns1__GetOnlineServerList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetOnlineServerList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetOnlineServerList(struct soap *soap, const char *tag, int id, _ns1__GetOnlineServerList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetOnlineServerList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetOnlineServerList ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetOnlineServerList(struct soap *soap, const char *tag, _ns1__GetOnlineServerList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetOnlineServerList **)soap_malloc(soap, sizeof(_ns1__GetOnlineServerList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetOnlineServerList *)soap_instantiate__ns1__GetOnlineServerList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetOnlineServerList ** p = (_ns1__GetOnlineServerList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetOnlineServerList, sizeof(_ns1__GetOnlineServerList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetOnlineServerList(struct soap *soap, _ns1__GetOnlineServerList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetOnlineServerList);
	if (soap_out_PointerTo_ns1__GetOnlineServerList(soap, tag?tag:"ns1:GetOnlineServerList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetOnlineServerList ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetOnlineServerList(struct soap *soap, _ns1__GetOnlineServerList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetOnlineServerList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByAddressResponse(struct soap *soap, _ns1__LookupServerByAddressResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByAddressResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByAddressResponse(struct soap *soap, const char *tag, int id, _ns1__LookupServerByAddressResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByAddressResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddressResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByAddressResponse(struct soap *soap, const char *tag, _ns1__LookupServerByAddressResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByAddressResponse **)soap_malloc(soap, sizeof(_ns1__LookupServerByAddressResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByAddressResponse *)soap_instantiate__ns1__LookupServerByAddressResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByAddressResponse ** p = (_ns1__LookupServerByAddressResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByAddressResponse, sizeof(_ns1__LookupServerByAddressResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByAddressResponse(struct soap *soap, _ns1__LookupServerByAddressResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByAddressResponse);
	if (soap_out_PointerTo_ns1__LookupServerByAddressResponse(soap, tag?tag:"ns1:LookupServerByAddressResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByAddressResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByAddressResponse(struct soap *soap, _ns1__LookupServerByAddressResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByAddressResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByAddress(struct soap *soap, _ns1__LookupServerByAddress *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByAddress))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByAddress(struct soap *soap, const char *tag, int id, _ns1__LookupServerByAddress *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByAddress);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByAddress ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByAddress(struct soap *soap, const char *tag, _ns1__LookupServerByAddress **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByAddress **)soap_malloc(soap, sizeof(_ns1__LookupServerByAddress *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByAddress *)soap_instantiate__ns1__LookupServerByAddress(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByAddress ** p = (_ns1__LookupServerByAddress **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByAddress, sizeof(_ns1__LookupServerByAddress), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByAddress(struct soap *soap, _ns1__LookupServerByAddress *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByAddress);
	if (soap_out_PointerTo_ns1__LookupServerByAddress(soap, tag?tag:"ns1:LookupServerByAddress", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByAddress ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByAddress(struct soap *soap, _ns1__LookupServerByAddress **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByAddress(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByNameResponse(struct soap *soap, _ns1__LookupServerByNameResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByNameResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByNameResponse(struct soap *soap, const char *tag, int id, _ns1__LookupServerByNameResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByNameResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByNameResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByNameResponse(struct soap *soap, const char *tag, _ns1__LookupServerByNameResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByNameResponse **)soap_malloc(soap, sizeof(_ns1__LookupServerByNameResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByNameResponse *)soap_instantiate__ns1__LookupServerByNameResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByNameResponse ** p = (_ns1__LookupServerByNameResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByNameResponse, sizeof(_ns1__LookupServerByNameResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByNameResponse(struct soap *soap, _ns1__LookupServerByNameResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByNameResponse);
	if (soap_out_PointerTo_ns1__LookupServerByNameResponse(soap, tag?tag:"ns1:LookupServerByNameResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByNameResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByNameResponse(struct soap *soap, _ns1__LookupServerByNameResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByNameResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LookupServerByName(struct soap *soap, _ns1__LookupServerByName *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LookupServerByName))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LookupServerByName(struct soap *soap, const char *tag, int id, _ns1__LookupServerByName *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LookupServerByName);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LookupServerByName ** SOAP_FMAC4 soap_in_PointerTo_ns1__LookupServerByName(struct soap *soap, const char *tag, _ns1__LookupServerByName **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LookupServerByName **)soap_malloc(soap, sizeof(_ns1__LookupServerByName *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LookupServerByName *)soap_instantiate__ns1__LookupServerByName(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LookupServerByName ** p = (_ns1__LookupServerByName **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LookupServerByName, sizeof(_ns1__LookupServerByName), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LookupServerByName(struct soap *soap, _ns1__LookupServerByName *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LookupServerByName);
	if (soap_out_PointerTo_ns1__LookupServerByName(soap, tag?tag:"ns1:LookupServerByName", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__LookupServerByName ** SOAP_FMAC4 soap_get_PointerTo_ns1__LookupServerByName(struct soap *soap, _ns1__LookupServerByName **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LookupServerByName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTotime(struct soap *soap, time_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_time);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTotime(struct soap *soap, const char *tag, int id, time_t *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_time);
	if (id < 0)
		return soap->error;
	return soap_out_time(soap, tag, id, *a, type);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTotime(struct soap *soap, const char *tag, time_t **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (time_t **)soap_malloc(soap, sizeof(time_t *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_time(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (time_t **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_time, sizeof(time_t), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTotime(struct soap *soap, time_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTotime);
	if (soap_out_PointerTotime(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTotime(struct soap *soap, time_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTotime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons4__NWGameServer))
		soap_serialize_PointerTons4__NWGameServer(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons4__NWGameServer(struct soap *soap, const char *tag, int id, ns4__NWGameServer **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons4__NWGameServer);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons4__NWGameServer(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns4__NWGameServer *** SOAP_FMAC4 soap_in_PointerToPointerTons4__NWGameServer(struct soap *soap, const char *tag, ns4__NWGameServer ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__NWGameServer ***)soap_malloc(soap, sizeof(ns4__NWGameServer **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons4__NWGameServer(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns4__NWGameServer ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons4__NWGameServer, sizeof(ns4__NWGameServer *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons4__NWGameServer);
	if (soap_out_PointerToPointerTons4__NWGameServer(soap, tag?tag:"ns4:NWGameServer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__NWGameServer *** SOAP_FMAC4 soap_get_PointerToPointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons4__NWGameServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ClientExtensionUpdate(struct soap *soap, ns4__ClientExtensionUpdate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ClientExtensionUpdate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ClientExtensionUpdate(struct soap *soap, const char *tag, int id, ns4__ClientExtensionUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ClientExtensionUpdate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ClientExtensionUpdate ** SOAP_FMAC4 soap_in_PointerTons4__ClientExtensionUpdate(struct soap *soap, const char *tag, ns4__ClientExtensionUpdate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ClientExtensionUpdate **)soap_malloc(soap, sizeof(ns4__ClientExtensionUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ClientExtensionUpdate *)soap_instantiate_ns4__ClientExtensionUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ClientExtensionUpdate ** p = (ns4__ClientExtensionUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ClientExtensionUpdate, sizeof(ns4__ClientExtensionUpdate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ClientExtensionUpdate(struct soap *soap, ns4__ClientExtensionUpdate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons4__ClientExtensionUpdate);
	if (soap_out_PointerTons4__ClientExtensionUpdate(soap, tag?tag:"ns4:ClientExtensionUpdate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ClientExtensionUpdate ** SOAP_FMAC4 soap_get_PointerTons4__ClientExtensionUpdate(struct soap *soap, ns4__ClientExtensionUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ClientExtensionUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, int id, ns5__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfstring **)soap_malloc(soap, sizeof(ns5__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfstring *)soap_instantiate_ns5__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfstring ** p = (ns5__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfstring);
	if (soap_out_PointerTons5__ArrayOfstring(soap, tag?tag:"ns5:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap *soap, unsigned int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap *soap, const char *tag, int id, unsigned int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedInt);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedInt(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap *soap, const char *tag, unsigned int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned int **)soap_malloc(soap, sizeof(unsigned int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedInt(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedInt, sizeof(unsigned int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap *soap, unsigned int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedInt);
	if (soap_out_PointerTounsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap *soap, unsigned int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__NWGameServer))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__NWGameServer(struct soap *soap, const char *tag, int id, ns4__NWGameServer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__NWGameServer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__NWGameServer ** SOAP_FMAC4 soap_in_PointerTons4__NWGameServer(struct soap *soap, const char *tag, ns4__NWGameServer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__NWGameServer **)soap_malloc(soap, sizeof(ns4__NWGameServer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__NWGameServer *)soap_instantiate_ns4__NWGameServer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__NWGameServer ** p = (ns4__NWGameServer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__NWGameServer, sizeof(ns4__NWGameServer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons4__NWGameServer);
	if (soap_out_PointerTons4__NWGameServer(soap, tag?tag:"ns4:NWGameServer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__NWGameServer ** SOAP_FMAC4 soap_get_PointerTons4__NWGameServer(struct soap *soap, ns4__NWGameServer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__NWGameServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfNWGameServer(struct soap *soap, ns4__ArrayOfNWGameServer *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns4__ArrayOfNWGameServer))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfNWGameServer(struct soap *soap, const char *tag, int id, ns4__ArrayOfNWGameServer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns4__ArrayOfNWGameServer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns4__ArrayOfNWGameServer ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfNWGameServer(struct soap *soap, const char *tag, ns4__ArrayOfNWGameServer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns4__ArrayOfNWGameServer **)soap_malloc(soap, sizeof(ns4__ArrayOfNWGameServer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns4__ArrayOfNWGameServer *)soap_instantiate_ns4__ArrayOfNWGameServer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns4__ArrayOfNWGameServer ** p = (ns4__ArrayOfNWGameServer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns4__ArrayOfNWGameServer, sizeof(ns4__ArrayOfNWGameServer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfNWGameServer(struct soap *soap, ns4__ArrayOfNWGameServer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons4__ArrayOfNWGameServer);
	if (soap_out_PointerTons4__ArrayOfNWGameServer(soap, tag?tag:"ns4:ArrayOfNWGameServer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns4__ArrayOfNWGameServer ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfNWGameServer(struct soap *soap, ns4__ArrayOfNWGameServer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons4__ArrayOfNWGameServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ns3__guid);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns3__guid(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ns3__guid, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__guid);
	if (soap_out_ns3__guid(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns3__guid(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_ns3__duration);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns3__duration(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_ns3__duration, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns3__duration);
	if (soap_out_ns3__duration(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns3__duration(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_ns3__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__duration);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__duration, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__decimal);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__decimal, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__anyURI);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__anyURI, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__IDREF);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__IDREF, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__IDREF);
	if (soap_out_xsd__IDREF(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__ID);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__ID, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__ID);
	if (soap_out_xsd__ID(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
